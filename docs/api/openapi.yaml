openapi: 3.0.3
info:
  title: ホテル統合システムAPI
  description: hotel-saas、hotel-pms、hotel-member、hotel-commonの統合API仕様
  version: 1.0.0
  contact:
    name: ホテル統合システム開発チーム
servers:
  - url: https://api.hotel-common.example.com/v1
    description: 本番環境
  - url: https://api-staging.hotel-common.example.com/v1
    description: ステージング環境
  - url: http://localhost:3400/v1
    description: 開発環境

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    # 共通スキーマ
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
    
    Pagination:
      type: object
      properties:
        total:
          type: integer
        page:
          type: integer
        pageSize:
          type: integer
        totalPages:
          type: integer
    
    # 顧客関連
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        memberId:
          type: string
          nullable: true
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
          nullable: true
        phone:
          type: string
          nullable: true
        address:
          type: object
          nullable: true
        birthdate:
          type: string
          format: date
          nullable: true
        gender:
          type: string
          enum: [MALE, FEMALE, OTHER, PREFER_NOT_TO_SAY]
          nullable: true
        nationality:
          type: string
          nullable: true
        preferences:
          type: object
          nullable: true
        notes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        membership:
          $ref: '#/components/schemas/Membership'
          nullable: true
    
    CustomerCreate:
      type: object
      required:
        - firstName
        - lastName
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: object
        birthdate:
          type: string
          format: date
        gender:
          type: string
          enum: [MALE, FEMALE, OTHER, PREFER_NOT_TO_SAY]
        nationality:
          type: string
        preferences:
          type: object
        notes:
          type: string
    
    CustomerUpdate:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: object
        birthdate:
          type: string
          format: date
        gender:
          type: string
          enum: [MALE, FEMALE, OTHER, PREFER_NOT_TO_SAY]
        nationality:
          type: string
        preferences:
          type: object
        notes:
          type: string
    
    # 会員関連
    Membership:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customerId:
          type: string
          format: uuid
        rankId:
          type: string
          format: uuid
        totalPoints:
          type: integer
        availablePoints:
          type: integer
        registeredAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
          nullable: true
        status:
          type: string
          enum: [ACTIVE, EXPIRED, SUSPENDED]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        rank:
          $ref: '#/components/schemas/MembershipRank'
    
    MembershipRank:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        name:
          type: string
        level:
          type: integer
        pointThreshold:
          type: integer
        benefits:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Point:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customerId:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        type:
          type: string
          enum: [EARN, USE, BONUS, ADJUSTMENT, EXPIRED]
        amount:
          type: integer
        balance:
          type: integer
        description:
          type: string
          nullable: true
        expiresAt:
          type: string
          format: date-time
          nullable: true
        relatedEntityType:
          type: string
          nullable: true
        relatedEntityId:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
    
    PointCreate:
      type: object
      required:
        - customerId
        - type
        - amount
      properties:
        customerId:
          type: string
          format: uuid
        type:
          type: string
          enum: [EARN, USE, BONUS, ADJUSTMENT]
        amount:
          type: integer
        description:
          type: string
        expiresAt:
          type: string
          format: date-time
        relatedEntityType:
          type: string
        relatedEntityId:
          type: string
    
    # 予約関連
    Reservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        reservationNumber:
          type: string
        customerId:
          type: string
          format: uuid
        roomId:
          type: string
          format: uuid
        checkInDate:
          type: string
          format: date-time
        checkOutDate:
          type: string
          format: date-time
        adults:
          type: integer
        children:
          type: integer
        status:
          type: string
          enum: [PENDING, CONFIRMED, CHECKED_IN, CHECKED_OUT, CANCELED, NO_SHOW]
        origin:
          type: string
          enum: [MEMBER, OTA, FRONT, PHONE, WALK_IN]
        specialRequests:
          type: string
          nullable: true
        totalAmount:
          type: number
        createdById:
          type: string
          format: uuid
        updatedById:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        customer:
          $ref: '#/components/schemas/Customer'
        room:
          $ref: '#/components/schemas/Room'
    
    ReservationCreate:
      type: object
      required:
        - customerId
        - roomId
        - checkInDate
        - checkOutDate
        - adults
        - origin
      properties:
        customerId:
          type: string
          format: uuid
        roomId:
          type: string
          format: uuid
        checkInDate:
          type: string
          format: date-time
        checkOutDate:
          type: string
          format: date-time
        adults:
          type: integer
          minimum: 1
        children:
          type: integer
          minimum: 0
        origin:
          type: string
          enum: [MEMBER, OTA, FRONT, PHONE, WALK_IN]
        specialRequests:
          type: string
    
    ReservationUpdate:
      type: object
      properties:
        roomId:
          type: string
          format: uuid
        checkInDate:
          type: string
          format: date-time
        checkOutDate:
          type: string
          format: date-time
        adults:
          type: integer
          minimum: 1
        children:
          type: integer
          minimum: 0
        status:
          type: string
          enum: [PENDING, CONFIRMED, CHECKED_IN, CHECKED_OUT, CANCELED, NO_SHOW]
        specialRequests:
          type: string
    
    # 部屋関連
    Room:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        roomNumber:
          type: string
        roomTypeId:
          type: string
          format: uuid
        roomGradeId:
          type: string
          format: uuid
          nullable: true
        floor:
          type: integer
        status:
          type: string
          enum: [AVAILABLE, OCCUPIED, CLEANING, MAINTENANCE, OUT_OF_ORDER]
        notes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        roomType:
          $ref: '#/components/schemas/RoomType'
        roomGrade:
          $ref: '#/components/schemas/RoomGrade'
          nullable: true
    
    RoomType:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        capacity:
          type: integer
        amenities:
          type: object
          nullable: true
        images:
          type: object
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    RoomGrade:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        roomTypeId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        priceMultiplier:
          type: number
        benefits:
          type: object
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    # サービス関連
    Service:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        category:
          type: string
          enum: [FOOD, BEVERAGE, AMENITY, SPA, CLEANING, TRANSPORT, OTHER]
        price:
          type: number
        taxRate:
          type: number
        images:
          type: object
          nullable: true
        availability:
          type: object
          nullable: true
        status:
          type: string
          enum: [ACTIVE, INACTIVE, SEASONAL]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    ServiceOrder:
      type: object
      properties:
        id:
          type: string
          format: uuid
        serviceId:
          type: string
          format: uuid
        roomId:
          type: string
          format: uuid
          nullable: true
        customerId:
          type: string
          format: uuid
          nullable: true
        quantity:
          type: integer
        status:
          type: string
          enum: [PENDING, PROCESSING, COMPLETED, CANCELED]
        requestedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
          nullable: true
        amount:
          type: number
        notes:
          type: string
          nullable: true
        service:
          $ref: '#/components/schemas/Service'
    
    ServiceOrderCreate:
      type: object
      required:
        - serviceId
        - quantity
      properties:
        serviceId:
          type: string
          format: uuid
        roomId:
          type: string
          format: uuid
        customerId:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1
        notes:
          type: string
    
    # 請求関連
    Billing:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        reservationId:
          type: string
          format: uuid
        billingNumber:
          type: string
        status:
          type: string
          enum: [PENDING, PARTIAL, PAID, OVERDUE, CANCELED, REFUNDED]
        totalAmount:
          type: number
        paidAmount:
          type: number
        dueDate:
          type: string
          format: date-time
          nullable: true
        paymentMethod:
          type: string
          enum: [CASH, CREDIT_CARD, BANK_TRANSFER, POINTS, OTHER]
          nullable: true
        paymentDate:
          type: string
          format: date-time
          nullable: true
        items:
          type: object
        notes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    BillingCreate:
      type: object
      required:
        - reservationId
        - items
      properties:
        reservationId:
          type: string
          format: uuid
        dueDate:
          type: string
          format: date-time
        items:
          type: object
        notes:
          type: string
    
    BillingPayment:
      type: object
      required:
        - amount
        - paymentMethod
      properties:
        amount:
          type: number
        paymentMethod:
          type: string
          enum: [CASH, CREDIT_CARD, BANK_TRANSFER, POINTS, OTHER]
        paymentDate:
          type: string
          format: date-time
        notes:
          type: string
    
    # フィードバック関連
    Feedback:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customerId:
          type: string
          format: uuid
        entityType:
          type: string
        entityId:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
    
    FeedbackCreate:
      type: object
      required:
        - customerId
        - entityType
        - entityId
        - rating
      properties:
        customerId:
          type: string
          format: uuid
        entityType:
          type: string
        entityId:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
    
    # スタッフ関連
    Staff:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        staffCode:
          type: string
        staffNumber:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        lastNameKana:
          type: string
          nullable: true
        firstNameKana:
          type: string
          nullable: true
        displayName:
          type: string
        employeeId:
          type: string
          nullable: true
        email:
          type: string
          format: email
          nullable: true
        emailVerifiedAt:
          type: string
          format: date-time
          nullable: true
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
        failedLoginCount:
          type: integer
          default: 0
        lockedUntil:
          type: string
          format: date-time
          nullable: true
        defaultRoleId:
          type: string
          format: uuid
          nullable: true
        baseLevel:
          type: integer
          default: 1
        departmentCode:
          type: string
          nullable: true
        positionTitle:
          type: string
          nullable: true
        hireDate:
          type: string
          format: date
          nullable: true
        employmentType:
          type: string
          enum: [full_time, part_time, contract, temporary]
          default: full_time
        employmentStatus:
          type: string
          enum: [active, inactive, suspended, terminated]
          default: active
        terminationDate:
          type: string
          format: date
          nullable: true
        terminationReason:
          type: string
          nullable: true
        phoneNumber:
          type: string
          nullable: true
        emergencyContact:
          type: object
          nullable: true
        address:
          type: object
          nullable: true
        photoUrl:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        skills:
          type: object
          nullable: true
        shiftPattern:
          type: string
          nullable: true
        hourlyRate:
          type: number
          nullable: true
        salary:
          type: number
          nullable: true
        supervisorId:
          type: string
          format: uuid
          nullable: true
        accessRestrictions:
          type: object
          default: {}
        notificationSettings:
          type: object
          default: {}
        uiPreferences:
          type: object
          default: {}
        securityClearance:
          type: string
          nullable: true
        accessCardId:
          type: string
          nullable: true
        isActive:
          type: boolean
          default: true
        isSystemUser:
          type: boolean
          default: false
        notes:
          type: string
          nullable: true
        hotelCommonUserId:
          type: string
          format: uuid
          nullable: true
        legacyUserData:
          type: object
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: string
          format: uuid
          nullable: true
        updatedBy:
          type: string
          format: uuid
          nullable: true
        deletedAt:
          type: string
          format: date-time
          nullable: true
    
    StaffSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        staffCode:
          type: string
        staffNumber:
          type: string
        displayName:
          type: string
        email:
          type: string
          format: email
          nullable: true
        departmentCode:
          type: string
          nullable: true
        positionTitle:
          type: string
          nullable: true
        baseLevel:
          type: integer
        employmentStatus:
          type: string
          enum: [active, inactive, suspended, terminated]
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
    
    StaffCreate:
      type: object
      required:
        - lastName
        - firstName
        - displayName
        - staffCode
        - staffNumber
      properties:
        lastName:
          type: string
        firstName:
          type: string
        lastNameKana:
          type: string
        firstNameKana:
          type: string
        displayName:
          type: string
        staffCode:
          type: string
        staffNumber:
          type: string
        employeeId:
          type: string
        email:
          type: string
          format: email
        departmentCode:
          type: string
        positionTitle:
          type: string
        baseLevel:
          type: integer
          minimum: 1
          maximum: 5
        employmentType:
          type: string
          enum: [full_time, part_time, contract, temporary]
        hireDate:
          type: string
          format: date
        phoneNumber:
          type: string
        emergencyContact:
          type: object
        address:
          type: object
        bio:
          type: string
        skills:
          type: object
        shiftPattern:
          type: string
        hourlyRate:
          type: number
        salary:
          type: number
        supervisorId:
          type: string
          format: uuid
        notes:
          type: string
    
    StaffUpdate:
      type: object
      properties:
        lastName:
          type: string
        firstName:
          type: string
        lastNameKana:
          type: string
        firstNameKana:
          type: string
        displayName:
          type: string
        email:
          type: string
          format: email
        departmentCode:
          type: string
        positionTitle:
          type: string
        baseLevel:
          type: integer
          minimum: 1
          maximum: 5
        employmentType:
          type: string
          enum: [full_time, part_time, contract, temporary]
        employmentStatus:
          type: string
          enum: [active, inactive, suspended, terminated]
        terminationDate:
          type: string
          format: date
        terminationReason:
          type: string
        phoneNumber:
          type: string
        emergencyContact:
          type: object
        address:
          type: object
        bio:
          type: string
        skills:
          type: object
        shiftPattern:
          type: string
        hourlyRate:
          type: number
        salary:
          type: number
        supervisorId:
          type: string
          format: uuid
        accessRestrictions:
          type: object
        notificationSettings:
          type: object
        uiPreferences:
          type: object
        securityClearance:
          type: string
        accessCardId:
          type: string
        isActive:
          type: boolean
        notes:
          type: string

# パス定義
paths:
  # 顧客API（hotel-member）
  /customers:
    get:
      summary: 顧客一覧取得
      operationId: getCustomers
      tags:
        - customers
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 顧客一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: 顧客作成
      operationId: createCustomer
      tags:
        - customers
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreate'
      responses:
        '201':
          description: 顧客作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /customers/{id}:
    get:
      summary: 顧客詳細取得
      operationId: getCustomer
      tags:
        - customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 顧客詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: 顧客が見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    patch:
      summary: 顧客情報更新
      operationId: updateCustomer
      tags:
        - customers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdate'
      responses:
        '200':
          description: 顧客更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 顧客が見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # 予約API（hotel-pms）
  /reservations:
    get:
      summary: 予約一覧取得
      operationId: getReservations
      tags:
        - reservations
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [PENDING, CONFIRMED, CHECKED_IN, CHECKED_OUT, CANCELED, NO_SHOW]
        - name: fromDate
          in: query
          schema:
            type: string
            format: date
        - name: toDate
          in: query
          schema:
            type: string
            format: date
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 予約一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Reservation'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: 予約作成
      operationId: createReservation
      tags:
        - reservations
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationCreate'
      responses:
        '201':
          description: 予約作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 部屋の二重予約
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # サービスAPI（hotel-saas）
  /services:
    get:
      summary: サービス一覧取得
      operationId: getServices
      tags:
        - services
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
        - name: category
          in: query
          schema:
            type: string
            enum: [FOOD, BEVERAGE, AMENITY, SPA, CLEANING, TRANSPORT, OTHER]
        - name: status
          in: query
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, SEASONAL]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: サービス一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Service'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /service-orders:
    post:
      summary: サービス注文作成
      operationId: createServiceOrder
      tags:
        - serviceOrders
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceOrderCreate'
      responses:
        '201':
          description: サービス注文作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceOrder'
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # 会員ポイントAPI（hotel-member）
  /customers/{customerId}/points:
    get:
      summary: 顧客ポイント履歴取得
      operationId: getCustomerPoints
      tags:
        - points
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ポイント履歴
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Point'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          description: 顧客が見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: ポイント追加/使用
      operationId: addPoints
      tags:
        - points
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PointCreate'
      responses:
        '201':
          description: ポイント操作成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Point'
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: 顧客が見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # スタッフ管理API（hotel-common）
  /admin/staff:
    get:
      summary: スタッフ一覧取得（管理者用）
      operationId: getAdminStaffList
      tags:
        - admin
        - staff
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: search
          in: query
          description: 名前、メールアドレス、スタッフコードで検索
          schema:
            type: string
        - name: departmentCode
          in: query
          description: 部門コードでフィルタリング
          schema:
            type: string
        - name: employmentStatus
          in: query
          description: 雇用ステータスでフィルタリング
          schema:
            type: string
            enum: [active, inactive, suspended, terminated]
        - name: baseLevel
          in: query
          description: 権限レベルでフィルタリング
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: sortBy
          in: query
          description: ソート項目
          schema:
            type: string
            enum: [displayName, staffCode, departmentCode, baseLevel, lastLoginAt, createdAt]
            default: displayName
        - name: sortOrder
          in: query
          description: ソート順序
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      security:
        - bearerAuth: []
      responses:
        '200':
          description: スタッフ一覧
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StaffSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  summary:
                    type: object
                    properties:
                      totalStaff:
                        type: integer
                      activeStaff:
                        type: integer
                      inactiveStaff:
                        type: integer
                      departmentCounts:
                        type: object
                        additionalProperties:
                          type: integer
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 権限不足（管理者権限が必要）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: スタッフ作成（管理者用）
      operationId: createAdminStaff
      tags:
        - admin
        - staff
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StaffCreate'
      responses:
        '201':
          description: スタッフ作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Staff'
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 重複エラー（スタッフコード、メールアドレス等）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 権限不足（管理者権限が必要）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/staff/{id}:
    get:
      summary: スタッフ詳細取得（管理者用）
      operationId: getAdminStaff
      tags:
        - admin
        - staff
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: スタッフ詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Staff'
        '404':
          description: スタッフが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 権限不足（管理者権限が必要）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    patch:
      summary: スタッフ情報更新（管理者用）
      operationId: updateAdminStaff
      tags:
        - admin
        - staff
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StaffUpdate'
      responses:
        '200':
          description: スタッフ更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Staff'
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: スタッフが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: 重複エラー（メールアドレス等）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 権限不足（管理者権限が必要）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: スタッフ削除（管理者用）
      operationId: deleteAdminStaff
      tags:
        - admin
        - staff
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: soft
          in: query
          description: ソフト削除フラグ（デフォルト：true）
          schema:
            type: boolean
            default: true
      security:
        - bearerAuth: []
      responses:
        '200':
          description: スタッフ削除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  deletedAt:
                    type: string
                    format: date-time
                    nullable: true
        '404':
          description: スタッフが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: 削除不可（システムユーザー等）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: 権限不足（管理者権限が必要）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # 既存のスタッフAPI（個別取得用）
  /staff/{id}:
    get:
      summary: スタッフ詳細取得
      operationId: getStaff
      tags:
        - staff
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        '200':
          description: スタッフ詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Staff'
        '404':
          description: スタッフが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# セキュリティ定義
security:
  - bearerAuth: []