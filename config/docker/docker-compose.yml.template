version: '3.8'

services:
  # Nginx - リバースプロキシ
  nginx:
    image: nginx:stable-alpine
    container_name: omotenasuai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/sites-available:/etc/nginx/sites-enabled
      - ./config/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
      - ./static:/var/www/omotenasuai/static
      - ./error:/var/www/omotenasuai/error
    depends_on:
      - hotel-common
      - hotel-saas
      - hotel-pms
      - hotel-member
    restart: always
    networks:
      - omotenasuai-network

  # PostgreSQL - データベース
  postgres:
    image: postgres:14-alpine
    container_name: omotenasuai-postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: always
    networks:
      - omotenasuai-network

  # RabbitMQ - メッセージブローカー
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: omotenasuai-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    restart: always
    networks:
      - omotenasuai-network

  # Redis - キャッシュ
  redis:
    image: redis:alpine
    container_name: omotenasuai-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: always
    networks:
      - omotenasuai-network

  # hotel-common - 共通基盤
  hotel-common:
    build:
      context: ../hotel-common
      dockerfile: Dockerfile
    container_name: omotenasuai-common
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: 3400
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
    ports:
      - "3400:3400"
    volumes:
      - ../hotel-common:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: always
    networks:
      - omotenasuai-network

  # hotel-saas - AIコンシェルジュ
  hotel-saas:
    build:
      context: ../hotel-saas
      dockerfile: Dockerfile
    container_name: omotenasuai-saas
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: 3100
      COMMON_API_URL: http://hotel-common:3400
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    ports:
      - "3100:3100"
    volumes:
      - ../hotel-saas:/app
      - /app/node_modules
    depends_on:
      - hotel-common
      - redis
      - rabbitmq
    restart: always
    networks:
      - omotenasuai-network

  # hotel-pms - ホテルマネジメントシステム
  hotel-pms:
    build:
      context: ../hotel-pms
      dockerfile: Dockerfile
    container_name: omotenasuai-pms
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: 3300
      COMMON_API_URL: http://hotel-common:3400
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    ports:
      - "3300:3300"
    volumes:
      - ../hotel-pms:/app
      - /app/node_modules
    depends_on:
      - hotel-common
      - redis
      - rabbitmq
    restart: always
    networks:
      - omotenasuai-network

  # hotel-member - 会員管理システム
  hotel-member:
    build:
      context: ../hotel-member
      dockerfile: Dockerfile
    container_name: omotenasuai-member
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: 3200
      COMMON_API_URL: http://hotel-common:3400
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    ports:
      - "3200:3200"
    volumes:
      - ../hotel-member:/app
      - /app/node_modules
    depends_on:
      - hotel-common
      - redis
      - rabbitmq
    restart: always
    networks:
      - omotenasuai-network

  # Prometheus - 監視
  prometheus:
    image: prom/prometheus:latest
    container_name: omotenasuai-prometheus
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    restart: always
    networks:
      - omotenasuai-network

  # Grafana - 監視ダッシュボード
  grafana:
    image: grafana/grafana:latest
    container_name: omotenasuai-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: always
    networks:
      - omotenasuai-network

networks:
  omotenasuai-network:
    driver: bridge

volumes:
  postgres-data:
  rabbitmq-data:
  redis-data:
  prometheus-data:
  grafana-data: