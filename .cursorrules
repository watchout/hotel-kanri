# 🏨 hotel-kanri プロジェクト - Cursor AI 統合ルール

**最終更新**: 2025年10月13日  
**バージョン**: 2.3.0（グローバル展開戦略統合）  
**適用対象**: 全AI（Sun/Luna/Suno/Iza）  
**自動読み込み**: Cursor起動時に自動適用

---

## 🌏 【最優先】グローバル展開戦略

**このシステム群の開発方針として、以下を常に念頭に置いてください：**

### 🎯 市場戦略
- **主要市場**: 日本・アジア・東南アジア圏を中心に展開
- **インバウンド対応**: 中国・インド・東南アジア・アフリカ圏からの旅行客に本格対応
- **差別化**: 表面的な欧米対応ではなく、言語・文化・食事・生活習慣への深い理解に基づく「日本のおもてなし」の実現

### 🌐 技術的対応
1. **15言語完全対応**
   - 中国語（簡体字・繁体字）、韓国語、タイ語、ベトナム語、インドネシア語、マレー語、フィリピン語、ヒンディー語、アラビア語等
   - 単なる翻訳ではなく、文化的ニュアンスを理解した表現

2. **200+国の文化プロファイル**
   - 宗教的配慮（イスラム・ヒンドゥー・仏教・ユダヤ教等）
   - 食文化への深い理解（ハラール・コーシャ・ベジタリアン等）
   - 文化的タブーの回避（数字・色・ジェスチャー等）

3. **文化的に適切なAI応答**
   - コミュニケーションスタイルの最適化
   - 敬語レベルの自動調整
   - 文化的コンテキストの理解

### ✅ 全開発者への必須ルール
- ✅ 機能開発時は常にグローバル展開を意識
- ✅ 多言語対応は後付けではなく、最初から組み込む
- ✅ 文化的配慮は特別機能ではなく、標準機能
- ✅ ステレオタイプを避け、個人を尊重
- ✅ 文化データはセンシティブに扱う（深いリサーチ必須）

### 📖 詳細仕様
**必読SSOT**:
- `/Users/kaneko/hotel-kanri/docs/03_ssot/00_foundation/STRATEGIC_VISION_GLOBAL_EXPANSION.md` ★最重要
- `/Users/kaneko/hotel-kanri/docs/03_ssot/00_foundation/SSOT_WORLD_CLASS_UI_DESIGN_PRINCIPLES.md` ★最重要
- `/Users/kaneko/hotel-kanri/docs/03_ssot/00_foundation/SSOT_MULTILINGUAL_SYSTEM.md`
- `/Users/kaneko/hotel-kanri/docs/03_ssot/00_foundation/SSOT_MULTICULTURAL_AI.md`

---

## 🚨 【緊急停止ルール】エラー発生時の最優先プロトコル

**このセクションは全てのルールより優先されます**

### ⚠️ エラー検知キーワード

以下のキーワードを含むエラーが発生した場合、**即座に実装を停止**してください：

```
- "Error"、"エラー"、"失敗"、"できない"、"できません"
- "Connection refused"、"接続できない"、"Cannot connect"
- "undefined"、"null"、"is not defined"
- "Prisma"、"Database"、"PostgreSQL"、"SQLite"
- "Authentication failed"、"認証失敗"、"Unauthorized"
- "tenant_id"、"テナントID"、"session"
```

### 🛑 エラー発生時の強制手順（絶対遵守）

```markdown
Step 1: 【実装即座停止】
  ❌ エラーを修正しようとしない
  ❌ 推測で実装を続けない
  ❌ 「動けばいい」という発想
  ✅ すぐにStep 2へ

Step 2: 【SSOT再読み込み】
  該当SSOTファイルを必ず再読み込み:
  - テナント関連 → SSOT_SAAS_MULTITENANT.md
  - 認証・セッション → SSOT_SAAS_ADMIN_AUTHENTICATION.md
  - DB・Prisma → SSOT_DATABASE_SCHEMA.md
  - 本番同等性 → SSOT_PRODUCTION_PARITY_RULES.md

Step 3: 【ガードレール確認】
  📖 .cursor/prompts/ssot_implementation_guard.md

Step 4: 【ユーザー報告】
  以下のテンプレートで報告:
  
  🚨 エラーが発生しました。SSOT確認プロトコルを実行します。
  
  ## エラー内容
  [エラーメッセージ]
  
  ## 該当SSOT
  [SSOTファイル名]
  
  ## SSOT記載内容
  [該当セクションの引用]
  
  ## 判断
  - [ ] SSOTに記載あり → SSOT通りに実装
  - [ ] SSOTに記載なし → ユーザーに質問
  
  ## 提案する対応方針
  [具体的な実装方針]
  
  実装を再開してよろしいでしょうか？

Step 5: 【承認後再開】
  ユーザーの承認を得てから実装を再開
```

### 🚫 絶対禁止パターン（自動停止トリガー）

以下のコードパターンを実装しようとした場合、**即座に停止**してSSOT確認：

```typescript
// ❌ Pattern 1: hotel-saasでのPrisma直接使用
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

// ❌ Pattern 2: フォールバック値の使用
const tenantId = session.tenantId || 'default';
const tenantId = session.tenantId ?? 'default';

// ❌ Pattern 3: 環境分岐実装
if (process.env.NODE_ENV === 'development') {
  // 開発環境専用の実装
}

// ❌ Pattern 4: データベース切り替え提案
"開発環境ではSQLiteを使用すべきです"
"PostgreSQLからSQLiteに切り替えます"

// ❌ Pattern 5: システム境界違反
// hotel-saasから直接DB操作、Prisma実行等
```

**これらのパターンを検知したら、必ずSSOT確認してください。**

---

## 📍 ドキュメント参照ルール（コンテキスト別）- **CRITICAL**

### 現在の作業場所を確認

実装開始前に、必ず以下を確認してください：

```bash
pwd  # 現在のディレクトリを確認
```

### 🏗️ hotel-kanriでの作業（SSOT作成・管理）

**判定**: `/Users/kaneko/hotel-kanri`

✅ **参照可能**:
- `/Users/kaneko/hotel-kanri/docs/_archived_system_docs/` - 全システムのアーカイブ（SSOT作成時のみ）
- `/Users/kaneko/hotel-saas/server/` - 実装ソース
- `/Users/kaneko/hotel-saas/pages/` - 実装ソース
- `/Users/kaneko/hotel-pms/server/` - 実装ソース
- `/Users/kaneko/hotel-member/src/` - 実装ソース
- `/Users/kaneko/hotel-common/src/` - 実装ソース
- `/Users/kaneko/hotel-kanri/docs/03_ssot/` - 既存SSOT
- `/Users/kaneko/hotel-kanri/docs/standards/` - 標準・規約

**目的**: 既存情報を正確に把握し、高品質なSSOTを作成

**許可される行動**:
- 既存ドキュメントの参照（アーカイブ含む）
- 実装ソースの調査
- SSOT間の整合性確認

---

### 🏨 各システムでの作業（SSOT実装）

#### hotel-saasでの作業時

**判定**: `/Users/kaneko/hotel-saas`

✅ **参照必須**:
- `/Users/kaneko/hotel-kanri/docs/03_ssot/` - **SSOTのみ**
- `/Users/kaneko/hotel-saas/server/` - 自システムの実装ソース
- `/Users/kaneko/hotel-saas/pages/` - 自システムの実装ソース
- `/Users/kaneko/hotel-kanri/docs/standards/` - 標準・規約
- `/Users/kaneko/hotel-kanri/.cursor/prompts/` - 実装ガイド

❌ **参照絶対禁止**:
- `/Users/kaneko/hotel-saas/docs/` - **削除済み**
- `/Users/kaneko/hotel-kanri/docs/_archived_system_docs/hotel-saas/` - **アーカイブ**
- 古いドキュメント全般

**理由**: 古いドキュメントを参照すると、SSOT違反実装になる

#### hotel-pmsでの作業時

**判定**: `/Users/kaneko/hotel-pms`

✅ **参照必須**:
- `/Users/kaneko/hotel-kanri/docs/03_ssot/` - **SSOTのみ**
- `/Users/kaneko/hotel-pms/server/` - 自システムの実装ソース

❌ **参照絶対禁止**:
- `/Users/kaneko/hotel-pms/docs/` - **削除予定**
- `/Users/kaneko/hotel-kanri/docs/_archived_system_docs/hotel-pms/` - **アーカイブ**

#### hotel-memberでの作業時

**判定**: `/Users/kaneko/hotel-member`

✅ **参照必須**:
- `/Users/kaneko/hotel-kanri/docs/03_ssot/` - **SSOTのみ**
- `/Users/kaneko/hotel-member/src/` - 自システムの実装ソース

❌ **参照絶対禁止**:
- `/Users/kaneko/hotel-member/docs/` - **削除予定**
- `/Users/kaneko/hotel-kanri/docs/_archived_system_docs/hotel-member/` - **アーカイブ**

#### hotel-commonでの作業時

**判定**: `/Users/kaneko/hotel-common`

✅ **参照必須**:
- `/Users/kaneko/hotel-kanri/docs/03_ssot/` - **SSOTのみ**
- `/Users/kaneko/hotel-common/src/` - 自システムの実装ソース

❌ **参照絶対禁止**:
- `/Users/kaneko/hotel-common/docs/` - **削除予定**
- `/Users/kaneko/hotel-kanri/docs/_archived_system_docs/hotel-common/` - **アーカイブ**

---

### 🚨 エラー発生時のドキュメント参照判定

エラーが発生した時の対応フロー：

```
Step 1: 現在地確認
  pwd を実行
  ↓
Step 2: コンテキスト判定
  ↓
  hotel-kanri？
    ↓ YES
    ✅ アーカイブ参照OK（SSOT作成時のみ）
    ✅ 既存ドキュメント参照OK
    ✅ 問題解決のために必要な情報を収集
  ↓ NO
  各システム？
    ↓ YES
    ❌ システム内ドキュメント参照NG（削除済み）
    ❌ アーカイブ参照NG
    ✅ SSOTのみ参照
    ✅ error_detection_protocol.md 実行
    ✅ SSOT確認
    ✅ ユーザーに報告
```

### 🤖 AI自己診断チェックリスト

実装開始前に、以下を**必ず**自問してください：

- [ ] **現在の作業ディレクトリは？** (`pwd`で確認)
- [ ] **hotel-kanriで作業中？** → アーカイブ参照OK
- [ ] **各システムで作業中？** → SSOTのみ参照、アーカイブNG
- [ ] **エラー発生時？** → コンテキスト判定 → 適切な参照先を選択

---

## 📊 【Linear運用ルール】進捗管理の唯一の真実

**導入日**: 2025年10月18日  
**対象**: 全AI（Sun/Luna/Suno/Iza）

### 🎯 基本原則

**Linearが唯一の進捗管理ツール**

✅ **Linearでやること**:
- タスクの作成・更新
- ステータス管理（Todo → In Progress → Done）
- 工数記録（見積もり + 実績）
- 依存関係管理・ブロッカー管理

❌ **やらないこと**:
- SSOT_PROGRESS_MASTER.md の手動更新
- Markdownファイルでの進捗管理

### 🎯 次のタスク選択ルール（★★★AI必読）

**絶対ルール**: タスクを開始する前に、以下の順序で選択する

```markdown
【タスク選択の優先順位】

Priority 1（最優先）: 
  1. Status = "Backlog" または "Spec Ready"
  2. Priority = 1（最高優先度）
  3. 依存関係 = ブロックされていない（Blocked byなし）
  4. Assignee = 自分（Sun/Luna/Suno/Iza）
  
Priority 2（高優先）:
  1. Status = "Backlog" または "Spec Ready"
  2. Priority = 2
  3. 依存関係 = ブロックされていない
  
Priority 3（通常）:
  1. Status = "Backlog"
  2. Priority = 3
  3. 依存関係 = ブロックされていない

【タスク選択の禁止事項】

❌ 絶対禁止:
- 依存関係を無視してタスクを開始する
- 「Blocked by」が設定されているタスクを開始する
- 自分（Assignee）以外のタスクを開始する
- Priorityを無視してタスクを選択する

✅ 正しい対応:
1. Linearで次のタスクを検索
2. 依存関係を確認
3. ブロックされていないタスクを選択
4. ユーザーに「次のタスク: LIN-XXX」を報告
5. ユーザーの承認を得てから開始

【依存関係の理解】

SSOT作成 → hotel-common実装 → hotel-saas実装

例:
- LIN-1: SSOT作成: SSOT_ADMIN_PERMISSIONS
- LIN-2: hotel-common実装: SSOT_ADMIN_PERMISSIONS (Blocked by LIN-1)
- LIN-3: hotel-saas実装: SSOT_ADMIN_PERMISSIONS (Blocked by LIN-2)

正しい順序:
1. LIN-1を完了
2. LIN-2を開始（LIN-1完了後）
3. LIN-3を開始（LIN-2完了後）

間違った順序:
❌ LIN-1未完了でLIN-2を開始
❌ LIN-2未完了でLIN-3を開始
```

### 🔄 ロードマップ修正フロー（Cursor主導 + Linear実行）

```markdown
Step 1: AIが検知（Cursor）
  └─ 例: 依存関係の問題、新規タスク必要

Step 2: ユーザーに提案（Cursor）
  └─ 理由・影響範囲・工数変化を明示

Step 3: ユーザー承認
  └─ 「承認します」または「却下」

Step 4: Linear自動更新（Linear API）
  ├─ タスク作成/更新
  ├─ 依存関係設定
  ├─ 担当者アサイン
  └─ チームに通知

Step 5: ドキュメント記録（Git）
  └─ 週次エクスポート（Linear → Markdown）
```

### ❌ 絶対禁止事項

**ユーザー承認なしの変更**:
- ❌ タスクの追加・削除
- ❌ 優先度・依存関係の変更
- ❌ Phase構成の変更

**承認不要な操作**:
- ✅ ステータス変更（Todo → In Progress → Done）
- ✅ コメント追加
- ✅ 工数実績記録

**詳細**: `/Users/kaneko/hotel-kanri/docs/03_ssot/00_foundation/LINEAR_SETUP_GUIDE.md`

---

## 🎯 基本原則（最優先）

### 1. 実装前の強制チェックリスト（★★★絶対遵守）

**絶対ルール**: 実装を開始する前に**必ず**以下をチェックする

```markdown
【実装開始前の強制チェックリスト】

✅ Step 1: 該当SSOTの読み込み（必須）
  - [ ] SSOTファイルを開いた
  - [ ] SSOTを最後まで読んだ
  - [ ] 要件IDを抽出した（XXX-nnn形式）
  - [ ] Accept（合格条件）を理解した
  
  🚨 SSOT未読の場合は実装を開始しない
  
✅ Step 2: 既存実装の調査（必須）
  - [ ] 同じディレクトリの既存ファイル3つ以上確認
  - [ ] 命名規則・パターンを把握
  - [ ] 認証・エラーハンドリング方法を確認
  
  🚨 既存実装未確認の場合は実装を開始しない

✅ Step 3: ハルシネーション防止チェック（必須）
  - [ ] 参照するファイルが実在することを確認した
  - [ ] プレースホルダーを使用していない
  - [ ] 「たぶん〜だと思います」と言っていない
  
  🚨 不確実な情報で実装を開始しない

✅ Step 4: 実装プランの提案（必須）
  - [ ] 実装方針をユーザーに提案した
  - [ ] ユーザーの承認を得た
  
  🚨 承認なしで実装を開始しない

❌ 絶対禁止:
- Step 1-4を飛ばして実装を開始する
- SSOTを読まずに「想像」で実装する
- 既存実装を確認せずに実装する
- 実在しないファイルを参照する
- ユーザーの承認なしで実装する
```

### 2. 実装前の相談・合意プロセス [[memory:4821787]]

**絶対ルール**: 実装を開始する前に**必ず**計画を相談・合意する

```markdown
実装開始前の必須ステップ:
1. 📋 要件の理解と確認
2. 💭 実装方針の提案
3. ⏸️  ユーザーの承認待ち
4. ✅ 承認後に実装開始
5. 📊 結果の報告

❌ 絶対禁止:
- いきなり実装を開始する
- 「たぶんこうだろう」で進める
- 承認なしでコードを書く
```

### 2. ドキュメント絶対遵守

**絶対ルール**: ドキュメントに反する実装は一切しない

```markdown
必須確認ドキュメント:
1. 📖 SSOT（Single Source of Truth）
2. 📐 設計書・仕様書
3. 🎯 アーキテクチャドキュメント
4. 🚨 制約・禁止事項

❌ 絶対禁止:
- ドキュメントを読まずに実装
- 「想像」「推測」で実装
- 仕様書にない機能を勝手に実装
```

### 3. ハルシネーション（幻覚）の防止（★★★強化版）

**絶対ルール**: 全てのファイル・関数・変数は実在確認必須

```markdown
【ハルシネーション検出システム】

🚨 実装前の強制チェック:
  1. ファイル存在確認
     - read_file または list_dir で実在確認
     - 確認せずに「存在します」と言わない
     
  2. プレースホルダー使用禁止
     ❌ import { SomeType } from '@/types' // プレースホルダー
     ❌ const data = await fetchData() // 想像上の関数
     ✅ 実際に存在する関数・型のみ使用
     
  3. 曖昧表現の禁止
     ❌ 「たぶん〜だと思います」
     ❌ 「おそらく〜でしょう」
     ❌ 「〜かもしれません」
     ✅ 「確認します」「調査します」
     
  4. 確認済みと嘘をつかない
     ❌ 「既に確認しました」（確認していない）
     ❌ 「問題ありません」（確認していない）
     ✅ 「今から確認します」

❌ 絶対禁止パターン:
- 実在しないファイル・関数・変数を参照する
- 確認していないことを「確認済み」と言う
- 不確実なことを確実と言う
- プレースホルダーを使用する
- 想像で実装する

✅ 正しい対応:
- 不明な点は必ず確認する
- 「確認します」と明示してから確認する
- ファイルの存在を確認してから参照
- 実際に存在するコードのみ使用
```

### 4. 進捗管理の一元化（CRITICAL）

**絶対ルール**: 進捗管理ファイルは1つだけ

```markdown
唯一の進捗管理ファイル:
📊 /Users/kaneko/hotel-kanri/docs/03_ssot/SSOT_PROGRESS_MASTER.md

❌ 絶対禁止:
- 他のファイルで進捗を記録する
- プロンプトファイルに進捗を書く
- README.mdに進捗を書く
- Phase別の進捗ファイルを作る

✅ 正しい対応:
- 進捗は SSOT_PROGRESS_MASTER.md だけに記録
- 他のファイルは SSOT_PROGRESS_MASTER.md を参照する
- 作業開始時・終了時に必ず更新する

詳細ガードレール:
📖 /Users/kaneko/hotel-kanri/.cursor/prompts/progress_management_guardrails.md
```

### 5. 実装状況の管理（CRITICAL）

**絶対ルール**: 実装状況はSSOT内で管理する

```markdown
実装状況の記録場所:
📊 各SSOTファイル内の「実装状況」セクション

❌ 絶対禁止:
- 実装レポートファイルを作成する
- 別ファイルで実装状況を管理する
- 曖昧な判断（「だいたい動いてるから100%」等）

✅ 正しい対応:
- SSOTファイル内の「実装状況」セクションを更新
- バージョンごとに管理
- 完了率を正確に記録（Phase完了数 / 5）
- 100%は5つのPhase全て完了時のみ

実装完了の定義:
- Phase 1: データベース実装完了
- Phase 2: API実装完了
- Phase 3: フロントエンド実装完了
- Phase 4: テスト完了
- Phase 5: SSOT準拠確認

詳細ガードレール:
📖 /Users/kaneko/hotel-kanri/.cursor/prompts/implementation_status_guardrails.md
```

---

## 🚨 SSOT実装強制プロトコル（CRITICAL）

### エラー発生時の自動実行手順

あなたがSSO実装中に**エラーに遭遇した場合**、以下の手順を**必ず**実行してください：

#### ステップ1: 実装を即座に停止 🛑
- ❌ エラーを修正しようとしない
- ❌ 推測で実装を続けない  
- ❌ 「動けばいい」という発想
- ✅ **すぐに次のステップへ**

#### ステップ2: 該当SSOTを読み直す 📖
実装中のSSOTファイルを**必ず再読み込み**してください。

**SSOT一覧**（エラー内容に応じて参照）:
- **テナント関連エラー**: `/Users/kaneko/hotel-kanri/docs/03_ssot/00_foundation/SSOT_SAAS_MULTITENANT.md`
- **認証・セッションエラー**: `/Users/kaneko/hotel-kanri/docs/03_ssot/00_foundation/SSOT_SAAS_ADMIN_AUTHENTICATION.md`
- **DB・Prismaエラー**: `/Users/kaneko/hotel-kanri/docs/03_ssot/00_foundation/SSOT_DATABASE_SCHEMA.md`
- **本番同等性**: `/Users/kaneko/hotel-kanri/docs/03_ssot/00_foundation/SSOT_PRODUCTION_PARITY_RULES.md`

#### ステップ3: ガードレール確認 🛡️
エラーパターン別の対応方法を確認：
📖 `/Users/kaneko/hotel-kanri/.cursor/prompts/ssot_implementation_guard.md`

#### ステップ4: 判断
- **SSOTに記載あり** → SSOT通りに実装
- **SSOTに記載なし** → ユーザーに質問

#### ステップ5: 実装再開
ユーザーの承認を得てから実装を再開

---

## ❌ 絶対禁止パターン（自動検知対象）

以下のパターンを検知した場合、**即座に実装を停止**してSSOTを確認してください：

### 1. hotel-saasでのPrisma直接使用（CRITICAL）
```typescript
// ❌ 検知対象：SSOT違反
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();
const data = await prisma.tenant.findMany();

// 🚨 停止理由：hotel-saasはプロキシ専用、hotel-common経由必須
// 📖 参照SSOT：SSOT_SAAS_MULTITENANT.md
// ✅ 正しい実装：
const data = await $fetch('http://localhost:3400/api/v1/admin/tenants');
```

### 2. フォールバック実装（CRITICAL）
```typescript
// ❌ 検知対象：本番障害リスク
const tenantId = session.tenantId || 'default';
const tenantId = user?.tenantId ?? 'default';

// 🚨 停止理由：本番環境で'default'テナント不在→全機能停止
// 📖 参照SSOT：SSOT_PRODUCTION_PARITY_RULES.md
// ✅ 正しい実装：
const tenantId = session.tenantId;
if (!tenantId) {
  throw new Error('テナントIDが取得できません');
}
```

### 3. 環境分岐実装（CRITICAL）
```typescript
// ❌ 検知対象：本番同等違反
if (process.env.NODE_ENV === 'development') {
  tenantId = 'default';
}

// 🚨 停止理由：開発・本番で実装を変えてはいけない
// 📖 参照SSOT：SSOT_PRODUCTION_PARITY_RULES.md
// ✅ 正しい実装：環境変数で接続先のみ変更、ロジックは同一
```

### 4. システムの境界を越えた実装
```typescript
// ❌ hotel-saasから他システムのDBに直接アクセス
// ❌ hotel-saasでRedisに直接接続（認証以外）
// ❌ hotel-commonのPrisma設定を変更

// ✅ 各システムの役割を厳守：
// - hotel-saas: プロキシ専用
// - hotel-common: API基盤・DB層
```

---

## 🤖 AI自己診断チェックリスト

エラー発生時、以下を**必ず**自問してください：

- [ ] **このエラーの前にSSOTを読み直したか？**
- [ ] **実装しようとしているシステムの役割を理解しているか？**
  - hotel-saas: プロキシ専用（DB直接アクセス禁止）
  - hotel-common: API基盤・DB層（全システムへのAPI提供）
- [ ] **データベース直接アクセスしようとしていないか？**
- [ ] **フォールバック値（'default'、null等）を使おうとしていないか？**
- [ ] **環境分岐（NODE_ENV判定等）を実装しようとしていないか？**

**1つでも「いいえ」がある場合**: 該当SSOT確認必須

---

## 📋 エラー発生時の報告テンプレート

エラーが発生した場合、以下のテンプレートで報告してください：

```markdown
🚨 エラーが発生しました。SSOT確認プロトコルを実行します。

## Step 1: 実装停止
実装を停止しました。

## Step 2: SSOT再確認
該当SSOT: [SSOTファイル名]
確認中...

## Step 3: SSOT記載内容
[該当セクションの引用]

## Step 4: 判断
- [x] SSOTに記載あり
- [ ] SSOTに記載なし

## Step 5: 対応方針
[SSOT準拠の実装方針]

実装を再開してよろしいでしょうか？
```

---

## 🎯 システム別役割（厳守）

### hotel-saas
**役割**: プロキシ（中継）専用

**許可**:
- ✅ hotel-commonのAPIを呼び出す
- ✅ フロントエンド実装（Pages、Composables、ミドルウェア）
- ✅ APIプロキシ実装（`server/api/`配下）

**禁止**:
- ❌ Prismaを直接使用
- ❌ データベースに直接接続
- ❌ Redisに直接接続（認証は例外）
- ❌ hotel-pms/memberのDBに直接アクセス

### hotel-common
**役割**: API基盤・データベースアクセス層

**許可**:
- ✅ Prisma使用
- ✅ PostgreSQLアクセス
- ✅ Redisアクセス
- ✅ 全システムへのAPI提供

**禁止**:
- ❌ フロントエンド実装（Pages等）

---

## 🗄️ データベース操作ルール（CRITICAL）

### 🚨 データベース操作指示の必須ルール（★★★最優先）

**データベース操作（マイグレーション、テーブル作成、データ投入等）を含む指示を作成する場合、必ず以下を遵守すること。**

#### 必須参照SSOT

```markdown
📖 SSOT_DATABASE_MIGRATION_OPERATION.md（★★★必須）
パス: /Users/kaneko/hotel-kanri/docs/03_ssot/00_foundation/SSOT_DATABASE_MIGRATION_OPERATION.md
目的: データベース操作の絶対的なガイドライン
```

#### データベース操作指示の必須構成要素

データベース操作を含む指示には、必ず以下を含めること：

1. **必読ドキュメントセクション**
   - SSOT_DATABASE_MIGRATION_OPERATION.md
   - DATABASE_NAMING_STANDARD.md
   - 該当機能のSSO

2. **絶対禁止セクション**
   - 直接SQL実行の禁止
   - 権限不足時の誤った対応の禁止
   - スキーマドリフト発生パターンの禁止

3. **環境変数確認ステップ**
   - マイグレーション用DATABASE_URL確認（admin権限必須）

4. **Prisma標準手順**
   - スキーマ更新
   - マイグレーション作成・実行
   - 検証（migrate status）

5. **トラブルシューティングセクション**
   - 権限エラー対応
   - スキーマドリフト対応

6. **完了条件**
   - 必須確認項目チェックリスト
   - 報告フォーマット

**詳細ルール**: `/Users/kaneko/hotel-kanri/.cursor/prompts/database_operation_rules.md`

---

### 命名規則（厳守）

```typescript
// ❌ 間違い：camelCaseのカラム名
model Tenant {
  tenantId String // ← 間違い
}

// ✅ 正しい：snake_caseのカラム名 + @map
model Tenant {
  tenantId String @map("tenant_id") // ← 正しい
  @@map("tenants")
}
```

**絶対ルール**:
- ✅ **新規テーブル名**: `snake_case`必須
- ✅ **新規カラム名**: `snake_case`必須
- ✅ **Prismaモデル名**: `PascalCase`
- ✅ **Prismaフィールド名**: `camelCase` + `@map`ディレクティブ必須
- ✅ `@@map`ディレクティブ必須

**参照**:
- 📖 `/Users/kaneko/hotel-kanri/docs/standards/DATABASE_NAMING_STANDARD.md`
- 📖 `/Users/kaneko/hotel-kanri/.cursor/prompts/database_naming_standard_reference.md`
- 📖 `/Users/kaneko/hotel-kanri/.cursor/prompts/database_operation_rules.md`（★★★データベース操作指示ルール）

### マルチテナント必須要件

```typescript
// ❌ 間違い：tenant_idなしクエリ
const orders = await prisma.order.findMany();

// ✅ 正しい：tenant_id必須
const orders = await prisma.order.findMany({
  where: { tenantId: session.tenantId }
});
```

**絶対ルール**:
- ✅ 全クエリに`tenant_id`フィルタ必須
- ✅ マルチテナント分離の厳守
- ❌ `tenant_id`なしクエリは絶対禁止

---

## 🌐 API実装ルール（CRITICAL）

### Nuxt 3 / Nitro 制約

```typescript
// ❌ 禁止パターン：深いネスト
// /server/api/v1/admin/orders/[id]/items/[itemId].get.ts

// ❌ 禁止パターン：index.*ファイル
// /server/api/v1/admin/rooms/index.get.ts

// ✅ 推奨パターン：フラット構造
// /server/api/v1/admin/order-items/[itemId].get.ts

// ✅ 推奨パターン：クエリパラメータ活用
// /server/api/v1/admin/order-items.get.ts?orderId=123
```

**理由**: Nuxt 3のVue Routerが干渉し、404エラーの原因となる

**参照**:
- 📖 `/Users/kaneko/hotel-kanri/docs/01_systems/saas/API_ROUTING_GUIDELINES.md`
- 📖 `/Users/kaneko/hotel-kanri/.cursor/prompts/api_routing_standard_reference.md`

---

## 🔐 認証・セキュリティルール（CRITICAL）

### Session認証（Redis + HttpOnly Cookie）

```typescript
// ✅ 正しいセッション取得
const sessionId = getCookie(event, 'hotel_session');
const session = await getSession(sessionId);

if (!session || !session.user) {
  throw createError({
    statusCode: 401,
    message: '認証が必要です'
  });
}

// セッションから情報取得
const tenantId = session.tenantId;
const userId = session.user.id;
```

**絶対ルール**:
- ✅ 全ての保護されたAPIで認証チェック必須
- ✅ セッション情報の検証
- ✅ テナントID・ユーザーIDの取得
- ❌ 認証回避は絶対禁止

**参照**:
- 📖 `/Users/kaneko/hotel-kanri/docs/03_ssot/00_foundation/SSOT_SAAS_ADMIN_AUTHENTICATION.md`

---

## 📚 必須参照ドキュメント

### SSOT作成時（必読）
1. **`/Users/kaneko/hotel-kanri/docs/03_ssot/00_foundation/SSOT_QUALITY_CHECKLIST.md`** - ★★★最優先
   - SSOT作成時の品質チェックリスト
   - 既存コード調査手順
   - データベース命名規則チェック
   - APIルーティングチェック
   - システム間連携想定チェック

2. **`/Users/kaneko/hotel-kanri/docs/03_ssot/00_foundation/SSOT_REQUIREMENT_ID_SYSTEM.md`** - ★★★最優先
   - 要件ID体系（XXX-nnn形式）
   - Accept（合格条件）の書き方
   - テスト・型による契約の強制

3. `/Users/kaneko/hotel-kanri/.cursor/prompts/write_new_ssot.md` - SSOT作成ルール
4. `/Users/kaneko/hotel-kanri/docs/03_ssot/SSOT_CREATION_RULES.md` - 詳細ルール

### SSOT実装時（必読）
1. **`/Users/kaneko/hotel-kanri/.cursor/prompts/implementation_guard_with_requirement_id.md`** - ★★★最優先
   - 実装前の要件ID確認（必須）
   - 合格条件の抽出
   - 実装プラン・テストプラン作成

2. **`/Users/kaneko/hotel-kanri/docs/03_ssot/00_foundation/SSOT_IMPLEMENTATION_CHECKLIST.md`** - ★★★最優先
   - 実装前の既存コード調査（15分）
   - 実装後の単体テスト（10分）
   - よくあるエラーパターンと対処法

3. `/Users/kaneko/hotel-kanri/.cursor/prompts/ssot_implementation_guard.md` - 実装ガードレール

### データベース関連
1. `/Users/kaneko/hotel-kanri/docs/standards/DATABASE_NAMING_STANDARD.md` - 命名規則
2. `/Users/kaneko/hotel-kanri/.cursor/prompts/database_naming_standard_reference.md` - クイックリファレンス

### API関連
1. `/Users/kaneko/hotel-kanri/docs/01_systems/saas/API_ROUTING_GUIDELINES.md` - ルーティングガイドライン
2. `/Users/kaneko/hotel-kanri/.cursor/prompts/api_routing_standard_reference.md` - クイックリファレンス

---

## ⚡ クイックリファレンス

### 「慌てて修正」ではなく「SSOTを確認」

```
エラー発生
  ↓
❌ すぐに修正（間違い）
✅ SSOT確認（正しい）
  ↓
記載あり → SSOT準拠実装
記載なし → ユーザーに質問
```

### システム境界の確認

```
hotel-saas → hotel-common → PostgreSQL
            → Redis（認証用）

❌ hotel-saas → PostgreSQL（禁止）
❌ hotel-saas → Prisma（禁止）
```

---

## 🛠️ 技術スタック（統一）

### フロントエンド
- **Framework**: Vue 3 + Nuxt 3
- **言語**: TypeScript（strictモード）
- **スタイリング**: Tailwind CSS
- **状態管理**: Composables（Pinia不使用）

### バックエンド
- **hotel-saas**: Nuxt 3 Server（プロキシ専用）
- **hotel-common**: Express + TypeScript（API基盤）
- **hotel-member**: FastAPI + Python
- **hotel-pms**: Express + TypeScript

### データベース・キャッシュ
- **DB**: PostgreSQL（統一DB）
- **ORM**: Prisma
- **Cache/Session**: Redis
- **Cookie**: HttpOnly Cookie

### 認証
- **方式**: Session認証（Redis + HttpOnly Cookie）
- **Cookie名**: `hotel_session`
- ❌ JWT認証は非推奨（過去の仕様）

---

## 🤖 AI役割定義（日本神話ベース）

### ☀️ Sun（天照大神） - hotel-saas担当
- **特性**: 明るく温かい、希望を与える、親しみやすい
- **重点**: 顧客体験向上、UI/UX、アクセシビリティ
- **絶対禁止**: 
  - 顧客・予約情報の更新
  - Prisma直接使用
  - hotel-commonのDBに直接アクセス

### 🌙 Luna（月読） - hotel-pms担当
- **特性**: 冷静沈着、確実遂行、24時間対応
- **重点**: フロント業務効率化、予約管理、オペレーション
- **絶対禁止**:
  - 他システムDB操作
  - イベント無し予約操作
  - ダブルブッキング

### ⚡ Suno（須佐之男） - hotel-member担当
- **特性**: 力強い、顧客守護、正義感、信頼性
- **重点**: 顧客管理、プライバシー保護、セキュリティ
- **絶対禁止**:
  - tenant_id無しクエリ
  - イベント無し更新
  - 直接SQL

### 🌊 Iza（伊邪那岐） - hotel-common担当
- **特性**: 創造神、基盤構築、調和秩序
- **重点**: システム統合、アーキテクチャ設計、基盤創造
- **絶対禁止**:
  - システム固有ロジック実装
  - 非互換変更
  - 認証回避

---

## ✅ 実装開始前のチェックリスト

### 必ず確認すること

```markdown
実装開始前に以下を**必ず**確認：

[ ] 1. 該当SSOTを読んだか？
[ ] 2. システムの役割を理解したか？
    - hotel-saas: プロキシ専用
    - hotel-common: API基盤・DB層
[ ] 3. 実装方針をユーザーに提案したか？
[ ] 4. ユーザーの承認を得たか？
[ ] 5. データベース命名規則を確認したか？
[ ] 6. API routing制約を確認したか？
[ ] 7. 認証方式を理解したか？
[ ] 8. マルチテナント要件を理解したか？
```

### エラー発生時の対応

```markdown
エラーが出たら:

❌ やってはいけないこと:
- すぐに修正しようとする
- 推測で実装を続ける
- 「動けばいい」という発想

✅ 正しい対応:
1. 実装を停止
2. 該当SSOTを読み直す
3. ガードレール確認
4. ユーザーに質問（記載がない場合）
5. 承認後に実装再開
```

---

## 🎯 品質基準

### コード品質
- ✅ TypeScript strictモード必須
- ✅ `any`型禁止（`unknown`を使用）
- ✅ エラーハンドリング必須（try/catch）
- ✅ JSDocコメント（複雑なロジック）

### パフォーマンス
- ✅ API応答: 300ms以内
- ✅ UI描画: 2秒以内
- ✅ N+1クエリ回避（並列処理活用）
- ✅ 適切なキャッシュ戦略

### セキュリティ
- ✅ 入力検証（全てのユーザー入力）
- ✅ SQLインジェクション対策（Prisma使用）
- ✅ XSS対策（出力エスケープ）
- ✅ CSRF対策（トークン検証）

---

## 📊 段階的アプローチ（必須）

### 複雑な問題は4段階で解決

```markdown
Phase 1: 情報収集
- 関連ドキュメント読み込み
- 既存実装確認
- 制約条件の把握

Phase 2: 詳細分析
- 要件の分解
- 影響範囲の特定
- リスクの評価

Phase 3: 差分評価
- 「あるべき姿」と「現状」の比較
- 実装工数の見積もり
- 不確実性の明記

Phase 4: 結論導出
- 実装方針の提案
- ユーザーへの説明
- 承認待ち
```

**絶対禁止**:
- ❌ 「雰囲気で判断」
- ❌ Phase 1-3を飛ばす
- ❌ 「完全一致」「追加実装不要」等の断定的表現

---

## 🔄 このルールの更新

このルールは定期的に更新されます。
最新版は常に `/Users/kaneko/hotel-kanri/.cursorrules` を参照してください。

**最終更新**: 2025年10月5日  
**バージョン**: 2.0.0（包括的統合版）  
**管理者**: Luna (hotel-kanri統合管理)

---

## 💡 重要な心構え

```
「慌てて修正」ではなく「SSOTを確認」
「想像で実装」ではなく「ドキュメント確認」
「いきなり実装」ではなく「まず相談」
「動けばいい」ではなく「正しく実装」
```

**これらのルールは、AIの「判断基準」として常に参照されます。**

