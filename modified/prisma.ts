// Prisma„ÅÆÂàùÊúüÂåñ„Å®„Ç®„ÇØ„Çπ„Éù„Éº„Éà
import { PrismaClient } from '@prisma/client'
import path from 'path'

// Áµ∂ÂØæ„Éë„Çπ„Åß„Éá„Éº„Çø„Éô„Éº„ÇπURL„ÇíÊßãÁØâ
const dbPath = path.resolve(process.cwd(), 'prisma', 'dev.db')
console.log(`üîó „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Éë„Çπ: ${dbPath}`)

// Prisma„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆ„Ç§„É≥„Çπ„Çø„É≥„Çπ
const prisma = new PrismaClient({
  log: ['query', 'info', 'warn', 'error'],
  datasources: {
    db: {
      url: `file:${dbPath}`
    }
  }
})

// findMany„É°„ÇΩ„ÉÉ„Éâ„ÅåÂÆüË£Ö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅÆ„Ç®„É©„Éº„ÇíËß£Ê±∫„Åô„Çã„Åü„ÇÅ„ÅÆÊã°Âºµ
if (!prisma.deviceRoom.findMany) {
  console.warn('„Éá„Éê„Ç§„Çπ‰∏ÄË¶ßÂèñÂæóÊ©üËÉΩ„ÅÆ„É¢„ÉÉ„ÇØÂÆüË£Ö„ÇíËøΩÂä†„Åó„Åæ„Åô')
  
  // „É¢„ÉÉ„ÇØ„Éá„Éº„Çø
  const mockDevices = [
    {
      id: 1,
      roomId: '101',
      ipAddress: '127.0.0.1',
      macAddress: '11:22:33:44:55:66',
      deviceName: 'Room 101 Tablet',
      isActive: true,
      lastUsedAt: new Date(),
      createdAt: new Date(),
      updatedAt: new Date(),
      deviceType: 'tablet'
    },
    {
      id: 2,
      roomId: '102',
      ipAddress: '192.168.1.2',
      macAddress: 'aa:bb:cc:dd:ee:ff',
      deviceName: 'Room 102 Tablet',
      isActive: true,
      lastUsedAt: new Date(),
      createdAt: new Date(),
      updatedAt: new Date(),
      deviceType: 'tablet'
    },
    {
      id: 3,
      roomId: '103',
      ipAddress: '192.168.1.3',
      macAddress: '50:a6:d8:e1:14:44',
      deviceName: 'Room 103 Tablet',
      isActive: false,
      lastUsedAt: new Date(),
      createdAt: new Date(),
      updatedAt: new Date(),
      deviceType: 'tablet'
    }
  ]
  
  // Prisma„ÅÆ„Éá„Éê„Ç§„Çπ‰∏ÄË¶ßÊ©üËÉΩ„ÇíÊã°Âºµ
  Object.assign(prisma.deviceRoom, {
    findUnique: async (params: any) => {
      console.log('„É¢„ÉÉ„ÇØfindUniqueÂëº„Å≥Âá∫„Åó:', params)
      
      if (params?.where?.id) {
        const device = mockDevices.find(device => device.id === params.where.id)
        return device || null
      }
      
      if (params?.where?.macAddress) {
        const device = mockDevices.find(device => device.macAddress === params.where.macAddress)
        return device || null
      }
      
      return null
    },
    
    findFirst: async (params: any) => {
      console.log('„É¢„ÉÉ„ÇØfindFirstÂëº„Å≥Âá∫„Åó:', params)
      
      let result = null
      
      // whereÊù°‰ª∂„ÅÆ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
      if (params?.where) {
        // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Çπ„ÉÜ„Éº„Çø„Çπ„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        let filtered = [...mockDevices]
        
        if (typeof params.where.isActive === 'boolean') {
          filtered = filtered.filter(device => device.isActive === params.where.isActive)
        }
        
        // ORÊù°‰ª∂„Åß„ÅÆ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        if (params.where.OR) {
          result = filtered.find(device => {
            return params.where.OR.some((condition: any) => {
              if (condition.ipAddress && device.ipAddress === condition.ipAddress) {
                return true
              }
              if (condition.macAddress && device.macAddress === condition.macAddress) {
                return true
              }
              return false
            })
          }) || null
        }
      }
      
      return result
    },
    
    findMany: async (params: any) => {
      console.log('„É¢„ÉÉ„ÇØfindManyÂëº„Å≥Âá∫„Åó:', params)
      
      let result = [...mockDevices]
      
      // whereÊù°‰ª∂„ÅÆ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
      if (params?.where) {
        // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Çπ„ÉÜ„Éº„Çø„Çπ„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        if (typeof params.where.isActive === 'boolean') {
          result = result.filter(device => device.isActive === params.where.isActive)
        }
        
        // ORÊù°‰ª∂„Åß„ÅÆ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        if (params.where.OR) {
          result = result.filter(device => {
            return params.where.OR.some((condition: any) => {
              if (condition.deviceName?.contains) {
                return device.deviceName.includes(condition.deviceName.contains)
              }
              if (condition.roomId?.contains) {
                return device.roomId.includes(condition.roomId.contains)
              }
              return false
            })
          })
        }
      }
      
      // „ÇΩ„Éº„Éà
      if (params?.orderBy?.createdAt === 'desc') {
        result.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime())
      }
      
      // „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥
      if (params?.skip) {
        result = result.slice(params.skip)
      }
      
      if (params?.take) {
        result = result.slice(0, params.take)
      }
      
      return result
    },
    
    count: async (params: any) => {
      console.log('„É¢„ÉÉ„ÇØcountÂëº„Å≥Âá∫„Åó:', params)
      
      let count = mockDevices.length
      
      // whereÊù°‰ª∂„Åß„ÅÆ„Ç´„Ç¶„É≥„Éà
      if (params?.where) {
        let filtered = [...mockDevices]
        
        // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Çπ„ÉÜ„Éº„Çø„Çπ„Åß„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        if (typeof params.where.isActive === 'boolean') {
          filtered = filtered.filter(device => device.isActive === params.where.isActive)
        }
        
        // ORÊù°‰ª∂„Åß„ÅÆ„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        if (params.where.OR) {
          filtered = filtered.filter(device => {
            return params.where.OR.some((condition: any) => {
              if (condition.deviceName?.contains) {
                return device.deviceName.includes(condition.deviceName.contains)
              }
              if (condition.roomId?.contains) {
                return device.roomId.includes(condition.roomId.contains)
              }
              return false
            })
          })
        }
        
        count = filtered.length
      }
      
      return count
    },
    
    update: async (params: any) => {
      console.log('„É¢„ÉÉ„ÇØupdateÂëº„Å≥Âá∫„Åó:', params)
      
      const { where, data } = params
      const deviceIndex = mockDevices.findIndex(d => d.id === where.id)
      
      if (deviceIndex === -1) return null
      
      // „Éá„Éê„Ç§„ÇπÊÉÖÂ†±„ÇíÊõ¥Êñ∞
      const updatedDevice = { ...mockDevices[deviceIndex], ...data, updatedAt: new Date() }
      mockDevices[deviceIndex] = updatedDevice
      
      return updatedDevice
    }
  })
  
  // „Éá„Éê„Ç§„Çπ„Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞„ÅÆ„É¢„ÉÉ„ÇØ
  if (!prisma.deviceAccessLog.create) {
    Object.assign(prisma.deviceAccessLog, {
      create: async (params: any) => {
        console.log('„É¢„ÉÉ„ÇØ„Ç¢„ÇØ„Çª„Çπ„É≠„Ç∞‰ΩúÊàê:', params.data)
        return { 
          id: Math.floor(Math.random() * 1000), 
          accessTime: new Date(),
          ...params.data 
        }
      }
    })
  }
}

export default prisma
export { prisma }
