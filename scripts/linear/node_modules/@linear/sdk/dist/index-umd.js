(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('crypto')) :
    typeof define === 'function' && define.amd ? define(['exports', 'crypto'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Linear = {}, global.crypto));
})(this, (function (exports, crypto) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var crypto__default = /*#__PURE__*/_interopDefaultLegacy(crypto);

    (function() {
        const env = {"npm_package_name":"@linear/sdk","npm_package_version":"30.0.0"};
        try {
            if (process) {
                process.env = Object.assign({}, process.env);
                Object.assign(process.env, env);
                return;
            }
        } catch (e) {} // avoid ReferenceError: process is not defined
        globalThis.process = { env:env };
    })();

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    /**
     * The error types returned by the Linear API
     */
    exports.LinearErrorType = void 0;
    (function (LinearErrorType) {
        LinearErrorType["FeatureNotAccessible"] = "FeatureNotAccessible";
        LinearErrorType["InvalidInput"] = "InvalidInput";
        LinearErrorType["Ratelimited"] = "Ratelimited";
        LinearErrorType["NetworkError"] = "NetworkError";
        LinearErrorType["AuthenticationError"] = "AuthenticationError";
        LinearErrorType["Forbidden"] = "Forbidden";
        LinearErrorType["BootstrapError"] = "BootstrapError";
        LinearErrorType["Unknown"] = "Unknown";
        LinearErrorType["InternalError"] = "InternalError";
        LinearErrorType["Other"] = "Other";
        LinearErrorType["UserError"] = "UserError";
        LinearErrorType["GraphqlError"] = "GraphqlError";
        LinearErrorType["LockTimeout"] = "LockTimeout";
    })(exports.LinearErrorType || (exports.LinearErrorType = {}));

    /**
     * Serialize an object into an encoded user agent string
     *
     * @param seed user agent properties to serialize
     * @returns the serialized user agent string
     */
    function serializeUserAgent(seed) {
        return Object.entries(seed).reduce((acc, [key, value]) => {
            const encoded = `${key}@${encodeURIComponent(value)}`;
            return acc ? `${acc} ${encoded}` : encoded;
        }, "");
    }
    /**
     * Capitalize the first character of a string
     *
     * @param str the string to capitalize
     */
    function capitalize(str) {
        return str ? `${str.charAt(0).toUpperCase()}${str.slice(1)}` : undefined;
    }
    /**
     * Type safe check for non defined values
     */
    function nonNullable(value) {
        return value !== null && value !== undefined;
    }
    /**
     * Return the key matching the value in an object
     */
    function getKeyByValue(obj, value) {
        const keys = Object.keys(obj);
        return keys.find(key => obj[key] === value);
    }

    /**
     * A map between the Linear API string type and the LinearErrorType enum
     */
    const errorMap = {
        [exports.LinearErrorType.FeatureNotAccessible]: "feature not accessible",
        [exports.LinearErrorType.InvalidInput]: "invalid input",
        [exports.LinearErrorType.Ratelimited]: "ratelimited",
        [exports.LinearErrorType.NetworkError]: "network error",
        [exports.LinearErrorType.AuthenticationError]: "authentication error",
        [exports.LinearErrorType.Forbidden]: "forbidden",
        [exports.LinearErrorType.BootstrapError]: "bootstrap error",
        [exports.LinearErrorType.Unknown]: "unknown",
        [exports.LinearErrorType.InternalError]: "internal error",
        [exports.LinearErrorType.Other]: "other",
        [exports.LinearErrorType.UserError]: "user error",
        [exports.LinearErrorType.GraphqlError]: "graphql error",
        [exports.LinearErrorType.LockTimeout]: "lock timeout",
    };
    /**
     * Match the error type or return unknown
     */
    function getErrorType(type) {
        var _a;
        return (_a = getKeyByValue(errorMap, type)) !== null && _a !== void 0 ? _a : exports.LinearErrorType.Unknown;
    }
    /**
     * The error shown if no other message is available
     */
    const defaultError = "Unknown error from LinearClient";
    /**
     * One of potentially many graphql errors returned by the Linear API
     *
     * @error the raw graphql error returned on the error response
     */
    class LinearGraphQLError {
        constructor(error) {
            var _a, _b, _c, _d, _e, _f, _g;
            this.type = getErrorType((_a = error === null || error === void 0 ? void 0 : error.extensions) === null || _a === void 0 ? void 0 : _a.type);
            this.userError = (_b = error === null || error === void 0 ? void 0 : error.extensions) === null || _b === void 0 ? void 0 : _b.userError;
            this.path = error === null || error === void 0 ? void 0 : error.path;
            /** Select most readable message */
            this.message =
                (_g = (_e = (_d = (_c = error === null || error === void 0 ? void 0 : error.extensions) === null || _c === void 0 ? void 0 : _c.userPresentableMessage) !== null && _d !== void 0 ? _d : error === null || error === void 0 ? void 0 : error.message) !== null && _e !== void 0 ? _e : (_f = error === null || error === void 0 ? void 0 : error.extensions) === null || _f === void 0 ? void 0 : _f.type) !== null && _g !== void 0 ? _g : defaultError;
        }
    }
    /**
     * An error from the Linear API
     *
     * @param error a raw error returned from the LinearGraphQLClient
     */
    class LinearError extends Error {
        constructor(error, errors, type) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            /** Find messages, duplicate and join, or default */
            super((_e = Array.from(new Set([capitalize((_b = (_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.split(": {")) === null || _b === void 0 ? void 0 : _b[0]), (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.error, (_d = errors === null || errors === void 0 ? void 0 : errors[0]) === null || _d === void 0 ? void 0 : _d.message].filter(nonNullable)))
                .filter(nonNullable)
                .join(" - ")) !== null && _e !== void 0 ? _e : defaultError);
            this.type = type;
            /** Set error properties */
            this.errors = errors;
            this.query = (_f = error === null || error === void 0 ? void 0 : error.request) === null || _f === void 0 ? void 0 : _f.query;
            this.variables = (_g = error === null || error === void 0 ? void 0 : error.request) === null || _g === void 0 ? void 0 : _g.variables;
            this.status = (_h = error === null || error === void 0 ? void 0 : error.response) === null || _h === void 0 ? void 0 : _h.status;
            this.data = (_j = error === null || error === void 0 ? void 0 : error.response) === null || _j === void 0 ? void 0 : _j.data;
            this.raw = error;
        }
    }
    class FeatureNotAccessibleLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.FeatureNotAccessible);
        }
    }
    class InvalidInputLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.InvalidInput);
        }
    }
    class RatelimitedLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.Ratelimited);
        }
    }
    class NetworkLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.NetworkError);
        }
    }
    class AuthenticationLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.AuthenticationError);
        }
    }
    class ForbiddenLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.Forbidden);
        }
    }
    class BootstrapLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.BootstrapError);
        }
    }
    class UnknownLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.Unknown);
        }
    }
    class InternalLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.InternalError);
        }
    }
    class OtherLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.Other);
        }
    }
    class UserLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.UserError);
        }
    }
    class GraphqlLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.GraphqlError);
        }
    }
    class LockTimeoutLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.LockTimeout);
        }
    }
    /**
     * A map between the Linear error type and the LinearError class
     */
    const errorConstructorMap = {
        [exports.LinearErrorType.FeatureNotAccessible]: FeatureNotAccessibleLinearError,
        [exports.LinearErrorType.InvalidInput]: InvalidInputLinearError,
        [exports.LinearErrorType.Ratelimited]: RatelimitedLinearError,
        [exports.LinearErrorType.NetworkError]: NetworkLinearError,
        [exports.LinearErrorType.AuthenticationError]: AuthenticationLinearError,
        [exports.LinearErrorType.Forbidden]: ForbiddenLinearError,
        [exports.LinearErrorType.BootstrapError]: BootstrapLinearError,
        [exports.LinearErrorType.Unknown]: UnknownLinearError,
        [exports.LinearErrorType.InternalError]: InternalLinearError,
        [exports.LinearErrorType.Other]: OtherLinearError,
        [exports.LinearErrorType.UserError]: UserLinearError,
        [exports.LinearErrorType.GraphqlError]: GraphqlLinearError,
        [exports.LinearErrorType.LockTimeout]: LockTimeoutLinearError,
    };
    function parseLinearError(error) {
        var _a, _b, _c, _d, _e, _f;
        if (error instanceof LinearError) {
            return error;
        }
        /** Parse graphQL errors */
        const errors = ((_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.errors) !== null && _b !== void 0 ? _b : []).map(graphqlError => {
            return new LinearGraphQLError(graphqlError);
        });
        /** Set type based first graphql error or http status */
        const status = (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.status;
        const type = (_e = (_d = errors[0]) === null || _d === void 0 ? void 0 : _d.type) !== null && _e !== void 0 ? _e : (status === 403
            ? exports.LinearErrorType.Forbidden
            : status === 429
                ? exports.LinearErrorType.Ratelimited
                : `${status}`.startsWith("4")
                    ? exports.LinearErrorType.AuthenticationError
                    : status === 500
                        ? exports.LinearErrorType.InternalError
                        : `${status}`.startsWith("5")
                            ? exports.LinearErrorType.NetworkError
                            : exports.LinearErrorType.Unknown);
        const LinearErrorConstructor = (_f = errorConstructorMap[type]) !== null && _f !== void 0 ? _f : LinearError;
        return new LinearErrorConstructor(error, errors);
    }

    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
    var nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
    var MAX_ARRAY_LENGTH = 10;
    var MAX_RECURSIVE_DEPTH = 2;
    /**
     * Used to print values in error messages.
     */

    function inspect(value) {
      return formatValue(value, []);
    }

    function formatValue(value, seenValues) {
      switch (_typeof(value)) {
        case 'string':
          return JSON.stringify(value);

        case 'function':
          return value.name ? "[function ".concat(value.name, "]") : '[function]';

        case 'object':
          if (value === null) {
            return 'null';
          }

          return formatObjectValue(value, seenValues);

        default:
          return String(value);
      }
    }

    function formatObjectValue(value, previouslySeenValues) {
      if (previouslySeenValues.indexOf(value) !== -1) {
        return '[Circular]';
      }

      var seenValues = [].concat(previouslySeenValues, [value]);
      var customInspectFn = getCustomFn(value);

      if (customInspectFn !== undefined) {
        var customValue = customInspectFn.call(value); // check for infinite recursion

        if (customValue !== value) {
          return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);
        }
      } else if (Array.isArray(value)) {
        return formatArray(value, seenValues);
      }

      return formatObject(value, seenValues);
    }

    function formatObject(object, seenValues) {
      var keys = Object.keys(object);

      if (keys.length === 0) {
        return '{}';
      }

      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return '[' + getObjectTag(object) + ']';
      }

      var properties = keys.map(function (key) {
        var value = formatValue(object[key], seenValues);
        return key + ': ' + value;
      });
      return '{ ' + properties.join(', ') + ' }';
    }

    function formatArray(array, seenValues) {
      if (array.length === 0) {
        return '[]';
      }

      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return '[Array]';
      }

      var len = Math.min(MAX_ARRAY_LENGTH, array.length);
      var remaining = array.length - len;
      var items = [];

      for (var i = 0; i < len; ++i) {
        items.push(formatValue(array[i], seenValues));
      }

      if (remaining === 1) {
        items.push('... 1 more item');
      } else if (remaining > 1) {
        items.push("... ".concat(remaining, " more items"));
      }

      return '[' + items.join(', ') + ']';
    }

    function getCustomFn(object) {
      var customInspectFn = object[String(nodejsCustomInspectSymbol)];

      if (typeof customInspectFn === 'function') {
        return customInspectFn;
      }

      if (typeof object.inspect === 'function') {
        return object.inspect;
      }
    }

    function getObjectTag(object) {
      var tag = Object.prototype.toString.call(object).replace(/^\[object /, '').replace(/]$/, '');

      if (tag === 'Object' && typeof object.constructor === 'function') {
        var name = object.constructor.name;

        if (typeof name === 'string' && name !== '') {
          return name;
        }
      }

      return tag;
    }

    function invariant(condition, message) {
      var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

      if (!booleanCondition) {
        throw new Error(message != null ? message : 'Unexpected invariant triggered.');
      }
    }

    /**
     * The `defineInspect()` function defines `inspect()` prototype method as alias of `toJSON`
     */

    function defineInspect(classObject) {
      var fn = classObject.prototype.toJSON;
      typeof fn === 'function' || invariant(0);
      classObject.prototype.inspect = fn; // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2317')

      if (nodejsCustomInspectSymbol) {
        classObject.prototype[nodejsCustomInspectSymbol] = fn;
      }
    }

    /**
     * Contains a range of UTF-8 character offsets and token references that
     * identify the region of the source from which the AST derived.
     */
    var Location = /*#__PURE__*/function () {
      /**
       * The character offset at which this Node begins.
       */

      /**
       * The character offset at which this Node ends.
       */

      /**
       * The Token at which this Node begins.
       */

      /**
       * The Token at which this Node ends.
       */

      /**
       * The Source document the AST represents.
       */
      function Location(startToken, endToken, source) {
        this.start = startToken.start;
        this.end = endToken.end;
        this.startToken = startToken;
        this.endToken = endToken;
        this.source = source;
      }

      var _proto = Location.prototype;

      _proto.toJSON = function toJSON() {
        return {
          start: this.start,
          end: this.end
        };
      };

      return Location;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

    defineInspect(Location);
    /**
     * Represents a range of characters represented by a lexical token
     * within a Source.
     */

    var Token = /*#__PURE__*/function () {
      /**
       * The kind of Token.
       */

      /**
       * The character offset at which this Node begins.
       */

      /**
       * The character offset at which this Node ends.
       */

      /**
       * The 1-indexed line number on which this Token appears.
       */

      /**
       * The 1-indexed column number at which this Token begins.
       */

      /**
       * For non-punctuation tokens, represents the interpreted value of the token.
       */

      /**
       * Tokens exist as nodes in a double-linked-list amongst all tokens
       * including ignored tokens. <SOF> is always the first node and <EOF>
       * the last.
       */
      function Token(kind, start, end, line, column, prev, value) {
        this.kind = kind;
        this.start = start;
        this.end = end;
        this.line = line;
        this.column = column;
        this.value = value;
        this.prev = prev;
        this.next = null;
      }

      var _proto2 = Token.prototype;

      _proto2.toJSON = function toJSON() {
        return {
          kind: this.kind,
          value: this.value,
          line: this.line,
          column: this.column
        };
      };

      return Token;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

    defineInspect(Token);
    /**
     * @internal
     */

    function isNode(maybeNode) {
      return maybeNode != null && typeof maybeNode.kind === 'string';
    }
    /**
     * The list of all possible AST node types.
     */

    /**
     * A visitor is provided to visit, it contains the collection of
     * relevant functions to be called during the visitor's traversal.
     */

    var QueryDocumentKeys = {
      Name: [],
      Document: ['definitions'],
      OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],
      VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],
      Variable: ['name'],
      SelectionSet: ['selections'],
      Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
      Argument: ['name', 'value'],
      FragmentSpread: ['name', 'directives'],
      InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
      FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed
      // or removed in the future.
      'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ['values'],
      ObjectValue: ['fields'],
      ObjectField: ['name', 'value'],
      Directive: ['name', 'arguments'],
      NamedType: ['name'],
      ListType: ['type'],
      NonNullType: ['type'],
      SchemaDefinition: ['description', 'directives', 'operationTypes'],
      OperationTypeDefinition: ['type'],
      ScalarTypeDefinition: ['description', 'name', 'directives'],
      ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
      FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
      InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],
      InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
      UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
      EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
      EnumValueDefinition: ['description', 'name', 'directives'],
      InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],
      DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],
      SchemaExtension: ['directives', 'operationTypes'],
      ScalarTypeExtension: ['name', 'directives'],
      ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
      InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
      UnionTypeExtension: ['name', 'directives', 'types'],
      EnumTypeExtension: ['name', 'directives', 'values'],
      InputObjectTypeExtension: ['name', 'directives', 'fields']
    };
    var BREAK = Object.freeze({});
    /**
     * visit() will walk through an AST using a depth-first traversal, calling
     * the visitor's enter function at each node in the traversal, and calling the
     * leave function after visiting that node and all of its child nodes.
     *
     * By returning different values from the enter and leave functions, the
     * behavior of the visitor can be altered, including skipping over a sub-tree of
     * the AST (by returning false), editing the AST by returning a value or null
     * to remove the value, or to stop the whole traversal by returning BREAK.
     *
     * When using visit() to edit an AST, the original AST will not be modified, and
     * a new version of the AST with the changes applied will be returned from the
     * visit function.
     *
     *     const editedAST = visit(ast, {
     *       enter(node, key, parent, path, ancestors) {
     *         // @return
     *         //   undefined: no action
     *         //   false: skip visiting this node
     *         //   visitor.BREAK: stop visiting altogether
     *         //   null: delete this node
     *         //   any value: replace this node with the returned value
     *       },
     *       leave(node, key, parent, path, ancestors) {
     *         // @return
     *         //   undefined: no action
     *         //   false: no action
     *         //   visitor.BREAK: stop visiting altogether
     *         //   null: delete this node
     *         //   any value: replace this node with the returned value
     *       }
     *     });
     *
     * Alternatively to providing enter() and leave() functions, a visitor can
     * instead provide functions named the same as the kinds of AST nodes, or
     * enter/leave visitors at a named key, leading to four permutations of the
     * visitor API:
     *
     * 1) Named visitors triggered when entering a node of a specific kind.
     *
     *     visit(ast, {
     *       Kind(node) {
     *         // enter the "Kind" node
     *       }
     *     })
     *
     * 2) Named visitors that trigger upon entering and leaving a node of
     *    a specific kind.
     *
     *     visit(ast, {
     *       Kind: {
     *         enter(node) {
     *           // enter the "Kind" node
     *         }
     *         leave(node) {
     *           // leave the "Kind" node
     *         }
     *       }
     *     })
     *
     * 3) Generic visitors that trigger upon entering and leaving any node.
     *
     *     visit(ast, {
     *       enter(node) {
     *         // enter any node
     *       },
     *       leave(node) {
     *         // leave any node
     *       }
     *     })
     *
     * 4) Parallel visitors for entering and leaving nodes of a specific kind.
     *
     *     visit(ast, {
     *       enter: {
     *         Kind(node) {
     *           // enter the "Kind" node
     *         }
     *       },
     *       leave: {
     *         Kind(node) {
     *           // leave the "Kind" node
     *         }
     *       }
     *     })
     */

    function visit(root, visitor) {
      var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;

      /* eslint-disable no-undef-init */
      var stack = undefined;
      var inArray = Array.isArray(root);
      var keys = [root];
      var index = -1;
      var edits = [];
      var node = undefined;
      var key = undefined;
      var parent = undefined;
      var path = [];
      var ancestors = [];
      var newRoot = root;
      /* eslint-enable no-undef-init */

      do {
        index++;
        var isLeaving = index === keys.length;
        var isEdited = isLeaving && edits.length !== 0;

        if (isLeaving) {
          key = ancestors.length === 0 ? undefined : path[path.length - 1];
          node = parent;
          parent = ancestors.pop();

          if (isEdited) {
            if (inArray) {
              node = node.slice();
            } else {
              var clone = {};

              for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {
                var k = _Object$keys2[_i2];
                clone[k] = node[k];
              }

              node = clone;
            }

            var editOffset = 0;

            for (var ii = 0; ii < edits.length; ii++) {
              var editKey = edits[ii][0];
              var editValue = edits[ii][1];

              if (inArray) {
                editKey -= editOffset;
              }

              if (inArray && editValue === null) {
                node.splice(editKey, 1);
                editOffset++;
              } else {
                node[editKey] = editValue;
              }
            }
          }

          index = stack.index;
          keys = stack.keys;
          edits = stack.edits;
          inArray = stack.inArray;
          stack = stack.prev;
        } else {
          key = parent ? inArray ? index : keys[index] : undefined;
          node = parent ? parent[key] : newRoot;

          if (node === null || node === undefined) {
            continue;
          }

          if (parent) {
            path.push(key);
          }
        }

        var result = void 0;

        if (!Array.isArray(node)) {
          if (!isNode(node)) {
            throw new Error("Invalid AST Node: ".concat(inspect(node), "."));
          }

          var visitFn = getVisitFn(visitor, node.kind, isLeaving);

          if (visitFn) {
            result = visitFn.call(visitor, node, key, parent, path, ancestors);

            if (result === BREAK) {
              break;
            }

            if (result === false) {
              if (!isLeaving) {
                path.pop();
                continue;
              }
            } else if (result !== undefined) {
              edits.push([key, result]);

              if (!isLeaving) {
                if (isNode(result)) {
                  node = result;
                } else {
                  path.pop();
                  continue;
                }
              }
            }
          }
        }

        if (result === undefined && isEdited) {
          edits.push([key, node]);
        }

        if (isLeaving) {
          path.pop();
        } else {
          var _visitorKeys$node$kin;

          stack = {
            inArray: inArray,
            index: index,
            keys: keys,
            edits: edits,
            prev: stack
          };
          inArray = Array.isArray(node);
          keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];
          index = -1;
          edits = [];

          if (parent) {
            ancestors.push(parent);
          }

          parent = node;
        }
      } while (stack !== undefined);

      if (edits.length !== 0) {
        newRoot = edits[edits.length - 1][1];
      }

      return newRoot;
    }
    /**
     * Given a visitor instance, if it is leaving or not, and a node kind, return
     * the function the visitor runtime should call.
     */

    function getVisitFn(visitor, kind, isLeaving) {
      var kindVisitor = visitor[kind];

      if (kindVisitor) {
        if (!isLeaving && typeof kindVisitor === 'function') {
          // { Kind() {} }
          return kindVisitor;
        }

        var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;

        if (typeof kindSpecificVisitor === 'function') {
          // { Kind: { enter() {}, leave() {} } }
          return kindSpecificVisitor;
        }
      } else {
        var specificVisitor = isLeaving ? visitor.leave : visitor.enter;

        if (specificVisitor) {
          if (typeof specificVisitor === 'function') {
            // { enter() {}, leave() {} }
            return specificVisitor;
          }

          var specificKindVisitor = specificVisitor[kind];

          if (typeof specificKindVisitor === 'function') {
            // { enter: { Kind() {} }, leave: { Kind() {} } }
            return specificKindVisitor;
          }
        }
      }
    }

    /**
     * Print a block string in the indented block form by adding a leading and
     * trailing blank line. However, if a block string starts with whitespace and is
     * a single-line, adding a leading blank line would strip that whitespace.
     *
     * @internal
     */

    function printBlockString(value) {
      var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var isSingleLine = value.indexOf('\n') === -1;
      var hasLeadingSpace = value[0] === ' ' || value[0] === '\t';
      var hasTrailingQuote = value[value.length - 1] === '"';
      var hasTrailingSlash = value[value.length - 1] === '\\';
      var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;
      var result = ''; // Format a multi-line block quote to account for leading space.

      if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
        result += '\n' + indentation;
      }

      result += indentation ? value.replace(/\n/g, '\n' + indentation) : value;

      if (printAsMultipleLines) {
        result += '\n';
      }

      return '"""' + result.replace(/"""/g, '\\"""') + '"""';
    }

    /**
     * Converts an AST into a string, using one set of reasonable
     * formatting rules.
     */

    function print(ast) {
      return visit(ast, {
        leave: printDocASTReducer
      });
    }
    var MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future

    var printDocASTReducer = {
      Name: function Name(node) {
        return node.value;
      },
      Variable: function Variable(node) {
        return '$' + node.name;
      },
      // Document
      Document: function Document(node) {
        return join(node.definitions, '\n\n') + '\n';
      },
      OperationDefinition: function OperationDefinition(node) {
        var op = node.operation;
        var name = node.name;
        var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
        var directives = join(node.directives, ' ');
        var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use
        // the query short form.

        return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');
      },
      VariableDefinition: function VariableDefinition(_ref) {
        var variable = _ref.variable,
            type = _ref.type,
            defaultValue = _ref.defaultValue,
            directives = _ref.directives;
        return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));
      },
      SelectionSet: function SelectionSet(_ref2) {
        var selections = _ref2.selections;
        return block(selections);
      },
      Field: function Field(_ref3) {
        var alias = _ref3.alias,
            name = _ref3.name,
            args = _ref3.arguments,
            directives = _ref3.directives,
            selectionSet = _ref3.selectionSet;
        var prefix = wrap('', alias, ': ') + name;
        var argsLine = prefix + wrap('(', join(args, ', '), ')');

        if (argsLine.length > MAX_LINE_LENGTH) {
          argsLine = prefix + wrap('(\n', indent(join(args, '\n')), '\n)');
        }

        return join([argsLine, join(directives, ' '), selectionSet], ' ');
      },
      Argument: function Argument(_ref4) {
        var name = _ref4.name,
            value = _ref4.value;
        return name + ': ' + value;
      },
      // Fragments
      FragmentSpread: function FragmentSpread(_ref5) {
        var name = _ref5.name,
            directives = _ref5.directives;
        return '...' + name + wrap(' ', join(directives, ' '));
      },
      InlineFragment: function InlineFragment(_ref6) {
        var typeCondition = _ref6.typeCondition,
            directives = _ref6.directives,
            selectionSet = _ref6.selectionSet;
        return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');
      },
      FragmentDefinition: function FragmentDefinition(_ref7) {
        var name = _ref7.name,
            typeCondition = _ref7.typeCondition,
            variableDefinitions = _ref7.variableDefinitions,
            directives = _ref7.directives,
            selectionSet = _ref7.selectionSet;
        return (// Note: fragment variable definitions are experimental and may be changed
          // or removed in the future.
          "fragment ".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), " ") + "on ".concat(typeCondition, " ").concat(wrap('', join(directives, ' '), ' ')) + selectionSet
        );
      },
      // Value
      IntValue: function IntValue(_ref8) {
        var value = _ref8.value;
        return value;
      },
      FloatValue: function FloatValue(_ref9) {
        var value = _ref9.value;
        return value;
      },
      StringValue: function StringValue(_ref10, key) {
        var value = _ref10.value,
            isBlockString = _ref10.block;
        return isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);
      },
      BooleanValue: function BooleanValue(_ref11) {
        var value = _ref11.value;
        return value ? 'true' : 'false';
      },
      NullValue: function NullValue() {
        return 'null';
      },
      EnumValue: function EnumValue(_ref12) {
        var value = _ref12.value;
        return value;
      },
      ListValue: function ListValue(_ref13) {
        var values = _ref13.values;
        return '[' + join(values, ', ') + ']';
      },
      ObjectValue: function ObjectValue(_ref14) {
        var fields = _ref14.fields;
        return '{' + join(fields, ', ') + '}';
      },
      ObjectField: function ObjectField(_ref15) {
        var name = _ref15.name,
            value = _ref15.value;
        return name + ': ' + value;
      },
      // Directive
      Directive: function Directive(_ref16) {
        var name = _ref16.name,
            args = _ref16.arguments;
        return '@' + name + wrap('(', join(args, ', '), ')');
      },
      // Type
      NamedType: function NamedType(_ref17) {
        var name = _ref17.name;
        return name;
      },
      ListType: function ListType(_ref18) {
        var type = _ref18.type;
        return '[' + type + ']';
      },
      NonNullType: function NonNullType(_ref19) {
        var type = _ref19.type;
        return type + '!';
      },
      // Type System Definitions
      SchemaDefinition: addDescription(function (_ref20) {
        var directives = _ref20.directives,
            operationTypes = _ref20.operationTypes;
        return join(['schema', join(directives, ' '), block(operationTypes)], ' ');
      }),
      OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
        var operation = _ref21.operation,
            type = _ref21.type;
        return operation + ': ' + type;
      },
      ScalarTypeDefinition: addDescription(function (_ref22) {
        var name = _ref22.name,
            directives = _ref22.directives;
        return join(['scalar', name, join(directives, ' ')], ' ');
      }),
      ObjectTypeDefinition: addDescription(function (_ref23) {
        var name = _ref23.name,
            interfaces = _ref23.interfaces,
            directives = _ref23.directives,
            fields = _ref23.fields;
        return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      }),
      FieldDefinition: addDescription(function (_ref24) {
        var name = _ref24.name,
            args = _ref24.arguments,
            type = _ref24.type,
            directives = _ref24.directives;
        return name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));
      }),
      InputValueDefinition: addDescription(function (_ref25) {
        var name = _ref25.name,
            type = _ref25.type,
            defaultValue = _ref25.defaultValue,
            directives = _ref25.directives;
        return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');
      }),
      InterfaceTypeDefinition: addDescription(function (_ref26) {
        var name = _ref26.name,
            interfaces = _ref26.interfaces,
            directives = _ref26.directives,
            fields = _ref26.fields;
        return join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      }),
      UnionTypeDefinition: addDescription(function (_ref27) {
        var name = _ref27.name,
            directives = _ref27.directives,
            types = _ref27.types;
        return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
      }),
      EnumTypeDefinition: addDescription(function (_ref28) {
        var name = _ref28.name,
            directives = _ref28.directives,
            values = _ref28.values;
        return join(['enum', name, join(directives, ' '), block(values)], ' ');
      }),
      EnumValueDefinition: addDescription(function (_ref29) {
        var name = _ref29.name,
            directives = _ref29.directives;
        return join([name, join(directives, ' ')], ' ');
      }),
      InputObjectTypeDefinition: addDescription(function (_ref30) {
        var name = _ref30.name,
            directives = _ref30.directives,
            fields = _ref30.fields;
        return join(['input', name, join(directives, ' '), block(fields)], ' ');
      }),
      DirectiveDefinition: addDescription(function (_ref31) {
        var name = _ref31.name,
            args = _ref31.arguments,
            repeatable = _ref31.repeatable,
            locations = _ref31.locations;
        return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');
      }),
      SchemaExtension: function SchemaExtension(_ref32) {
        var directives = _ref32.directives,
            operationTypes = _ref32.operationTypes;
        return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');
      },
      ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
        var name = _ref33.name,
            directives = _ref33.directives;
        return join(['extend scalar', name, join(directives, ' ')], ' ');
      },
      ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
        var name = _ref34.name,
            interfaces = _ref34.interfaces,
            directives = _ref34.directives,
            fields = _ref34.fields;
        return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      },
      InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
        var name = _ref35.name,
            interfaces = _ref35.interfaces,
            directives = _ref35.directives,
            fields = _ref35.fields;
        return join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      },
      UnionTypeExtension: function UnionTypeExtension(_ref36) {
        var name = _ref36.name,
            directives = _ref36.directives,
            types = _ref36.types;
        return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
      },
      EnumTypeExtension: function EnumTypeExtension(_ref37) {
        var name = _ref37.name,
            directives = _ref37.directives,
            values = _ref37.values;
        return join(['extend enum', name, join(directives, ' '), block(values)], ' ');
      },
      InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
        var name = _ref38.name,
            directives = _ref38.directives,
            fields = _ref38.fields;
        return join(['extend input', name, join(directives, ' '), block(fields)], ' ');
      }
    };

    function addDescription(cb) {
      return function (node) {
        return join([node.description, cb(node)], '\n');
      };
    }
    /**
     * Given maybeArray, print an empty string if it is null or empty, otherwise
     * print all items together separated by separator if provided
     */


    function join(maybeArray) {
      var _maybeArray$filter$jo;

      var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function (x) {
        return x;
      }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';
    }
    /**
     * Given array, print each item on its own line, wrapped in an
     * indented "{ }" block.
     */


    function block(array) {
      return wrap('{\n', indent(join(array, '\n')), '\n}');
    }
    /**
     * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.
     */


    function wrap(start, maybeString) {
      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      return maybeString != null && maybeString !== '' ? start + maybeString + end : '';
    }

    function indent(str) {
      return wrap('  ', str.replace(/\n/g, '\n  '));
    }

    function isMultiline(str) {
      return str.indexOf('\n') !== -1;
    }

    function hasMultilineItems(maybeArray) {
      return maybeArray != null && maybeArray.some(isMultiline);
    }

    function unfetch_module(e,n){return n=n||{},new Promise(function(t,r){var s=new XMLHttpRequest,o=[],u=[],i={},a=function(){return {ok:2==(s.status/100|0),statusText:s.statusText,status:s.status,url:s.responseURL,text:function(){return Promise.resolve(s.responseText)},json:function(){return Promise.resolve(s.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([s.response]))},clone:a,headers:{keys:function(){return o},entries:function(){return u},get:function(e){return i[e.toLowerCase()]},has:function(e){return e.toLowerCase()in i}}}};for(var l in s.open(n.method||"get",e,!0),s.onload=function(){s.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,function(e,n,t){o.push(n=n.toLowerCase()),u.push([n,t]),i[n]=i[n]?i[n]+","+t:t;}),t(a());},s.onerror=r,s.withCredentials="include"==n.credentials,n.headers)s.setRequestHeader(l,n.headers[l]);s.send(n.body||null);})}

    var unfetch_module$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': unfetch_module
    });

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(unfetch_module$1);

    var browser = self.fetch || (self.fetch = require$$0.default || require$$0);

    /**
     * Identical class to graphql-request ClientError
     * Ensures parseLinearError is compatible with custom graphql-request clients
     *
     * @param response the raw response from the Linear API
     * @param request information about the request resulting in the error
     */
    class GraphQLClientError extends Error {
        constructor(response, request) {
            const message = `${GraphQLClientError.extractMessage(response)}: ${JSON.stringify({
            response,
            request,
        })}`;
            super(message);
            Object.setPrototypeOf(this, GraphQLClientError.prototype);
            this.response = response;
            this.request = request;
            // this is needed as Safari doesn't support .captureStackTrace
            if (typeof Error.captureStackTrace === "function") {
                Error.captureStackTrace(this, GraphQLClientError);
            }
        }
        static extractMessage(response) {
            var _a, _b, _c;
            try {
                return (_c = (_b = (_a = response.errors) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : `GraphQL Error (Code: ${response.status})`;
            }
            catch (e) {
                return `GraphQL Error (Code: ${response.status})`;
            }
        }
    }
    /**
     * Create an isomorphic GraphQL client
     * Originally forked from graphql-request to remove the external dependency
     *
     * @param url base url to send the request to
     * @param options the request options
     */
    class LinearGraphQLClient {
        constructor(url, options) {
            this.url = url;
            this.options = options || {};
        }
        rawRequest(query, variables, requestHeaders) {
            return __awaiter(this, void 0, void 0, function* () {
                const _a = this.options, { headers } = _a, others = __rest(_a, ["headers"]);
                const body = JSON.stringify({ query, variables });
                const response = yield browser(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, (typeof body === "string" ? { "Content-Type": "application/json" } : {})), resolveHeaders(headers)), resolveHeaders(requestHeaders)), body }, others));
                const result = yield getResult(response);
                if (typeof result !== "string" && response.ok && !result.errors && result.data) {
                    return Object.assign(Object.assign({}, result), { headers: response.headers, status: response.status });
                }
                else {
                    throw parseLinearError(new GraphQLClientError(Object.assign(Object.assign({}, (typeof result === "string" ? { error: result } : result)), { status: response.status, headers: response.headers }), { query, variables }));
                }
            });
        }
        /**
         * Send a GraphQL document to the server.
         */
        request(document, variables, requestHeaders) {
            return __awaiter(this, void 0, void 0, function* () {
                const _a = this.options, { headers } = _a, others = __rest(_a, ["headers"]);
                const query = typeof document === "string" ? document : print(document);
                const body = JSON.stringify({ query, variables });
                const response = yield browser(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, (typeof body === "string" ? { "Content-Type": "application/json" } : {})), resolveHeaders(headers)), resolveHeaders(requestHeaders)), body }, others));
                const result = yield getResult(response);
                if (typeof result !== "string" && response.ok && !result.errors && result.data) {
                    return result.data;
                }
                else {
                    throw new GraphQLClientError(Object.assign(Object.assign({}, (typeof result === "string" ? { error: result } : result)), { status: response.status, headers: response.headers }), { query, variables });
                }
            });
        }
        setHeaders(headers) {
            this.options.headers = headers;
            return this;
        }
        /**
         * Attach a header to the client. All subsequent requests will have this header.
         */
        setHeader(key, value) {
            const { headers } = this.options;
            if (headers) {
                // todo what if headers is in nested array form... ?
                headers[key] = value;
            }
            else {
                this.options.headers = { [key]: value };
            }
            return this;
        }
    }
    /**
     * Parse the raw response
     *
     * @param response raw response from the Linear API
     */
    function getResult(response) {
        const contentType = response.headers.get("Content-Type");
        if (contentType && contentType.startsWith("application/json")) {
            return response.json();
        }
        else {
            return response.text();
        }
    }
    /**
     * Convert the given headers configuration into a plain object.
     */
    function resolveHeaders(headers) {
        let oHeaders = {};
        if (headers) {
            if (typeof Headers !== "undefined" && headers instanceof Headers) {
                oHeaders = headersToObject(headers);
            }
            else if (Array.isArray(headers)) {
                headers.forEach(([name, value]) => {
                    oHeaders[name] = value;
                });
            }
            else {
                oHeaders = headers;
            }
        }
        return oHeaders;
    }
    /**
     * Convert Headers instance into regular object
     */
    function headersToObject(headers) {
        const o = {};
        headers.forEach((v, k) => {
            o[k] = v;
        });
        return o;
    }

    var AuthenticationSessionType;
    (function (AuthenticationSessionType) {
        AuthenticationSessionType["Android"] = "android";
        AuthenticationSessionType["Desktop"] = "desktop";
        AuthenticationSessionType["Ios"] = "ios";
        AuthenticationSessionType["Web"] = "web";
    })(AuthenticationSessionType || (AuthenticationSessionType = {}));
    var ContextViewType;
    (function (ContextViewType) {
        ContextViewType["ActiveCycle"] = "activeCycle";
        ContextViewType["ActiveIssues"] = "activeIssues";
        ContextViewType["Backlog"] = "backlog";
        ContextViewType["Triage"] = "triage";
        ContextViewType["UpcomingCycle"] = "upcomingCycle";
    })(ContextViewType || (ContextViewType = {}));
    /** A type of customer status. */
    var CustomerStatusType;
    (function (CustomerStatusType) {
        CustomerStatusType["Active"] = "active";
        CustomerStatusType["Inactive"] = "inactive";
    })(CustomerStatusType || (CustomerStatusType = {}));
    /** [INTERNAL] By which resolution is a date defined. */
    var DateResolutionType;
    (function (DateResolutionType) {
        DateResolutionType["HalfYear"] = "halfYear";
        DateResolutionType["Month"] = "month";
        DateResolutionType["Quarter"] = "quarter";
        DateResolutionType["Year"] = "year";
    })(DateResolutionType || (DateResolutionType = {}));
    /** The day of the week. */
    var Day;
    (function (Day) {
        Day["Friday"] = "Friday";
        Day["Monday"] = "Monday";
        Day["Saturday"] = "Saturday";
        Day["Sunday"] = "Sunday";
        Day["Thursday"] = "Thursday";
        Day["Tuesday"] = "Tuesday";
        Day["Wednesday"] = "Wednesday";
    })(Day || (Day = {}));
    var FacetPageSource;
    (function (FacetPageSource) {
        FacetPageSource["Projects"] = "projects";
    })(FacetPageSource || (FacetPageSource = {}));
    /** The type of a feature flag rollout stage. */
    var FeatureFlagRolloutStageType;
    (function (FeatureFlagRolloutStageType) {
        FeatureFlagRolloutStageType["Dev"] = "dev";
        FeatureFlagRolloutStageType["Full"] = "full";
        FeatureFlagRolloutStageType["Internal"] = "internal";
        FeatureFlagRolloutStageType["Partial"] = "partial";
    })(FeatureFlagRolloutStageType || (FeatureFlagRolloutStageType = {}));
    /** The various states of a pull/merge request. */
    var GitAutomationStates;
    (function (GitAutomationStates) {
        GitAutomationStates["Draft"] = "draft";
        GitAutomationStates["Merge"] = "merge";
        GitAutomationStates["Mergeable"] = "mergeable";
        GitAutomationStates["Review"] = "review";
        GitAutomationStates["Start"] = "start";
    })(GitAutomationStates || (GitAutomationStates = {}));
    var GithubOrgType;
    (function (GithubOrgType) {
        GithubOrgType["Organization"] = "organization";
        GithubOrgType["User"] = "user";
    })(GithubOrgType || (GithubOrgType = {}));
    var InitiativeStatus;
    (function (InitiativeStatus) {
        InitiativeStatus["Active"] = "Active";
        InitiativeStatus["Completed"] = "Completed";
        InitiativeStatus["Planned"] = "Planned";
    })(InitiativeStatus || (InitiativeStatus = {}));
    /** Different tabs available inside an initiative. */
    var InitiativeTab;
    (function (InitiativeTab) {
        InitiativeTab["Overview"] = "overview";
        InitiativeTab["Projects"] = "projects";
    })(InitiativeTab || (InitiativeTab = {}));
    /** Linear supported integration services. */
    var IntegrationService;
    (function (IntegrationService) {
        IntegrationService["Airbyte"] = "airbyte";
        IntegrationService["Discord"] = "discord";
        IntegrationService["Email"] = "email";
        IntegrationService["Figma"] = "figma";
        IntegrationService["FigmaPlugin"] = "figmaPlugin";
        IntegrationService["Front"] = "front";
        IntegrationService["Github"] = "github";
        IntegrationService["GithubCommit"] = "githubCommit";
        IntegrationService["GithubEnterpriseServer"] = "githubEnterpriseServer";
        IntegrationService["GithubImport"] = "githubImport";
        IntegrationService["GithubPersonal"] = "githubPersonal";
        IntegrationService["Gitlab"] = "gitlab";
        IntegrationService["GoogleCalendarPersonal"] = "googleCalendarPersonal";
        IntegrationService["GoogleSheets"] = "googleSheets";
        IntegrationService["Intercom"] = "intercom";
        IntegrationService["Jira"] = "jira";
        IntegrationService["JiraPersonal"] = "jiraPersonal";
        IntegrationService["LaunchDarkly"] = "launchDarkly";
        IntegrationService["LaunchDarklyPersonal"] = "launchDarklyPersonal";
        IntegrationService["Loom"] = "loom";
        IntegrationService["Notion"] = "notion";
        IntegrationService["Opsgenie"] = "opsgenie";
        IntegrationService["PagerDuty"] = "pagerDuty";
        IntegrationService["Sentry"] = "sentry";
        IntegrationService["Slack"] = "slack";
        IntegrationService["SlackAsks"] = "slackAsks";
        IntegrationService["SlackCustomViewNotifications"] = "slackCustomViewNotifications";
        IntegrationService["SlackOrgProjectUpdatesPost"] = "slackOrgProjectUpdatesPost";
        IntegrationService["SlackPersonal"] = "slackPersonal";
        IntegrationService["SlackPost"] = "slackPost";
        IntegrationService["SlackProjectPost"] = "slackProjectPost";
        IntegrationService["SlackProjectUpdatesPost"] = "slackProjectUpdatesPost";
        IntegrationService["Zendesk"] = "zendesk";
    })(IntegrationService || (IntegrationService = {}));
    /** The type of the issue relation. */
    var IssueRelationType;
    (function (IssueRelationType) {
        IssueRelationType["Blocks"] = "blocks";
        IssueRelationType["Duplicate"] = "duplicate";
        IssueRelationType["Related"] = "related";
    })(IssueRelationType || (IssueRelationType = {}));
    /** The different requests statuses possible for an OAuth client approval request. */
    var OAuthClientApprovalStatus;
    (function (OAuthClientApprovalStatus) {
        OAuthClientApprovalStatus["Approved"] = "approved";
        OAuthClientApprovalStatus["Denied"] = "denied";
        OAuthClientApprovalStatus["Requested"] = "requested";
    })(OAuthClientApprovalStatus || (OAuthClientApprovalStatus = {}));
    /** What type of auth is the domain used for. */
    var OrganizationDomainAuthType;
    (function (OrganizationDomainAuthType) {
        OrganizationDomainAuthType["General"] = "general";
        OrganizationDomainAuthType["Saml"] = "saml";
    })(OrganizationDomainAuthType || (OrganizationDomainAuthType = {}));
    /** The different statuses possible for an organization invite. */
    var OrganizationInviteStatus;
    (function (OrganizationInviteStatus) {
        OrganizationInviteStatus["Accepted"] = "accepted";
        OrganizationInviteStatus["Expired"] = "expired";
        OrganizationInviteStatus["Pending"] = "pending";
    })(OrganizationInviteStatus || (OrganizationInviteStatus = {}));
    /** How to treat NULL values, whether they should appear first or last */
    var PaginationNulls;
    (function (PaginationNulls) {
        PaginationNulls["First"] = "first";
        PaginationNulls["Last"] = "last";
    })(PaginationNulls || (PaginationNulls = {}));
    /** By which field should the pagination order by */
    var PaginationOrderBy;
    (function (PaginationOrderBy) {
        PaginationOrderBy["CreatedAt"] = "createdAt";
        PaginationOrderBy["UpdatedAt"] = "updatedAt";
    })(PaginationOrderBy || (PaginationOrderBy = {}));
    /** Whether to sort in ascending or descending order */
    var PaginationSortOrder;
    (function (PaginationSortOrder) {
        PaginationSortOrder["Ascending"] = "Ascending";
        PaginationSortOrder["Descending"] = "Descending";
    })(PaginationSortOrder || (PaginationSortOrder = {}));
    /** A type of project status. */
    var ProjectStatusType;
    (function (ProjectStatusType) {
        ProjectStatusType["Backlog"] = "backlog";
        ProjectStatusType["Canceled"] = "canceled";
        ProjectStatusType["Completed"] = "completed";
        ProjectStatusType["Paused"] = "paused";
        ProjectStatusType["Planned"] = "planned";
        ProjectStatusType["Started"] = "started";
    })(ProjectStatusType || (ProjectStatusType = {}));
    /** Different tabs available inside a project. */
    var ProjectTab;
    (function (ProjectTab) {
        ProjectTab["Documents"] = "documents";
        ProjectTab["Issues"] = "issues";
    })(ProjectTab || (ProjectTab = {}));
    /** The health type of a project when the update is created. */
    var ProjectUpdateHealthType;
    (function (ProjectUpdateHealthType) {
        ProjectUpdateHealthType["AtRisk"] = "atRisk";
        ProjectUpdateHealthType["OffTrack"] = "offTrack";
        ProjectUpdateHealthType["OnTrack"] = "onTrack";
    })(ProjectUpdateHealthType || (ProjectUpdateHealthType = {}));
    /** The frequency at which to send project update reminders. */
    var ProjectUpdateReminderFrequency;
    (function (ProjectUpdateReminderFrequency) {
        ProjectUpdateReminderFrequency["Month"] = "month";
        ProjectUpdateReminderFrequency["Never"] = "never";
        ProjectUpdateReminderFrequency["TwoWeeks"] = "twoWeeks";
        ProjectUpdateReminderFrequency["Week"] = "week";
    })(ProjectUpdateReminderFrequency || (ProjectUpdateReminderFrequency = {}));
    /** [ALPHA] The type of link between the pull request & issue. */
    var PullRequestIssueLinkType;
    (function (PullRequestIssueLinkType) {
        PullRequestIssueLinkType["Closes"] = "closes";
        PullRequestIssueLinkType["Contributes"] = "contributes";
        PullRequestIssueLinkType["Links"] = "links";
    })(PullRequestIssueLinkType || (PullRequestIssueLinkType = {}));
    /** [ALPHA] The decision made by a pull request reviewer. */
    var PullRequestReviewerDecision;
    (function (PullRequestReviewerDecision) {
        PullRequestReviewerDecision["Approved"] = "approved";
        PullRequestReviewerDecision["ChangesRequested"] = "changesRequested";
        PullRequestReviewerDecision["Pending"] = "pending";
    })(PullRequestReviewerDecision || (PullRequestReviewerDecision = {}));
    /** [ALPHA] The status of a pull request. */
    var PullRequestStatus;
    (function (PullRequestStatus) {
        PullRequestStatus["Approved"] = "approved";
        PullRequestStatus["Closed"] = "closed";
        PullRequestStatus["Draft"] = "draft";
        PullRequestStatus["InReview"] = "inReview";
        PullRequestStatus["Merged"] = "merged";
        PullRequestStatus["Open"] = "open";
    })(PullRequestStatus || (PullRequestStatus = {}));
    /** The different push subscription types. */
    var PushSubscriptionType;
    (function (PushSubscriptionType) {
        PushSubscriptionType["Apple"] = "apple";
        PushSubscriptionType["AppleDevelopment"] = "appleDevelopment";
        PushSubscriptionType["Firebase"] = "firebase";
        PushSubscriptionType["Web"] = "web";
    })(PushSubscriptionType || (PushSubscriptionType = {}));
    /** Features release channel. */
    var ReleaseChannel;
    (function (ReleaseChannel) {
        ReleaseChannel["Beta"] = "beta";
        ReleaseChannel["Internal"] = "internal";
        ReleaseChannel["PreRelease"] = "preRelease";
        ReleaseChannel["Public"] = "public";
    })(ReleaseChannel || (ReleaseChannel = {}));
    /** Which day count to use for SLA calculations. */
    var SLADayCountType;
    (function (SLADayCountType) {
        SLADayCountType["All"] = "all";
        SLADayCountType["OnlyBusinessDays"] = "onlyBusinessDays";
    })(SLADayCountType || (SLADayCountType = {}));
    var SchemaFieldType;
    (function (SchemaFieldType) {
        SchemaFieldType["BooleanType"] = "booleanType";
        SchemaFieldType["DateType"] = "dateType";
        SchemaFieldType["NumberType"] = "numberType";
        SchemaFieldType["StringType"] = "stringType";
    })(SchemaFieldType || (SchemaFieldType = {}));
    var SendStrategy;
    (function (SendStrategy) {
        SendStrategy["Desktop"] = "desktop";
        SendStrategy["DesktopAndPush"] = "desktopAndPush";
        SendStrategy["DesktopThenPush"] = "desktopThenPush";
        SendStrategy["Push"] = "push";
    })(SendStrategy || (SendStrategy = {}));
    var SlaStatus;
    (function (SlaStatus) {
        SlaStatus["Breached"] = "Breached";
        SlaStatus["Completed"] = "Completed";
        SlaStatus["Failed"] = "Failed";
        SlaStatus["HighRisk"] = "HighRisk";
        SlaStatus["LowRisk"] = "LowRisk";
        SlaStatus["MediumRisk"] = "MediumRisk";
    })(SlaStatus || (SlaStatus = {}));
    var SlackChannelType;
    (function (SlackChannelType) {
        SlackChannelType["DirectMessage"] = "DirectMessage";
        SlackChannelType["MultiPersonDirectMessage"] = "MultiPersonDirectMessage";
        SlackChannelType["Private"] = "Private";
        SlackChannelType["Public"] = "Public";
    })(SlackChannelType || (SlackChannelType = {}));
    /** Which action should be taken after an issue is added to triage. */
    var TriageResponsibilityAction;
    (function (TriageResponsibilityAction) {
        TriageResponsibilityAction["Assign"] = "assign";
        TriageResponsibilityAction["Notify"] = "notify";
    })(TriageResponsibilityAction || (TriageResponsibilityAction = {}));
    var UserContextViewType;
    (function (UserContextViewType) {
        UserContextViewType["Assigned"] = "assigned";
    })(UserContextViewType || (UserContextViewType = {}));
    /** The types of flags that the user can have. */
    var UserFlagType;
    (function (UserFlagType) {
        UserFlagType["All"] = "all";
        UserFlagType["AnalyticsWelcomeDismissed"] = "analyticsWelcomeDismissed";
        UserFlagType["CanPlaySnake"] = "canPlaySnake";
        UserFlagType["CanPlayTetris"] = "canPlayTetris";
        UserFlagType["CompletedOnboarding"] = "completedOnboarding";
        UserFlagType["CycleWelcomeDismissed"] = "cycleWelcomeDismissed";
        UserFlagType["DesktopDownloadToastDismissed"] = "desktopDownloadToastDismissed";
        UserFlagType["DesktopInstalled"] = "desktopInstalled";
        UserFlagType["DesktopTabsOnboardingDismissed"] = "desktopTabsOnboardingDismissed";
        UserFlagType["DueDateShortcutMigration"] = "dueDateShortcutMigration";
        UserFlagType["EditorSlashCommandUsed"] = "editorSlashCommandUsed";
        UserFlagType["EmptyActiveIssuesDismissed"] = "emptyActiveIssuesDismissed";
        UserFlagType["EmptyBacklogDismissed"] = "emptyBacklogDismissed";
        UserFlagType["EmptyCustomViewsDismissed"] = "emptyCustomViewsDismissed";
        UserFlagType["EmptyMyIssuesDismissed"] = "emptyMyIssuesDismissed";
        UserFlagType["EmptyParagraphSlashCommandTip"] = "emptyParagraphSlashCommandTip";
        UserFlagType["FigmaPluginBannerDismissed"] = "figmaPluginBannerDismissed";
        UserFlagType["FigmaPromptDismissed"] = "figmaPromptDismissed";
        UserFlagType["HelpIslandFeatureInsightsDismissed"] = "helpIslandFeatureInsightsDismissed";
        UserFlagType["ImportBannerDismissed"] = "importBannerDismissed";
        UserFlagType["InitiativesBannerDismissed"] = "initiativesBannerDismissed";
        UserFlagType["InsightsHelpDismissed"] = "insightsHelpDismissed";
        UserFlagType["InsightsWelcomeDismissed"] = "insightsWelcomeDismissed";
        UserFlagType["IssueLabelSuggestionUsed"] = "issueLabelSuggestionUsed";
        UserFlagType["IssueMovePromptCompleted"] = "issueMovePromptCompleted";
        UserFlagType["JoinTeamIntroductionDismissed"] = "joinTeamIntroductionDismissed";
        UserFlagType["ListSelectionTip"] = "listSelectionTip";
        UserFlagType["MigrateThemePreference"] = "migrateThemePreference";
        UserFlagType["MilestoneOnboardingIsSeenAndDismissed"] = "milestoneOnboardingIsSeenAndDismissed";
        UserFlagType["ProjectBacklogWelcomeDismissed"] = "projectBacklogWelcomeDismissed";
        UserFlagType["ProjectBoardOnboardingIsSeenAndDismissed"] = "projectBoardOnboardingIsSeenAndDismissed";
        UserFlagType["ProjectUpdatesWelcomeDismissed"] = "projectUpdatesWelcomeDismissed";
        UserFlagType["ProjectWelcomeDismissed"] = "projectWelcomeDismissed";
        UserFlagType["RewindBannerDismissed"] = "rewindBannerDismissed";
        UserFlagType["SlackCommentReactionTipShown"] = "slackCommentReactionTipShown";
        UserFlagType["TeamsPageIntroductionDismissed"] = "teamsPageIntroductionDismissed";
        UserFlagType["ThreadedCommentsNudgeIsSeen"] = "threadedCommentsNudgeIsSeen";
        UserFlagType["TriageWelcomeDismissed"] = "triageWelcomeDismissed";
        UserFlagType["TryCyclesDismissed"] = "tryCyclesDismissed";
        UserFlagType["TryGithubDismissed"] = "tryGithubDismissed";
        UserFlagType["TryInvitePeopleDismissed"] = "tryInvitePeopleDismissed";
        UserFlagType["TryRoadmapsDismissed"] = "tryRoadmapsDismissed";
        UserFlagType["TryTriageDismissed"] = "tryTriageDismissed";
        UserFlagType["UpdatedSlackThreadSyncIntegration"] = "updatedSlackThreadSyncIntegration";
    })(UserFlagType || (UserFlagType = {}));
    /** Operations that can be applied to UserFlagType. */
    var UserFlagUpdateOperation;
    (function (UserFlagUpdateOperation) {
        UserFlagUpdateOperation["Clear"] = "clear";
        UserFlagUpdateOperation["Decr"] = "decr";
        UserFlagUpdateOperation["Incr"] = "incr";
        UserFlagUpdateOperation["Lock"] = "lock";
    })(UserFlagUpdateOperation || (UserFlagUpdateOperation = {}));
    /** The different permission roles available to users on an organization. */
    var UserRoleType;
    (function (UserRoleType) {
        UserRoleType["Admin"] = "admin";
        UserRoleType["Guest"] = "guest";
        UserRoleType["User"] = "user";
    })(UserRoleType || (UserRoleType = {}));
    /** The type of view preferences (either user or organization level preferences). */
    var ViewPreferencesType;
    (function (ViewPreferencesType) {
        ViewPreferencesType["Organization"] = "organization";
        ViewPreferencesType["User"] = "user";
    })(ViewPreferencesType || (ViewPreferencesType = {}));
    /** The client view this custom view is targeting. */
    var ViewType;
    (function (ViewType) {
        ViewType["ActiveIssues"] = "activeIssues";
        ViewType["AllIssues"] = "allIssues";
        ViewType["Archive"] = "archive";
        ViewType["Backlog"] = "backlog";
        ViewType["Board"] = "board";
        ViewType["CompletedCycle"] = "completedCycle";
        ViewType["CustomRoadmap"] = "customRoadmap";
        ViewType["CustomView"] = "customView";
        ViewType["CustomViews"] = "customViews";
        ViewType["Customers"] = "customers";
        ViewType["Cycle"] = "cycle";
        ViewType["Inbox"] = "inbox";
        ViewType["Initiative"] = "initiative";
        ViewType["InitiativeOverview"] = "initiativeOverview";
        ViewType["Initiatives"] = "initiatives";
        ViewType["InitiativesCompleted"] = "initiativesCompleted";
        ViewType["InitiativesPlanned"] = "initiativesPlanned";
        ViewType["IssueIdentifiers"] = "issueIdentifiers";
        ViewType["Label"] = "label";
        ViewType["MyIssues"] = "myIssues";
        ViewType["MyIssuesActivity"] = "myIssuesActivity";
        ViewType["MyIssuesCreatedByMe"] = "myIssuesCreatedByMe";
        ViewType["MyIssuesSubscribedTo"] = "myIssuesSubscribedTo";
        ViewType["MyPullRequests"] = "myPullRequests";
        ViewType["Project"] = "project";
        ViewType["ProjectDocuments"] = "projectDocuments";
        ViewType["Projects"] = "projects";
        ViewType["ProjectsAll"] = "projectsAll";
        ViewType["ProjectsBacklog"] = "projectsBacklog";
        ViewType["ProjectsClosed"] = "projectsClosed";
        ViewType["PullRequests"] = "pullRequests";
        ViewType["QuickView"] = "quickView";
        ViewType["Roadmap"] = "roadmap";
        ViewType["RoadmapAll"] = "roadmapAll";
        ViewType["RoadmapBacklog"] = "roadmapBacklog";
        ViewType["RoadmapClosed"] = "roadmapClosed";
        ViewType["Roadmaps"] = "roadmaps";
        ViewType["Search"] = "search";
        ViewType["SplitSearch"] = "splitSearch";
        ViewType["Teams"] = "teams";
        ViewType["Triage"] = "triage";
        ViewType["UserProfile"] = "userProfile";
        ViewType["UserProfileCreatedByUser"] = "userProfileCreatedByUser";
    })(ViewType || (ViewType = {}));
    var WorkflowTrigger;
    (function (WorkflowTrigger) {
        WorkflowTrigger["EntityCreated"] = "entityCreated";
        WorkflowTrigger["EntityCreatedOrUpdated"] = "entityCreatedOrUpdated";
        WorkflowTrigger["EntityRemoved"] = "entityRemoved";
        WorkflowTrigger["EntityUnarchived"] = "entityUnarchived";
        WorkflowTrigger["EntityUpdated"] = "entityUpdated";
    })(WorkflowTrigger || (WorkflowTrigger = {}));
    var WorkflowTriggerType;
    (function (WorkflowTriggerType) {
        WorkflowTriggerType["Issue"] = "issue";
        WorkflowTriggerType["Project"] = "project";
    })(WorkflowTriggerType || (WorkflowTriggerType = {}));
    var WorkflowType;
    (function (WorkflowType) {
        WorkflowType["Custom"] = "custom";
        WorkflowType["Sla"] = "sla";
        WorkflowType["ViewSubscription"] = "viewSubscription";
    })(WorkflowType || (WorkflowType = {}));
    const EntityFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Entity" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Entity" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const CommentNotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CommentNotification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentNotification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
                    ],
                },
            },
        ],
    };
    const CustomViewNotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomViewNotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewNotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const CycleNotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CycleNotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleNotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const DocumentContentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentContent" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContent" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "content" } },
                        { kind: "Field", name: { kind: "Name", value: "contentState" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "document" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "restoredAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const DocumentContentHistoryFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentContentHistory" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistory" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "actorIds" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentContent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "contentDataSnapshotAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const DraftFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Draft" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Draft" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "data" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parentComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "bodyData" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "isAutogenerated" } },
                    ],
                },
            },
        ],
    };
    const AttachmentArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AttachmentArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CycleArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CycleArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const DeletePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DeletePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DeletePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "entityId" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const DocumentArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const InitiativeArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueDraftArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueDraftArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueDraftArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ActorBotFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ActorBot" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ActorBot" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "userDisplayName" } },
                        { kind: "Field", name: { kind: "Name", value: "subType" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const DocumentNotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentNotification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentNotification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "documentId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const InitiativeNotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeNotification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "initiativeId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const NotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const IssueNotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueNotification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parentComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriptions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const OauthClientApprovalFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OauthClientApproval" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApproval" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "requesterId" } },
                        { kind: "Field", name: { kind: "Name", value: "responderId" } },
                        { kind: "Field", name: { kind: "Name", value: "requestReason" } },
                        { kind: "Field", name: { kind: "Name", value: "denyReason" } },
                        { kind: "Field", name: { kind: "Name", value: "scopes" } },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "oauthClientId" } },
                    ],
                },
            },
        ],
    };
    const OauthClientApprovalNotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OauthClientApprovalNotification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "oauthClientApprovalId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "oauthClientApproval" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApproval" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectNotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectNotification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectMilestoneId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parentComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const NotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Notification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Notification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentNotification" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentNotification" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotification" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeNotification" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueNotification" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApprovalNotification" } },
                                ],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectNotification" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const NotificationArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectStatusArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectStatusArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const RoadmapArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RoadmapArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const TeamArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const WorkflowStateArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowStateArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DeletePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueDraftArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueDraftArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const LabelNotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "LabelNotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LabelNotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const ProjectNotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectNotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const ReminderFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Reminder" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Reminder" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "schedule" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentId" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueId" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectId" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "comment" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "remindAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TeamNotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamNotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamNotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const UserAccountFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserAccount" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAccount" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "service" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "authTokenLinkDisabled" } },
                    ],
                },
            },
        ],
    };
    const UserNotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserNotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserNotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const AuthOrganizationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthOrganization" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganization" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
                        { kind: "Field", name: { kind: "Name", value: "previousUrlKeys" } },
                        { kind: "Field", name: { kind: "Name", value: "serviceId" } },
                        { kind: "Field", name: { kind: "Name", value: "releaseChannel" } },
                        { kind: "Field", name: { kind: "Name", value: "logoUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "urlKey" } },
                        { kind: "Field", name: { kind: "Name", value: "region" } },
                        { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "samlEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "scimEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "enabled" } },
                        { kind: "Field", name: { kind: "Name", value: "userCount" } },
                    ],
                },
            },
        ],
    };
    const AuthUserFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthUser" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthUser" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "userAccountId" } },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                        { kind: "Field", name: { kind: "Name", value: "role" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const AuthEmailIntakeAddressFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthEmailIntakeAddress" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthEmailIntakeAddress" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "address" } },
                        { kind: "Field", name: { kind: "Name", value: "enabled" } },
                    ],
                },
            },
        ],
    };
    const InitiativeNotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeNotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const AuthOrganizationInviteFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthOrganizationInvite" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganizationInvite" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "expiresAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const OrganizationIpRestrictionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationIpRestriction" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationIpRestriction" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "range" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "enabled" } },
                    ],
                },
            },
        ],
    };
    const ProjectStatusFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectStatus" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatus" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "position" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "indefinite" } },
                    ],
                },
            },
        ],
    };
    const PaidSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PaidSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PaidSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "collectionMethod" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "nextBillingAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "seatsMaximum" } },
                        { kind: "Field", name: { kind: "Name", value: "seatsMinimum" } },
                        { kind: "Field", name: { kind: "Name", value: "seats" } },
                        { kind: "Field", name: { kind: "Name", value: "pendingChangeType" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const OrganizationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Organization" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Organization" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
                        { kind: "Field", name: { kind: "Name", value: "gitBranchFormat" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "ipRestrictions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationIpRestriction" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "userCount" } },
                        { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } },
                        { kind: "Field", name: { kind: "Name", value: "previousUrlKeys" } },
                        { kind: "Field", name: { kind: "Name", value: "periodUploadVolume" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersDay" } },
                        { kind: "Field", name: { kind: "Name", value: "releaseChannel" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersHour" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "fiscalYearStartMonth" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateReminderFrequencyInWeeks" } },
                        { kind: "Field", name: { kind: "Name", value: "logoUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectStatuses" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscription" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PaidSubscription" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "urlKey" } },
                        { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "trialEndsAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "samlEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "scimEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "allowMembersToInvite" } },
                        { kind: "Field", name: { kind: "Name", value: "gitLinkbackMessagesEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "gitPublicLinkbackMessagesEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "roadmapEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "slaDayCount" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdatesReminderFrequency" } },
                    ],
                },
            },
        ],
    };
    const AuthOauthClientWithScopeFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthOauthClientWithScope" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOauthClientWithScope" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "appId" } },
                        { kind: "Field", name: { kind: "Name", value: "clientId" } },
                        { kind: "Field", name: { kind: "Name", value: "scope" } },
                        { kind: "Field", name: { kind: "Name", value: "webhookUrl" } },
                    ],
                },
            },
        ],
    };
    const AuthOauthClientWithMembershipsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthOauthClientWithMemberships" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOauthClientWithMemberships" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "appId" } },
                        { kind: "Field", name: { kind: "Name", value: "clientId" } },
                        { kind: "Field", name: { kind: "Name", value: "scope" } },
                        { kind: "Field", name: { kind: "Name", value: "webhookUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "totalMembers" } },
                    ],
                },
            },
        ],
    };
    const AuthenticationSessionResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthenticationSessionResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthenticationSessionResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "client" } },
                        { kind: "Field", name: { kind: "Name", value: "countryCodes" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "location" } },
                        { kind: "Field", name: { kind: "Name", value: "ip" } },
                        { kind: "Field", name: { kind: "Name", value: "isCurrentSession" } },
                        { kind: "Field", name: { kind: "Name", value: "locationCity" } },
                        { kind: "Field", name: { kind: "Name", value: "locationCountryCode" } },
                        { kind: "Field", name: { kind: "Name", value: "locationCountry" } },
                        { kind: "Field", name: { kind: "Name", value: "locationRegionCode" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "operatingSystem" } },
                        { kind: "Field", name: { kind: "Name", value: "userAgent" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "browserType" } },
                        { kind: "Field", name: { kind: "Name", value: "lastActiveAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const OrganizationDomainFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationDomain" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomain" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "verificationEmail" } },
                        { kind: "Field", name: { kind: "Name", value: "verified" } },
                        { kind: "Field", name: { kind: "Name", value: "disableOrganizationCreation" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "authType" } },
                        { kind: "Field", name: { kind: "Name", value: "claimed" } },
                    ],
                },
            },
        ],
    };
    const WebhookFailureEventFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WebhookFailureEvent" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookFailureEvent" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "responseOrError" } },
                        { kind: "Field", name: { kind: "Name", value: "httpStatus" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "executionId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhook" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const UserAuthorizedApplicationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserAuthorizedApplication" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAuthorizedApplication" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "approvalErrorCode" } },
                        { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "developer" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "clientId" } },
                        { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "webhooksEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "createdByLinear" } },
                        { kind: "Field", name: { kind: "Name", value: "isAuthorized" } },
                    ],
                },
            },
        ],
    };
    const ApplicationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Application" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Application" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "developer" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "clientId" } },
                        { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
                    ],
                },
            },
        ],
    };
    const PasskeyFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Passkey" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Passkey" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "userAgent" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "ip" } },
                        { kind: "Field", name: { kind: "Name", value: "locationCity" } },
                        { kind: "Field", name: { kind: "Name", value: "locationCountryCode" } },
                        { kind: "Field", name: { kind: "Name", value: "locationCountry" } },
                        { kind: "Field", name: { kind: "Name", value: "locationRegionCode" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "lastUsedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "clientType" } },
                        { kind: "Field", name: { kind: "Name", value: "browserType" } },
                        { kind: "Field", name: { kind: "Name", value: "aaguid" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "label" } },
                        { kind: "Field", name: { kind: "Name", value: "lastUsedSessionId" } },
                    ],
                },
            },
        ],
    };
    const SharedSlackSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SharedSlackSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SharedSlackSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "enterpriseId" } },
                        { kind: "Field", name: { kind: "Name", value: "enterpriseName" } },
                        { kind: "Field", name: { kind: "Name", value: "teamId" } },
                        { kind: "Field", name: { kind: "Name", value: "teamName" } },
                        { kind: "Field", name: { kind: "Name", value: "shouldUnfurl" } },
                    ],
                },
            },
        ],
    };
    const FrontSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FrontSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FrontSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnComment" } },
                        { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCancellation" } },
                        { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCompletion" } },
                        { kind: "Field", name: { kind: "Name", value: "sendNoteOnStatusChange" } },
                        { kind: "Field", name: { kind: "Name", value: "sendNoteOnComment" } },
                    ],
                },
            },
        ],
    };
    const GitHubRepoMappingFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitHubRepoMapping" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubRepoMapping" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "gitHubLabels" } },
                        { kind: "Field", name: { kind: "Name", value: "gitHubRepoId" } },
                        { kind: "Field", name: { kind: "Name", value: "linearTeamId" } },
                        { kind: "Field", name: { kind: "Name", value: "bidirectional" } },
                        { kind: "Field", name: { kind: "Name", value: "default" } },
                    ],
                },
            },
        ],
    };
    const GitHubRepoFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitHubRepo" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubRepo" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "fullName" } },
                    ],
                },
            },
        ],
    };
    const GitHubSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitHubSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "repositoriesMapping" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubRepoMapping" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "orgLogin" } },
                        { kind: "Field", name: { kind: "Name", value: "orgAvatarUrl" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "repositories" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubRepo" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "orgType" } },
                    ],
                },
            },
        ],
    };
    const GitHubImportSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitHubImportSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubImportSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "labels" } },
                        { kind: "Field", name: { kind: "Name", value: "orgLogin" } },
                        { kind: "Field", name: { kind: "Name", value: "orgAvatarUrl" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "repositories" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubRepo" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "orgType" } },
                    ],
                },
            },
        ],
    };
    const GitHubPersonalSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitHubPersonalSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubPersonalSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "login" } },
                    ],
                },
            },
        ],
    };
    const GitLabSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitLabSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitLabSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "expiresAt" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "readonly" } },
                    ],
                },
            },
        ],
    };
    const GoogleSheetsSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GoogleSheetsSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GoogleSheetsSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "sheetId" } },
                        { kind: "Field", name: { kind: "Name", value: "spreadsheetId" } },
                        { kind: "Field", name: { kind: "Name", value: "spreadsheetUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedIssuesAt" } },
                    ],
                },
            },
        ],
    };
    const IntercomSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntercomSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntercomSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnComment" } },
                        { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCancellation" } },
                        { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCompletion" } },
                        { kind: "Field", name: { kind: "Name", value: "sendNoteOnStatusChange" } },
                        { kind: "Field", name: { kind: "Name", value: "sendNoteOnComment" } },
                    ],
                },
            },
        ],
    };
    const JiraProjectDataFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "JiraProjectData" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "JiraProjectData" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "key" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                    ],
                },
            },
        ],
    };
    const JiraLinearMappingFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "JiraLinearMapping" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "JiraLinearMapping" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "jiraProjectId" } },
                        { kind: "Field", name: { kind: "Name", value: "linearTeamId" } },
                        { kind: "Field", name: { kind: "Name", value: "bidirectional" } },
                        { kind: "Field", name: { kind: "Name", value: "default" } },
                    ],
                },
            },
        ],
    };
    const JiraSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "JiraSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "JiraSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projects" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "JiraProjectData" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMapping" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "JiraLinearMapping" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "setupPending" } },
                        { kind: "Field", name: { kind: "Name", value: "isJiraServer" } },
                        { kind: "Field", name: { kind: "Name", value: "manualSetup" } },
                    ],
                },
            },
        ],
    };
    const JiraPersonalSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "JiraPersonalSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "JiraPersonalSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "siteName" } },
                    ],
                },
            },
        ],
    };
    const LaunchDarklySettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "LaunchDarklySettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LaunchDarklySettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "environment" } },
                        { kind: "Field", name: { kind: "Name", value: "projectKey" } },
                    ],
                },
            },
        ],
    };
    const NotionSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotionSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotionSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "workspaceId" } },
                        { kind: "Field", name: { kind: "Name", value: "workspaceName" } },
                    ],
                },
            },
        ],
    };
    const OpsgenieSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OpsgenieSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OpsgenieSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "apiFailedWithUnauthorizedErrorAt" } },
                    ],
                },
            },
        ],
    };
    const PagerDutySettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PagerDutySettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PagerDutySettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "apiFailedWithUnauthorizedErrorAt" } },
                    ],
                },
            },
        ],
    };
    const SentrySettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SentrySettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SentrySettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationSlug" } },
                    ],
                },
            },
        ],
    };
    const SlackSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SlackSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "enterpriseId" } },
                        { kind: "Field", name: { kind: "Name", value: "enterpriseName" } },
                        { kind: "Field", name: { kind: "Name", value: "teamId" } },
                        { kind: "Field", name: { kind: "Name", value: "teamName" } },
                        { kind: "Field", name: { kind: "Name", value: "linkOnIssueIdMention" } },
                        { kind: "Field", name: { kind: "Name", value: "shouldUnfurl" } },
                    ],
                },
            },
        ],
    };
    const SlackAsksTeamSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SlackAsksTeamSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackAsksTeamSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "hasDefaultAsk" } },
                    ],
                },
            },
        ],
    };
    const SlackChannelNameMappingFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SlackChannelNameMapping" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackChannelNameMapping" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "autoCreateTemplateId" } },
                        { kind: "Field", name: { kind: "Name", value: "autoCreateOnBotMention" } },
                        { kind: "Field", name: { kind: "Name", value: "postCancellationUpdates" } },
                        { kind: "Field", name: { kind: "Name", value: "postCompletionUpdates" } },
                        { kind: "Field", name: { kind: "Name", value: "postAcceptedFromTriageUpdates" } },
                        { kind: "Field", name: { kind: "Name", value: "botAdded" } },
                        { kind: "Field", name: { kind: "Name", value: "isPrivate" } },
                        { kind: "Field", name: { kind: "Name", value: "isShared" } },
                        { kind: "Field", name: { kind: "Name", value: "aiTitles" } },
                        { kind: "Field", name: { kind: "Name", value: "autoCreateOnMessage" } },
                        { kind: "Field", name: { kind: "Name", value: "autoCreateOnEmoji" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teams" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackAsksTeamSettings" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const SlackAsksSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SlackAsksSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackAsksSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "enterpriseId" } },
                        { kind: "Field", name: { kind: "Name", value: "enterpriseName" } },
                        { kind: "Field", name: { kind: "Name", value: "teamId" } },
                        { kind: "Field", name: { kind: "Name", value: "teamName" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "slackChannelMapping" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelNameMapping" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "canAdministrate" } },
                        { kind: "Field", name: { kind: "Name", value: "shouldUnfurl" } },
                    ],
                },
            },
        ],
    };
    const SlackPostSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SlackPostSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackPostSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "channel" } },
                        { kind: "Field", name: { kind: "Name", value: "channelId" } },
                        { kind: "Field", name: { kind: "Name", value: "channelType" } },
                        { kind: "Field", name: { kind: "Name", value: "configurationUrl" } },
                    ],
                },
            },
        ],
    };
    const ZendeskSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ZendeskSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ZendeskSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "botUserId" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "subdomain" } },
                        { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnComment" } },
                        { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCancellation" } },
                        { kind: "Field", name: { kind: "Name", value: "automateTicketReopeningOnCompletion" } },
                        { kind: "Field", name: { kind: "Name", value: "sendNoteOnStatusChange" } },
                        { kind: "Field", name: { kind: "Name", value: "sendNoteOnComment" } },
                    ],
                },
            },
        ],
    };
    const IntegrationSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "front" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FrontSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitHub" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitHubImport" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubImportSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitHubPersonal" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubPersonalSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitLab" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitLabSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "googleSheets" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GoogleSheetsSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "intercom" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntercomSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "jira" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "JiraSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "jiraPersonal" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "JiraPersonalSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "launchDarkly" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LaunchDarklySettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notion" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotionSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "opsgenie" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OpsgenieSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pagerDuty" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PagerDutySettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sentry" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SentrySettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "slack" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "slackAsks" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackAsksSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "slackCustomViewNotifications" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackPostSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "slackOrgProjectUpdatesPost" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackPostSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "slackPost" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackPostSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "slackProjectPost" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackPostSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "zendesk" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ZendeskSettings" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const InitiativePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const InitiativeToProjectPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeToProjectPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeToProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const NotificationDeliveryPreferencesDayFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "end" } },
                        { kind: "Field", name: { kind: "Name", value: "start" } },
                    ],
                },
            },
        ],
    };
    const NotificationDeliveryPreferencesScheduleFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "friday" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "monday" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "saturday" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sunday" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "thursday" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "tuesday" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "wednesday" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "disabled" } },
                    ],
                },
            },
        ],
    };
    const NotificationDeliveryPreferencesChannelFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "schedule" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "notificationsDisabled" } },
                    ],
                },
            },
        ],
    };
    const NotificationDeliveryPreferencesFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationDeliveryPreferences" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferences" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "mobile" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" } },
                                ],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const UserSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "calendarHash" } },
                        { kind: "Field", name: { kind: "Name", value: "unsubscribedFrom" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationPreferences" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationDeliveryPreferences" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferences" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "subscribedToDPA" } },
                        { kind: "Field", name: { kind: "Name", value: "subscribedToChangelog" } },
                        { kind: "Field", name: { kind: "Name", value: "subscribedToInviteAccepted" } },
                        { kind: "Field", name: { kind: "Name", value: "subscribedToPrivacyLegalUpdates" } },
                        { kind: "Field", name: { kind: "Name", value: "subscribedToUnreadNotificationsReminder" } },
                        { kind: "Field", name: { kind: "Name", value: "showFullUserNames" } },
                    ],
                },
            },
        ],
    };
    const AuthenticationSessionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthenticationSession" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthenticationSession" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "client" } },
                        { kind: "Field", name: { kind: "Name", value: "countryCodes" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "location" } },
                        { kind: "Field", name: { kind: "Name", value: "ip" } },
                        { kind: "Field", name: { kind: "Name", value: "locationCity" } },
                        { kind: "Field", name: { kind: "Name", value: "locationCountryCode" } },
                        { kind: "Field", name: { kind: "Name", value: "locationCountry" } },
                        { kind: "Field", name: { kind: "Name", value: "locationRegionCode" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "operatingSystem" } },
                        { kind: "Field", name: { kind: "Name", value: "userAgent" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "browserType" } },
                        { kind: "Field", name: { kind: "Name", value: "lastActiveAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const IssueImportJqlCheckPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueImportJqlCheckPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportJqlCheckPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "error" } },
                        { kind: "Field", name: { kind: "Name", value: "count" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueImportSyncCheckPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueImportSyncCheckPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportSyncCheckPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "error" } },
                        { kind: "Field", name: { kind: "Name", value: "canSync" } },
                    ],
                },
            },
        ],
    };
    const ApiKeyFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ApiKey" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKey" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "label" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const PageInfoFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PageInfo" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PageInfo" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "startCursor" } },
                        { kind: "Field", name: { kind: "Name", value: "endCursor" } },
                        { kind: "Field", name: { kind: "Name", value: "hasPreviousPage" } },
                        { kind: "Field", name: { kind: "Name", value: "hasNextPage" } },
                    ],
                },
            },
        ],
    };
    const ApiKeyConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ApiKeyConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ApiKeyPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ApiKeyPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "apiKey" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const AsksChannelConnectPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AsksChannelConnectPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AsksChannelConnectPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "mapping" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelNameMapping" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "addBot" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const AttachmentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Attachment" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Attachment" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "sourceType" } },
                        { kind: "Field", name: { kind: "Name", value: "subtitle" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "groupBySource" } },
                        { kind: "Field", name: { kind: "Name", value: "source" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserCreator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const AttachmentConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AttachmentConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const AttachmentPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AttachmentPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const AttachmentSourcesPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AttachmentSourcesPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentSourcesPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "sources" } },
                    ],
                },
            },
        ],
    };
    const AuditEntryFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuditEntry" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntry" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "requestInformation" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "countryCode" } },
                        { kind: "Field", name: { kind: "Name", value: "ip" } },
                        { kind: "Field", name: { kind: "Name", value: "actorId" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const AuditEntryConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuditEntryConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntry" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const AuditEntryTypeFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuditEntryType" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryType" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const AuthApiKeyFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthApiKey" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthApiKey" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const AuthApiKeyPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthApiKeyPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthApiKeyPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "authApiKey" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthApiKey" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const AuthIntegrationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthIntegration" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthIntegration" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const AuthOauthClientFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthOauthClient" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOauthClient" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "redirectUris" } },
                        { kind: "Field", name: { kind: "Name", value: "developer" } },
                        { kind: "Field", name: { kind: "Name", value: "clientId" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "clientSecret" } },
                        { kind: "Field", name: { kind: "Name", value: "creatorId" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        { kind: "Field", name: { kind: "Name", value: "webhookResourceTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "webhookUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "webhookSecret" } },
                        { kind: "Field", name: { kind: "Name", value: "publicEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                    ],
                },
            },
        ],
    };
    const OauthTokenFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OauthToken" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthToken" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "client" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOauthClient" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "scope" } },
                        { kind: "Field", name: { kind: "Name", value: "clientId" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "revokedAt" } },
                    ],
                },
            },
        ],
    };
    const AuthOauthClientWithTokensFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthOauthClientWithTokens" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOauthClientWithTokens" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "client" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOauthClient" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "tokens" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthToken" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const AuthOrganizationBucketNamePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthOrganizationBucketNamePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganizationBucketNamePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "importsBucketName" } },
                        { kind: "Field", name: { kind: "Name", value: "region" } },
                        { kind: "Field", name: { kind: "Name", value: "uploadsBucketName" } },
                    ],
                },
            },
        ],
    };
    const AuthOrganizationDomainFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthOrganizationDomain" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganizationDomain" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "disableOrganizationCreation" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "authType" } },
                        { kind: "Field", name: { kind: "Name", value: "claimed" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        { kind: "Field", name: { kind: "Name", value: "verified" } },
                    ],
                },
            },
        ],
    };
    const AuthOrganizationExistsPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthOrganizationExistsPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganizationExistsPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                        { kind: "Field", name: { kind: "Name", value: "exists" } },
                    ],
                },
            },
        ],
    };
    const AuthOrganizationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthOrganizationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganizationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "authOrganization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const AuthResolverResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthResolverResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthResolverResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "token" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "lastUsedOrganizationId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "users" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lockedUsers" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lockedOrganizations" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "availableOrganizations" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "allowDomainAccess" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const AuthSuccessPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthSuccessPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthSuccessPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const AuthorizedApplicationBaseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthorizedApplicationBase" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthorizedApplicationBase" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "appId" } },
                        { kind: "Field", name: { kind: "Name", value: "clientId" } },
                        { kind: "Field", name: { kind: "Name", value: "scope" } },
                    ],
                },
            },
        ],
    };
    const ReactionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Reaction" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Reaction" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "emoji" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUser" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CommentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Comment" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Comment" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionData" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "resolvingComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentContent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUser" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "quotedText" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "resolvedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "editedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "resolvingUser" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CommentConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CommentConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CommentPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CommentPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ContactPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ContactPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ContactPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CreateCsvExportReportPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CreateCsvExportReportPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateCsvExportReportPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CreateOrJoinOrganizationResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ViewPreferencesValuesFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ViewPreferencesValues" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesValues" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "issueGrouping" } },
                        { kind: "Field", name: { kind: "Name", value: "viewOrdering" } },
                        { kind: "Field", name: { kind: "Name", value: "showCompletedIssues" } },
                    ],
                },
            },
        ],
    };
    const ViewPreferencesFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ViewPreferences" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferences" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "preferences" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "viewType" } },
                    ],
                },
            },
        ],
    };
    const CustomViewFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomView" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomView" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewPreferencesValues" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userViewPreferences" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "filterData" } },
                        { kind: "Field", name: { kind: "Name", value: "projectFilterData" } },
                        { kind: "Field", name: { kind: "Name", value: "filters" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "modelName" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationViewPreferences" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "updatedBy" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "owner" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "shared" } },
                    ],
                },
            },
        ],
    };
    const CustomViewConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomViewConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CustomViewHasSubscribersPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomViewHasSubscribersPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "hasSubscribers" } },
                    ],
                },
            },
        ],
    };
    const CustomViewPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomViewPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CustomViewSuggestionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomViewSuggestionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewSuggestionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                    ],
                },
            },
        ],
    };
    const CustomerNeedPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerNeedPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CustomerPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CustomerStatusPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerStatusPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CustomerTierPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerTierPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CycleFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Cycle" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Cycle" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "endsAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "number" } },
                        { kind: "Field", name: { kind: "Name", value: "progress" } },
                        { kind: "Field", name: { kind: "Name", value: "startsAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const CycleConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CycleConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CyclePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CyclePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CyclePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const DiaryEntryFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DiaryEntry" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DiaryEntry" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "date" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const DiaryEntryConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DiaryEntryConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DiaryEntryConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DiaryEntry" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const DocumentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Document" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Document" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "documentContentId" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "content" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastAppliedTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "hiddenAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "updatedBy" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const DocumentConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const DocumentContentHistoryTypeFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentContentHistoryType" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistoryType" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "actorIds" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "contentDataSnapshotAt" } },
                    ],
                },
            },
        ],
    };
    const DocumentContentHistoryPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentContentHistoryPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistoryPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "history" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentHistoryType" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const DocumentPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "document" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ArchiveResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ArchiveResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchiveResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "archive" } },
                        { kind: "Field", name: { kind: "Name", value: "totalCount" } },
                        { kind: "Field", name: { kind: "Name", value: "databaseVersion" } },
                        { kind: "Field", name: { kind: "Name", value: "includesDependencies" } },
                    ],
                },
            },
        ],
    };
    const DocumentSearchResultFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentSearchResult" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchResult" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "documentContentId" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "content" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastAppliedTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "hiddenAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "updatedBy" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const DocumentSearchPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentSearchPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "archivePayload" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "totalCount" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchResult" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const DocumentSearchResultConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentSearchResultConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchResultConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchResult" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const EmailIntakeAddressFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmailIntakeAddress" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddress" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "template" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "address" } },
                        { kind: "Field", name: { kind: "Name", value: "enabled" } },
                    ],
                },
            },
        ],
    };
    const EmailIntakeAddressPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmailIntakeAddressPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailIntakeAddress" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddress" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const EmailUnsubscribePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmailUnsubscribePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const EmailUserAccountAuthChallengeResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "authType" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const EmojiFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Emoji" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Emoji" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "source" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const EmojiConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmojiConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const EmojiPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmojiPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emoji" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const EntityExternalLinkFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EntityExternalLink" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLink" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "label" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const EntityExternalLinkConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EntityExternalLinkConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLink" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const EntityExternalLinkPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EntityExternalLinkPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entityExternalLink" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ExternalUserFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ExternalUser" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalUser" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSeen" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const ExternalUserConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ExternalUserConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalUserConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUser" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const FacetFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Facet" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Facet" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sourceInitiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "sourcePage" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sourceProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sourceTeam" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "targetCustomView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const FacetConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FacetConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FacetConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Facet" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const FavoriteFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Favorite" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Favorite" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "document" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmap" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "folderName" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "owner" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "initiativeTab" } },
                        { kind: "Field", name: { kind: "Name", value: "projectTab" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "predefinedViewTeam" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "predefinedViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectTeam" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const FavoriteConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FavoriteConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoriteConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const FavoritePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FavoritePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoritePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const FeatureFlagRolloutStageFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FeatureFlagRolloutStage" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FeatureFlagRolloutStage" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "segmentKeys" } },
                    ],
                },
            },
        ],
    };
    const FeatureFlagFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FeatureFlag" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FeatureFlag" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastStageUpdatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pendingRolloutStage" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FeatureFlagRolloutStage" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "rolloutStage" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FeatureFlagRolloutStage" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "key" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastStageUpdatedBy" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "externalUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "isEnabled" } },
                    ],
                },
            },
        ],
    };
    const FeatureFlagConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FeatureFlagConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FeatureFlagConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FeatureFlag" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const FeatureFlagRolloutStageConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FeatureFlagRolloutStageConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FeatureFlagRolloutStageConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FeatureFlagRolloutStage" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const FrontAttachmentPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FrontAttachmentPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FrontAttachmentPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const GitAutomationTargetBranchFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitAutomationTargetBranch" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranch" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "branchPattern" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "isRegex" } },
                    ],
                },
            },
        ],
    };
    const GitAutomationStateFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitAutomationState" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationState" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "state" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "event" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "targetBranch" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranch" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "branchPattern" } },
                    ],
                },
            },
        ],
    };
    const GitAutomationStateConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitAutomationStateConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationState" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const GitAutomationStatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitAutomationStatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitAutomationState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationState" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const GitAutomationTargetBranchPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitAutomationTargetBranchPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "targetBranch" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranch" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const GitHubCommitIntegrationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitHubCommitIntegrationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "webhookSecret" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const GitHubEnterpriseServerInstallVerificationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" },
                typeCondition: {
                    kind: "NamedType",
                    name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" },
                },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const GitHubEnterpriseServerPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitHubEnterpriseServerPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubEnterpriseServerPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "installUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "setupUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "webhookSecret" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const GitLabIntegrationCreatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitLabIntegrationCreatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitLabIntegrationCreatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "webhookSecret" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ImageUploadFromUrlPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ImageUploadFromUrlPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const InitiativeFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Initiative" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Initiative" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "targetDate" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "owner" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const InitiativeConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Initiative" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const InitiativeToProjectFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeToProject" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProject" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const InitiativeToProjectConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeToProjectConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProject" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IntegrationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Integration" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Integration" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "service" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IntegrationConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IntegrationHasScopesPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationHasScopesPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationHasScopesPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "missingScopes" } },
                        { kind: "Field", name: { kind: "Name", value: "hasAllScopes" } },
                    ],
                },
            },
        ],
    };
    const IntegrationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IntegrationRequestPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationRequestPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IntegrationTemplateFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationTemplate" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplate" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "foreignEntityId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "template" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const IntegrationTemplateConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationTemplateConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IntegrationTemplatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationTemplatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IntegrationsSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationsSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueNewComment" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueAddedToTriage" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueCreated" } },
                        { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreated" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueSlaHighRisk" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueSlaBreached" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueAddedToView" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedDone" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedAll" } },
                        { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToTeam" } },
                        { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToWorkspace" } },
                    ],
                },
            },
        ],
    };
    const IntegrationsSettingsConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationsSettingsConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettings" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IntegrationsSettingsPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationsSettingsPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationsSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Issue" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Issue" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionData" } },
                        { kind: "Field", name: { kind: "Name", value: "labelIds" } },
                        { kind: "Field", name: { kind: "Name", value: "integrationSourceType" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "identifier" } },
                        { kind: "Field", name: { kind: "Name", value: "priorityLabel" } },
                        { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } },
                        { kind: "Field", name: { kind: "Name", value: "branchName" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sourceComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "dueDate" } },
                        { kind: "Field", name: { kind: "Name", value: "estimate" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserCreator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "number" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastAppliedTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "boardOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } },
                        { kind: "Field", name: { kind: "Name", value: "triagedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "addedToCycleAt" } },
                        { kind: "Field", name: { kind: "Name", value: "addedToProjectAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaStartedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaBreachesAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "assignee" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "snoozedBy" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "state" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueBatchPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueBatchPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueBatchPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issues" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueDraftPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueDraftPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueDraftPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueFilterSuggestionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueFilterSuggestionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueFilterSuggestionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "filter" } },
                    ],
                },
            },
        ],
    };
    const IssueRelationHistoryPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueRelationHistoryPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationHistoryPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "identifier" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const UserFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "User" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "User" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "statusUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } },
                        { kind: "Field", name: { kind: "Name", value: "disableReason" } },
                        { kind: "Field", name: { kind: "Name", value: "avatarBackgroundColor" } },
                        { kind: "Field", name: { kind: "Name", value: "statusEmoji" } },
                        { kind: "Field", name: { kind: "Name", value: "initials" } },
                        { kind: "Field", name: { kind: "Name", value: "statusLabel" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSeen" } },
                        { kind: "Field", name: { kind: "Name", value: "timezone" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "inviteHash" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                        { kind: "Field", name: { kind: "Name", value: "guest" } },
                        { kind: "Field", name: { kind: "Name", value: "admin" } },
                        { kind: "Field", name: { kind: "Name", value: "isMe" } },
                        { kind: "Field", name: { kind: "Name", value: "calendarHash" } },
                    ],
                },
            },
        ],
    };
    const IssueImportFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueImport" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImport" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "progress" } },
                        { kind: "Field", name: { kind: "Name", value: "errorMetadata" } },
                        { kind: "Field", name: { kind: "Name", value: "csvFileUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "serviceMetadata" } },
                        { kind: "Field", name: { kind: "Name", value: "teamName" } },
                        { kind: "Field", name: { kind: "Name", value: "mapping" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "creatorId" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "service" } },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "error" } },
                    ],
                },
            },
        ],
    };
    const IssueLabelFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueLabel" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabel" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "isGroup" } },
                    ],
                },
            },
        ],
    };
    const IssueHistoryFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueHistory" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistory" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "relationChanges" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationHistoryPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "addedLabelIds" } },
                        { kind: "Field", name: { kind: "Name", value: "removedLabelIds" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actors" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromCycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toCycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "attachmentId" } },
                        { kind: "Field", name: { kind: "Name", value: "toCycleId" } },
                        { kind: "Field", name: { kind: "Name", value: "toParentId" } },
                        { kind: "Field", name: { kind: "Name", value: "toConvertedProjectId" } },
                        { kind: "Field", name: { kind: "Name", value: "toProjectId" } },
                        { kind: "Field", name: { kind: "Name", value: "toStateId" } },
                        { kind: "Field", name: { kind: "Name", value: "fromCycleId" } },
                        { kind: "Field", name: { kind: "Name", value: "fromParentId" } },
                        { kind: "Field", name: { kind: "Name", value: "fromProjectId" } },
                        { kind: "Field", name: { kind: "Name", value: "fromStateId" } },
                        { kind: "Field", name: { kind: "Name", value: "fromTeamId" } },
                        { kind: "Field", name: { kind: "Name", value: "toTeamId" } },
                        { kind: "Field", name: { kind: "Name", value: "fromAssigneeId" } },
                        { kind: "Field", name: { kind: "Name", value: "toAssigneeId" } },
                        { kind: "Field", name: { kind: "Name", value: "actorId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImport" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "addedLabels" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "removedLabels" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toConvertedProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromParent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toParent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromTeam" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toTeam" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toAssignee" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromAssignee" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibilityNotifiedUsers" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "fromDueDate" } },
                        { kind: "Field", name: { kind: "Name", value: "toDueDate" } },
                        { kind: "Field", name: { kind: "Name", value: "fromEstimate" } },
                        { kind: "Field", name: { kind: "Name", value: "toEstimate" } },
                        { kind: "Field", name: { kind: "Name", value: "fromPriority" } },
                        { kind: "Field", name: { kind: "Name", value: "toPriority" } },
                        { kind: "Field", name: { kind: "Name", value: "fromTitle" } },
                        { kind: "Field", name: { kind: "Name", value: "toTitle" } },
                        { kind: "Field", name: { kind: "Name", value: "archived" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchived" } },
                        { kind: "Field", name: { kind: "Name", value: "autoClosed" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedDescription" } },
                    ],
                },
            },
        ],
    };
    const IssueHistoryConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueHistoryConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistoryConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistory" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueImportCheckPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueImportCheckPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportCheckPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueImportDeletePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueImportDeletePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportDeletePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImport" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueImportPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueImportPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImport" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueLabelConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueLabelConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueLabelPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueLabelPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabel" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssuePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssuePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssuePriorityValueFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssuePriorityValue" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePriorityValue" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "label" } },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                    ],
                },
            },
        ],
    };
    const IssueRelationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueRelation" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelation" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "relatedIssue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const IssueRelationConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueRelationConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueRelationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueRelationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelation" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueSearchResultFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueSearchResult" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchResult" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionData" } },
                        { kind: "Field", name: { kind: "Name", value: "labelIds" } },
                        { kind: "Field", name: { kind: "Name", value: "integrationSourceType" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "identifier" } },
                        { kind: "Field", name: { kind: "Name", value: "priorityLabel" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } },
                        { kind: "Field", name: { kind: "Name", value: "branchName" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sourceComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "dueDate" } },
                        { kind: "Field", name: { kind: "Name", value: "estimate" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserCreator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "number" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastAppliedTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "boardOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } },
                        { kind: "Field", name: { kind: "Name", value: "triagedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "addedToCycleAt" } },
                        { kind: "Field", name: { kind: "Name", value: "addedToProjectAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaStartedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaBreachesAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "assignee" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "snoozedBy" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "state" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueSearchPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueSearchPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "archivePayload" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "totalCount" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchResult" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueSearchResultConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueSearchResultConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchResultConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchResult" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const LogoutResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "LogoutResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LogoutResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const NodeFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Node" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Node" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const NotificationBatchActionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationBatchActionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationBatchActionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notifications" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const NotificationConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const NotificationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notification" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const NotificationSubscriptionConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationSubscriptionConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const NotificationSubscriptionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationSubscriptionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscription" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const OauthClientFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OauthClient" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClient" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "redirectUris" } },
                        { kind: "Field", name: { kind: "Name", value: "developer" } },
                        { kind: "Field", name: { kind: "Name", value: "clientId" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "clientSecret" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "webhookResourceTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "webhookUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "webhookSecret" } },
                        { kind: "Field", name: { kind: "Name", value: "publicEnabled" } },
                    ],
                },
            },
        ],
    };
    const OauthClientConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OauthClientConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClient" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const OrganizationAcceptedOrExpiredInviteDetailsPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationAcceptedOrExpiredInviteDetailsPayload" },
                typeCondition: {
                    kind: "NamedType",
                    name: { kind: "Name", value: "OrganizationAcceptedOrExpiredInviteDetailsPayload" },
                },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                    ],
                },
            },
        ],
    };
    const OrganizationCancelDeletePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationCancelDeletePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const OrganizationDeletePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationDeletePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDeletePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const OrganizationExistsPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationExistsPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationExistsPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                        { kind: "Field", name: { kind: "Name", value: "exists" } },
                    ],
                },
            },
        ],
    };
    const OrganizationInviteFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationInvite" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvite" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "external" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "acceptedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "expiresAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "role" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "inviter" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "invitee" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const OrganizationInviteConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationInviteConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const OrganizationInviteFullDetailsPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationInviteFullDetailsPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteFullDetailsPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationName" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "inviter" } },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationLogoUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "role" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "accepted" } },
                        { kind: "Field", name: { kind: "Name", value: "expired" } },
                    ],
                },
            },
        ],
    };
    const OrganizationInviteLinkDetailsPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationInviteLinkDetailsPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteLinkDetailsPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationName" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationRegion" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationUrlKey" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationLogoUrl" } },
                    ],
                },
            },
        ],
    };
    const OrganizationInvitePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationInvitePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvitePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInvite" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const OrganizationMetaFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationMeta" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationMeta" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
                        { kind: "Field", name: { kind: "Name", value: "region" } },
                    ],
                },
            },
        ],
    };
    const OrganizationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const OrganizationRegionResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationRegionResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationRegionResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "region" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const OrganizationStartTrialPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationStartTrialPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationStartTrialPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const PasskeyLoginStartResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PasskeyLoginStartResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PasskeyLoginStartResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "options" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Project" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Project" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationsSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentContent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "targetDate" } },
                        { kind: "Field", name: { kind: "Name", value: "startDate" } },
                        { kind: "Field", name: { kind: "Name", value: "health" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastAppliedTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "progress" } },
                        { kind: "Field", name: { kind: "Name", value: "scope" } },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lead" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "convertedFromIssue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "content" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "status" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } },
                        { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } },
                        { kind: "Field", name: { kind: "Name", value: "state" } },
                    ],
                },
            },
        ],
    };
    const ProjectConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectFilterSuggestionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectFilterSuggestionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "filter" } },
                    ],
                },
            },
        ],
    };
    const ProjectHistoryFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectHistory" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectHistory" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "entries" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const ProjectHistoryConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectHistoryConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectHistoryConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectHistory" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectLinkFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectLink" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLink" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "label" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectLinkConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectLinkConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLink" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectLinkPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectLinkPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLink" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectMilestoneFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectMilestone" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestone" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentContent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "targetDate" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const ProjectMilestoneConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectMilestoneConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectMilestoneMoveIssueToTeamFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "teamId" } },
                    ],
                },
            },
        ],
    };
    const ProjectMilestoneMoveProjectTeamsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "projectId" } },
                        { kind: "Field", name: { kind: "Name", value: "teamIds" } },
                    ],
                },
            },
        ],
    };
    const ProjectMilestoneMovePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectMilestoneMovePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMovePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "previousIssueTeamIds" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "previousProjectTeamIds" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectMilestonePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectMilestonePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestonePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectRelationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectRelation" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelation" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "relatedProjectMilestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "relatedProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "anchorType" } },
                        { kind: "Field", name: { kind: "Name", value: "relatedAnchorType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const ProjectRelationConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectRelationConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectRelationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectRelationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectRelation" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectSearchResultFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectSearchResult" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchResult" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationsSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentContent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "targetDate" } },
                        { kind: "Field", name: { kind: "Name", value: "startDate" } },
                        { kind: "Field", name: { kind: "Name", value: "health" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastAppliedTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "progress" } },
                        { kind: "Field", name: { kind: "Name", value: "scope" } },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lead" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "convertedFromIssue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "content" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "status" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } },
                        { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } },
                        { kind: "Field", name: { kind: "Name", value: "state" } },
                    ],
                },
            },
        ],
    };
    const ProjectSearchPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectSearchPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "archivePayload" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "totalCount" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchResult" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectSearchResultConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectSearchResultConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchResultConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchResult" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectStatusConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectStatusConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectStatusCountPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectStatusCountPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusCountPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "count" } },
                    ],
                },
            },
        ],
    };
    const ProjectStatusPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectStatusPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "status" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectUpdateFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectUpdate" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdate" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionData" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "diffMarkdown" } },
                        { kind: "Field", name: { kind: "Name", value: "diff" } },
                        { kind: "Field", name: { kind: "Name", value: "health" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "editedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "isDiffHidden" } },
                    ],
                },
            },
        ],
    };
    const ProjectUpdateConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectUpdateConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectUpdateInteractionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectUpdateInteraction" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteraction" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectUpdateInteractionConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectUpdateInteractionConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteractionConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteraction" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectUpdateInteractionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectUpdateInteractionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteractionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdateInteraction" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectUpdatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectUpdatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectUpdateReminderPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectUpdateReminderPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateReminderPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectUpdateWithInteractionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectUpdateWithInteractionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateWithInteractionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "interaction" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const PushSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PushSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const PushSubscriptionConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PushSubscriptionConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscription" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const PushSubscriptionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PushSubscriptionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscription" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const PushSubscriptionTestPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PushSubscriptionTestPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionTestPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const RateLimitResultPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RateLimitResultPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitResultPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "period" } },
                        { kind: "Field", name: { kind: "Name", value: "remainingAmount" } },
                        { kind: "Field", name: { kind: "Name", value: "requestedAmount" } },
                        { kind: "Field", name: { kind: "Name", value: "reset" } },
                        { kind: "Field", name: { kind: "Name", value: "allowedAmount" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const RateLimitPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RateLimitPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "identifier" } },
                        { kind: "Field", name: { kind: "Name", value: "kind" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "limits" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitResultPayload" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ReactionConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ReactionConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ReactionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ReactionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reaction" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const RoadmapFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Roadmap" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Roadmap" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "owner" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const RoadmapConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RoadmapConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const RoadmapPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RoadmapPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmap" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const RoadmapToProjectFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RoadmapToProject" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProject" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmap" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const RoadmapToProjectConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RoadmapToProjectConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const RoadmapToProjectPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RoadmapToProjectPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapToProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const SlackChannelConnectPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SlackChannelConnectPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackChannelConnectPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "nudgeToConnectMainSlackIntegration" } },
                        { kind: "Field", name: { kind: "Name", value: "nudgeToUpdateMainSlackIntegration" } },
                        { kind: "Field", name: { kind: "Name", value: "addBot" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const SsoUrlFromEmailResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SsoUrlFromEmailResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "samlSsoUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const SuccessPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SuccessPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SuccessPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const SummaryPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SummaryPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SummaryPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "summary" } },
                    ],
                },
            },
        ],
    };
    const SynchronizedPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SynchronizedPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SynchronizedPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                    ],
                },
            },
        ],
    };
    const TeamFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Team" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Team" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignCompleted" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleLockToActive" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignStarted" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleCalenderUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "upcomingCycleCount" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCount" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivePeriod" } },
                        { kind: "Field", name: { kind: "Name", value: "autoClosePeriod" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationsSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "activeCycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibility" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "scimGroupName" } },
                        { kind: "Field", name: { kind: "Name", value: "autoCloseStateId" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleCooldownTime" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleStartDay" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "defaultTemplateForMembers" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "defaultTemplateForNonMembers" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "defaultProjectTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "defaultIssueState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "cycleDuration" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        { kind: "Field", name: { kind: "Name", value: "defaultTemplateForMembersId" } },
                        { kind: "Field", name: { kind: "Name", value: "defaultTemplateForNonMembersId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueEstimationType" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "key" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "timezone" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "mergeWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "draftWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "startWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "mergeableWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reviewWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "markedAsDuplicateWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageIssueState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "inviteHash" } },
                        { kind: "Field", name: { kind: "Name", value: "defaultIssueEstimate" } },
                        { kind: "Field", name: { kind: "Name", value: "setIssueSortOrderOnStateChange" } },
                        { kind: "Field", name: { kind: "Name", value: "requirePriorityToLeaveTriage" } },
                        { kind: "Field", name: { kind: "Name", value: "autoCloseChildIssues" } },
                        { kind: "Field", name: { kind: "Name", value: "autoCloseParentIssues" } },
                        { kind: "Field", name: { kind: "Name", value: "scimManaged" } },
                        { kind: "Field", name: { kind: "Name", value: "private" } },
                        { kind: "Field", name: { kind: "Name", value: "cyclesEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "issueEstimationExtended" } },
                        { kind: "Field", name: { kind: "Name", value: "issueEstimationAllowZero" } },
                        { kind: "Field", name: { kind: "Name", value: "groupIssueHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } },
                        { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } },
                        { kind: "Field", name: { kind: "Name", value: "triageEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "issueOrderingNoPriorityFirst" } },
                        { kind: "Field", name: { kind: "Name", value: "issueSortOrderDefaultToBottom" } },
                    ],
                },
            },
        ],
    };
    const TeamConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TeamMembershipFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamMembership" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembership" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "owner" } },
                    ],
                },
            },
        ],
    };
    const TeamMembershipConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamMembershipConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TeamMembershipPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamMembershipPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMembership" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const TeamPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const TemplateFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Template" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Template" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "templateData" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastUpdatedBy" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TemplateConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TemplateConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplateConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TemplatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TemplatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "template" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const TimeScheduleEntryFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TimeScheduleEntry" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleEntry" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        { kind: "Field", name: { kind: "Name", value: "userEmail" } },
                        { kind: "Field", name: { kind: "Name", value: "endsAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startsAt" } },
                    ],
                },
            },
        ],
    };
    const TimeScheduleFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TimeSchedule" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeSchedule" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "externalUrl" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "externalId" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entries" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeScheduleEntry" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const TimeScheduleConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TimeScheduleConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedule" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TimeSchedulePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TimeSchedulePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeSchedulePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeSchedule" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TriageResponsibilityManualSelectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TriageResponsibilityManualSelection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "userIds" } },
                    ],
                },
            },
        ],
    };
    const TriageResponsibilityFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TriageResponsibility" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibility" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "manualSelection" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "action" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeSchedule" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "currentUser" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TriageResponsibilityConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TriageResponsibilityConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibility" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TriageResponsibilityPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TriageResponsibilityPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibility" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const UploadFileHeaderFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UploadFileHeader" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFileHeader" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "key" } },
                        { kind: "Field", name: { kind: "Name", value: "value" } },
                    ],
                },
            },
        ],
    };
    const UploadFileFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UploadFile" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFile" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "assetUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "contentType" } },
                        { kind: "Field", name: { kind: "Name", value: "filename" } },
                        { kind: "Field", name: { kind: "Name", value: "uploadUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "size" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "headers" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFileHeader" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "metaData" } },
                    ],
                },
            },
        ],
    };
    const UploadPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UploadPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "uploadFile" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFile" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const UserAdminPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserAdminPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAdminPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const UserConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const UserPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const UserSettingsFlagPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserSettingsFlagPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "flag" } },
                        { kind: "Field", name: { kind: "Name", value: "value" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const UserSettingsFlagsResetPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserSettingsFlagsResetPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const UserSettingsPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserSettingsPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ViewPreferencesPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ViewPreferencesPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewPreferences" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const WebhookFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Webhook" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Webhook" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "secret" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "resourceTypes" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "label" } },
                        { kind: "Field", name: { kind: "Name", value: "allPublicTeams" } },
                        { kind: "Field", name: { kind: "Name", value: "enabled" } },
                    ],
                },
            },
        ],
    };
    const WebhookConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WebhookConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const WebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhook" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const WorkflowCronJobDefinitionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowCronJobDefinition" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowCronJobDefinition" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "activities" } },
                        { kind: "Field", name: { kind: "Name", value: "schedule" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "enabled" } },
                    ],
                },
            },
        ],
    };
    const WorkflowCronJobDefinitionConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowCronJobDefinitionConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowCronJobDefinitionConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowCronJobDefinition" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const WorkflowDefinitionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowDefinition" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowDefinition" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "activities" } },
                        { kind: "Field", name: { kind: "Name", value: "conditions" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "groupName" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "triggerType" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "trigger" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "enabled" } },
                    ],
                },
            },
        ],
    };
    const WorkflowDefinitionConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowDefinitionConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowDefinitionConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowDefinition" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const WorkflowStateFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowState" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowState" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "position" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const WorkflowStateConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowStateConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const WorkflowStatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowStatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const AdministrableTeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "administrableTeams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "administrableTeams" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
            ...TeamFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ApiKeysDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "apiKeys" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "apiKeys" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKeyConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ApiKeyConnectionFragmentDoc.definitions,
            ...ApiKeyFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ApplicationInfoDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "applicationInfo" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "applicationInfo" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "clientId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Application" } }],
                            },
                        },
                    ],
                },
            },
            ...ApplicationFragmentDoc.definitions,
        ],
    };
    const ApplicationWithAuthorizationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "applicationWithAuthorization" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "actor" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "ListType",
                                type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "applicationWithAuthorization" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "actor" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "actor" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "clientId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "scope" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAuthorizedApplication" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAuthorizedApplicationFragmentDoc.definitions,
        ],
    };
    const AttachmentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachment" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentFragmentDoc.definitions,
        ],
    };
    const AttachmentIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_AttachmentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_attachments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "attachments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
            ...AttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_BotActorDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_botActor" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "botActor" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ActorBotFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_ChildrenDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_children" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "children" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "comments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_HistoryDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_history" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "history" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueHistoryConnectionFragmentDoc.definitions,
            ...IssueHistoryFragmentDoc.definitions,
            ...IssueRelationHistoryPayloadFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_InverseRelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_inverseRelations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "inverseRelations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
            ...IssueRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_LabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_labels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "labels" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_RelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_relations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "relations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
            ...IssueRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_SubscribersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_subscribers" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "subscribers" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeDisabled" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachments" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
            ...AttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentsForUrlDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentsForURL" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentsForURL" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
            ...AttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AuditEntriesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "auditEntries" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "auditEntries" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...AuditEntryConnectionFragmentDoc.definitions,
            ...AuditEntryFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AuditEntryTypesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "auditEntryTypes" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "auditEntryTypes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryType" } }],
                            },
                        },
                    ],
                },
            },
            ...AuditEntryTypeFragmentDoc.definitions,
        ],
    };
    const AuthenticationSessionsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "authenticationSessions" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "authenticationSessions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthenticationSessionResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...AuthenticationSessionResponseFragmentDoc.definitions,
        ],
    };
    const AvailableUsersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "availableUsers" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "availableUsers" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...AuthResolverResponseFragmentDoc.definitions,
            ...AuthUserFragmentDoc.definitions,
            ...AuthOrganizationFragmentDoc.definitions,
        ],
    };
    const CommentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "comment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "hash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
        ],
    };
    const Comment_BotActorDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "comment_botActor" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "hash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "botActor" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ActorBotFragmentDoc.definitions,
        ],
    };
    const Comment_ChildrenDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "comment_children" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "hash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "children" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Comment_DocumentContentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "comment_documentContent" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "hash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "documentContent" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...DocumentContentFragmentDoc.definitions,
        ],
    };
    const CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comments" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CustomViewDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomViewFragmentDoc.definitions,
            ...ViewPreferencesValuesFragmentDoc.definitions,
            ...ViewPreferencesFragmentDoc.definitions,
        ],
    };
    const CustomView_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueSortInput" } } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "sort" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CustomView_OrganizationViewPreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView_organizationViewPreferences" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "organizationViewPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesFragmentDoc.definitions,
            ...ViewPreferencesValuesFragmentDoc.definitions,
        ],
    };
    const CustomView_OrganizationViewPreferences_PreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView_organizationViewPreferences_preferences" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "organizationViewPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "preferences" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesValuesFragmentDoc.definitions,
        ],
    };
    const CustomView_ProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView_projects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projects" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectConnectionFragmentDoc.definitions,
            ...ProjectFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CustomView_UserViewPreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView_userViewPreferences" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "userViewPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesFragmentDoc.definitions,
            ...ViewPreferencesValuesFragmentDoc.definitions,
        ],
    };
    const CustomView_UserViewPreferences_PreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView_userViewPreferences_preferences" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "userViewPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "preferences" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesValuesFragmentDoc.definitions,
        ],
    };
    const CustomView_ViewPreferencesValuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView_viewPreferencesValues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "viewPreferencesValues" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesValuesFragmentDoc.definitions,
        ],
    };
    const CustomViewHasSubscribersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customViewHasSubscribers" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customViewHasSubscribers" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CustomViewHasSubscribersPayloadFragmentDoc.definitions,
        ],
    };
    const CustomViewsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customViews" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customViews" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomViewConnectionFragmentDoc.definitions,
            ...CustomViewFragmentDoc.definitions,
            ...ViewPreferencesValuesFragmentDoc.definitions,
            ...ViewPreferencesFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CycleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "cycle" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }],
                            },
                        },
                    ],
                },
            },
            ...CycleFragmentDoc.definitions,
        ],
    };
    const Cycle_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "cycle_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Cycle_UncompletedIssuesUponCloseDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "cycle_uncompletedIssuesUponClose" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "uncompletedIssuesUponClose" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CyclesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "cycles" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycles" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...CycleConnectionFragmentDoc.definitions,
            ...CycleFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const DocumentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "document" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "document" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentFragmentDoc.definitions,
        ],
    };
    const Document_CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "document_comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "document" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "comments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const DocumentContentHistoryDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "documentContentHistory" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentContentHistory" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentHistoryPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentContentHistoryPayloadFragmentDoc.definitions,
            ...DocumentContentHistoryTypeFragmentDoc.definitions,
        ],
    };
    const DocumentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "documents" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "DocumentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documents" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentConnectionFragmentDoc.definitions,
            ...DocumentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const EmojiDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "emoji" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emoji" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }],
                            },
                        },
                    ],
                },
            },
            ...EmojiFragmentDoc.definitions,
        ],
    };
    const EmojisDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "emojis" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emojis" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...EmojiConnectionFragmentDoc.definitions,
            ...EmojiFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const EntityExternalLinkDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "entityExternalLink" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entityExternalLink" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLink" } }],
                            },
                        },
                    ],
                },
            },
            ...EntityExternalLinkFragmentDoc.definitions,
        ],
    };
    const ExternalUserDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "externalUser" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUser" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUser" } }],
                            },
                        },
                    ],
                },
            },
            ...ExternalUserFragmentDoc.definitions,
        ],
    };
    const ExternalUsersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "externalUsers" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUsers" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUserConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ExternalUserConnectionFragmentDoc.definitions,
            ...ExternalUserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const FavoriteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "favorite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }],
                            },
                        },
                    ],
                },
            },
            ...FavoriteFragmentDoc.definitions,
        ],
    };
    const Favorite_ChildrenDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "favorite_children" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "children" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...FavoriteConnectionFragmentDoc.definitions,
            ...FavoriteFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const FavoritesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "favorites" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorites" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...FavoriteConnectionFragmentDoc.definitions,
            ...FavoriteFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const InitiativeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiative" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Initiative" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeFragmentDoc.definitions,
        ],
    };
    const Initiative_LinksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiative_links" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "links" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkConnection" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...EntityExternalLinkConnectionFragmentDoc.definitions,
            ...EntityExternalLinkFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Initiative_ProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiative_projects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projects" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectConnectionFragmentDoc.definitions,
            ...ProjectFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const InitiativeToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiativeToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeToProject" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProject" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeToProjectFragmentDoc.definitions,
        ],
    };
    const InitiativeToProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiativeToProjects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeToProjects" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeToProjectConnectionFragmentDoc.definitions,
            ...InitiativeToProjectFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const InitiativesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiatives" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiatives" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeConnectionFragmentDoc.definitions,
            ...InitiativeFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IntegrationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "integration" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationFragmentDoc.definitions,
        ],
    };
    const IntegrationHasScopesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "integrationHasScopes" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "scopes" } },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "ListType",
                                type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationHasScopes" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "integrationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "scopes" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "scopes" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationHasScopesPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationHasScopesPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationTemplateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "integrationTemplate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationTemplate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationTemplateFragmentDoc.definitions,
        ],
    };
    const IntegrationTemplatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "integrationTemplates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationTemplates" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplateConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationTemplateConnectionFragmentDoc.definitions,
            ...IntegrationTemplateFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IntegrationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "integrations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrations" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationConnectionFragmentDoc.definitions,
            ...IntegrationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IntegrationsSettingsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "integrationsSettings" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationsSettings" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettings" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationsSettingsFragmentDoc.definitions,
        ],
    };
    const IssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
        ],
    };
    const Issue_AttachmentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_attachments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "attachments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
            ...AttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_BotActorDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_botActor" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "botActor" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ActorBotFragmentDoc.definitions,
        ],
    };
    const Issue_ChildrenDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_children" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "children" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "comments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_HistoryDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_history" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "history" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueHistoryConnectionFragmentDoc.definitions,
            ...IssueHistoryFragmentDoc.definitions,
            ...IssueRelationHistoryPayloadFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_InverseRelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_inverseRelations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "inverseRelations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
            ...IssueRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_LabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_labels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "labels" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_RelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_relations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "relations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
            ...IssueRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_SubscribersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_subscribers" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "subscribers" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeDisabled" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueFigmaFileKeySearchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueFigmaFileKeySearch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "fileKey" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueFigmaFileKeySearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "fileKey" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "fileKey" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueFilterSuggestionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueFilterSuggestion" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "prompt" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueFilterSuggestion" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "projectId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "prompt" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "prompt" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueFilterSuggestionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueFilterSuggestionPayloadFragmentDoc.definitions,
        ],
    };
    const IssueImportCheckCsvDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueImportCheckCSV" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "service" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCheckCSV" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "csvUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "service" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "service" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportCheckPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportCheckPayloadFragmentDoc.definitions,
        ],
    };
    const IssueImportCheckSyncDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueImportCheckSync" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCheckSync" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueImportId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportSyncCheckPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportSyncCheckPayloadFragmentDoc.definitions,
        ],
    };
    const IssueImportJqlCheckDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueImportJqlCheck" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jql" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportJqlCheck" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraEmail" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraHostname" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraProject" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jql" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jql" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportJqlCheckPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportJqlCheckPayloadFragmentDoc.definitions,
        ],
    };
    const IssueLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelFragmentDoc.definitions,
        ],
    };
    const IssueLabel_ChildrenDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueLabel_children" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "children" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueLabel_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueLabel_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueLabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueLabels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabels" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssuePriorityValuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issuePriorityValues" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issuePriorityValues" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePriorityValue" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePriorityValueFragmentDoc.definitions,
        ],
    };
    const IssueRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelation" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationFragmentDoc.definitions,
        ],
    };
    const IssueRelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueRelations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelations" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
            ...IssueRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueSearchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueSearch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "query" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "query" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "query" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_AttachmentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_attachments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "attachments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
            ...AttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_BotActorDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_botActor" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "botActor" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ActorBotFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_ChildrenDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_children" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "children" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "comments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_HistoryDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_history" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "history" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueHistoryConnectionFragmentDoc.definitions,
            ...IssueHistoryFragmentDoc.definitions,
            ...IssueRelationHistoryPayloadFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_InverseRelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_inverseRelations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "inverseRelations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
            ...IssueRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_LabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_labels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "labels" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_RelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_relations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "relations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
            ...IssueRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_SubscribersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_subscribers" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "subscribers" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeDisabled" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueSortInput" } } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issues" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "sort" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const NotificationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "notification" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notification" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
        ],
    };
    const NotificationSubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "notificationSubscription" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscription" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationSubscriptionFragmentDoc.definitions,
        ],
    };
    const NotificationSubscriptionsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "notificationSubscriptions" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscriptions" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionConnection" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationSubscriptionConnectionFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const NotificationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "notifications" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "NotificationFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notifications" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationConnectionFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const OrganizationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Organization" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationFragmentDoc.definitions,
            ...OrganizationIpRestrictionFragmentDoc.definitions,
            ...ProjectStatusFragmentDoc.definitions,
            ...PaidSubscriptionFragmentDoc.definitions,
        ],
    };
    const Organization_IntegrationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_integrations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "integrations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IntegrationConnectionFragmentDoc.definitions,
            ...IntegrationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Organization_LabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_labels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "labels" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Organization_SubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_subscription" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "subscription" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PaidSubscription" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...PaidSubscriptionFragmentDoc.definitions,
        ],
    };
    const Organization_TeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_teams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teams" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
            ...TeamFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Organization_TemplatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_templates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "templates" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TemplateConnectionFragmentDoc.definitions,
            ...TemplateFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Organization_UsersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_users" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "users" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeDisabled" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const OrganizationExistsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organizationExists" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "urlKey" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationExists" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "urlKey" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "urlKey" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationExistsPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationExistsPayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationInviteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organizationInvite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInvite" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationInviteFragmentDoc.definitions,
        ],
    };
    const OrganizationInvitesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organizationInvites" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInvites" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInviteConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationInviteConnectionFragmentDoc.definitions,
            ...OrganizationInviteFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
        ],
    };
    const Project_CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "comments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_DocumentContentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_documentContent" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "documentContent" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...DocumentContentFragmentDoc.definitions,
        ],
    };
    const Project_DocumentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_documents" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "DocumentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "documents" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...DocumentConnectionFragmentDoc.definitions,
            ...DocumentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_ExternalLinksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_externalLinks" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "externalLinks" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkConnection" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...EntityExternalLinkConnectionFragmentDoc.definitions,
            ...EntityExternalLinkFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_HistoryDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_history" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "history" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectHistoryConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectHistoryConnectionFragmentDoc.definitions,
            ...ProjectHistoryFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_InitiativesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_initiatives" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "initiatives" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...InitiativeConnectionFragmentDoc.definitions,
            ...InitiativeFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_LinksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_links" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "links" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectLinkConnectionFragmentDoc.definitions,
            ...ProjectLinkFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_MembersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_members" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "members" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeDisabled" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_ProjectMilestonesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_projectMilestones" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projectMilestones" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneConnection" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectMilestoneConnectionFragmentDoc.definitions,
            ...ProjectMilestoneFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_ProjectUpdatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_projectUpdates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projectUpdates" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdateConnectionFragmentDoc.definitions,
            ...ProjectUpdateFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_TeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_teams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teams" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
            ...TeamFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectFilterSuggestionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectFilterSuggestion" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "prompt" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectFilterSuggestion" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "prompt" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "prompt" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectFilterSuggestionPayloadFragmentDoc.definitions,
        ],
    };
    const ProjectLinkDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectLink" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLink" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLink" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectLinkFragmentDoc.definitions,
        ],
    };
    const ProjectLinksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectLinks" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLinks" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectLinkConnectionFragmentDoc.definitions,
            ...ProjectLinkFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectMilestoneDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectMilestone" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectMilestoneFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
        ],
    };
    const ProjectMilestone_DocumentContentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectMilestone_documentContent" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "documentContent" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...DocumentContentFragmentDoc.definitions,
        ],
    };
    const ProjectMilestone_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectMilestone_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectMilestonesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectMilestones" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestones" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectMilestoneConnectionFragmentDoc.definitions,
            ...ProjectMilestoneFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectRelation" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectRelationFragmentDoc.definitions,
        ],
    };
    const ProjectRelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectRelations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectRelations" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectRelationConnectionFragmentDoc.definitions,
            ...ProjectRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectStatus" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectStatus" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectStatusFragmentDoc.definitions,
        ],
    };
    const ProjectStatusesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectStatuses" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectStatuses" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectStatusConnectionFragmentDoc.definitions,
            ...ProjectStatusFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdateFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
        ],
    };
    const ProjectUpdate_CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectUpdate_comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "comments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectUpdateInteractionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectUpdateInteraction" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdateInteraction" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteraction" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdateInteractionFragmentDoc.definitions,
        ],
    };
    const ProjectUpdateInteractionsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectUpdateInteractions" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdateInteractions" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteractionConnection" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdateInteractionConnectionFragmentDoc.definitions,
            ...ProjectUpdateInteractionFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectUpdatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectUpdates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdates" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdateConnectionFragmentDoc.definitions,
            ...ProjectUpdateFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projects" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectConnectionFragmentDoc.definitions,
            ...ProjectFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const PushSubscriptionTestDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "pushSubscriptionTest" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sendStrategy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "SendStrategy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "targetMobile" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pushSubscriptionTest" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "sendStrategy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "sendStrategy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "targetMobile" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "targetMobile" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionTestPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...PushSubscriptionTestPayloadFragmentDoc.definitions,
        ],
    };
    const RateLimitStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "rateLimitStatus" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "rateLimitStatus" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...RateLimitPayloadFragmentDoc.definitions,
            ...RateLimitResultPayloadFragmentDoc.definitions,
        ],
    };
    const RoadmapDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "roadmap" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmap" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapFragmentDoc.definitions,
        ],
    };
    const Roadmap_ProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "roadmap_projects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmap" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projects" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectConnectionFragmentDoc.definitions,
            ...ProjectFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const RoadmapToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "roadmapToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapToProject" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapToProjectFragmentDoc.definitions,
        ],
    };
    const RoadmapToProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "roadmapToProjects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapToProjects" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapToProjectConnectionFragmentDoc.definitions,
            ...RoadmapToProjectFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const RoadmapsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "roadmaps" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmaps" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapConnectionFragmentDoc.definitions,
            ...RoadmapFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const SearchDocumentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "searchDocuments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Float" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "searchDocuments" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeComments" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "snippetSize" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "term" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "term" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentSearchPayloadFragmentDoc.definitions,
            ...ArchiveResponseFragmentDoc.definitions,
            ...DocumentSearchResultFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const SearchDocuments_ArchivePayloadDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "searchDocuments_archivePayload" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Float" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "searchDocuments" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeComments" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "snippetSize" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "term" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "term" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "archivePayload" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ArchiveResponseFragmentDoc.definitions,
        ],
    };
    const SearchIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "searchIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Float" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "searchIssues" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeComments" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "snippetSize" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "term" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "term" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueSearchPayloadFragmentDoc.definitions,
            ...ArchiveResponseFragmentDoc.definitions,
            ...IssueSearchResultFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const SearchIssues_ArchivePayloadDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "searchIssues_archivePayload" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Float" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "searchIssues" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeComments" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "snippetSize" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "term" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "term" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "archivePayload" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ArchiveResponseFragmentDoc.definitions,
        ],
    };
    const SearchProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "searchProjects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Float" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "searchProjects" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeComments" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "snippetSize" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "term" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "term" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectSearchPayloadFragmentDoc.definitions,
            ...ArchiveResponseFragmentDoc.definitions,
            ...ProjectSearchResultFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const SearchProjects_ArchivePayloadDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "searchProjects_archivePayload" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Float" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "searchProjects" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeComments" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "snippetSize" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "snippetSize" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "term" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "term" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "archivePayload" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ArchiveResponseFragmentDoc.definitions,
        ],
    };
    const SsoUrlFromEmailDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "ssoUrlFromEmail" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "email" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "ssoUrlFromEmail" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "email" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "email" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "isDesktop" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...SsoUrlFromEmailResponseFragmentDoc.definitions,
        ],
    };
    const TeamDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamFragmentDoc.definitions,
        ],
    };
    const Team_CyclesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_cycles" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "cycles" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CycleConnectionFragmentDoc.definitions,
            ...CycleFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_GitAutomationStatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_gitAutomationStates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "gitAutomationStates" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStateConnection" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...GitAutomationStateConnectionFragmentDoc.definitions,
            ...GitAutomationStateFragmentDoc.definitions,
            ...GitAutomationTargetBranchFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_LabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_labels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "labels" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_MembersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_members" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "members" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeDisabled" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_MembershipsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_memberships" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "memberships" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipConnectionFragmentDoc.definitions,
            ...TeamMembershipFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_ProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_projects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projects" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectConnectionFragmentDoc.definitions,
            ...ProjectFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_StatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_states" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "states" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStateConnectionFragmentDoc.definitions,
            ...WorkflowStateFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_TemplatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_templates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "templates" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TemplateConnectionFragmentDoc.definitions,
            ...TemplateFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_WebhooksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_webhooks" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "webhooks" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...WebhookConnectionFragmentDoc.definitions,
            ...WebhookFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const TeamMembershipDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "teamMembership" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMembership" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipFragmentDoc.definitions,
        ],
    };
    const TeamMembershipsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "teamMemberships" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMemberships" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipConnectionFragmentDoc.definitions,
            ...TeamMembershipFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const TeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "teams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teams" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
            ...TeamFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const TemplateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "template" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "template" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
                            },
                        },
                    ],
                },
            },
            ...TemplateFragmentDoc.definitions,
        ],
    };
    const TemplatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "templates" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "templates" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
                            },
                        },
                    ],
                },
            },
            ...TemplateFragmentDoc.definitions,
        ],
    };
    const TemplatesForIntegrationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "templatesForIntegration" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "integrationType" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "templatesForIntegration" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "integrationType" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "integrationType" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
                            },
                        },
                    ],
                },
            },
            ...TemplateFragmentDoc.definitions,
        ],
    };
    const TimeScheduleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "timeSchedule" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeSchedule" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedule" } }],
                            },
                        },
                    ],
                },
            },
            ...TimeScheduleFragmentDoc.definitions,
            ...TimeScheduleEntryFragmentDoc.definitions,
        ],
    };
    const TimeSchedulesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "timeSchedules" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeSchedules" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeScheduleConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...TimeScheduleConnectionFragmentDoc.definitions,
            ...TimeScheduleFragmentDoc.definitions,
            ...TimeScheduleEntryFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const TriageResponsibilitiesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "triageResponsibilities" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibilities" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...TriageResponsibilityConnectionFragmentDoc.definitions,
            ...TriageResponsibilityFragmentDoc.definitions,
            ...TriageResponsibilityManualSelectionFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const TriageResponsibilityDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "triageResponsibility" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibility" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibility" } }],
                            },
                        },
                    ],
                },
            },
            ...TriageResponsibilityFragmentDoc.definitions,
            ...TriageResponsibilityManualSelectionFragmentDoc.definitions,
        ],
    };
    const TriageResponsibility_ManualSelectionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "triageResponsibility_manualSelection" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibility" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "manualSelection" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TriageResponsibilityManualSelectionFragmentDoc.definitions,
        ],
    };
    const UserDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                    ],
                },
            },
            ...UserFragmentDoc.definitions,
        ],
    };
    const User_AssignedIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user_assignedIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "assignedIssues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const User_CreatedIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user_createdIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "createdIssues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const User_TeamMembershipsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user_teamMemberships" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teamMemberships" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipConnectionFragmentDoc.definitions,
            ...TeamMembershipFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const User_TeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user_teams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teams" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
            ...TeamFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const UserSettingsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettings" } }],
                            },
                        },
                    ],
                },
            },
            ...UserSettingsFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesChannelFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesScheduleFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferences" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesChannelFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesScheduleFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_MobileDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "FragmentSpread",
                                                                name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesChannelFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesScheduleFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "FragmentSpread",
                                                                            name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesScheduleFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_friday" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "Field",
                                                                            name: { kind: "Name", value: "friday" },
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [
                                                                                    {
                                                                                        kind: "FragmentSpread",
                                                                                        name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_monday" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "Field",
                                                                            name: { kind: "Name", value: "monday" },
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [
                                                                                    {
                                                                                        kind: "FragmentSpread",
                                                                                        name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_saturday" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "Field",
                                                                            name: { kind: "Name", value: "saturday" },
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [
                                                                                    {
                                                                                        kind: "FragmentSpread",
                                                                                        name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_sunday" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "Field",
                                                                            name: { kind: "Name", value: "sunday" },
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [
                                                                                    {
                                                                                        kind: "FragmentSpread",
                                                                                        name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_thursday" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "Field",
                                                                            name: { kind: "Name", value: "thursday" },
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [
                                                                                    {
                                                                                        kind: "FragmentSpread",
                                                                                        name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_tuesday" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "Field",
                                                                            name: { kind: "Name", value: "tuesday" },
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [
                                                                                    {
                                                                                        kind: "FragmentSpread",
                                                                                        name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_wednesday" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "Field",
                                                                            name: { kind: "Name", value: "wednesday" },
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [
                                                                                    {
                                                                                        kind: "FragmentSpread",
                                                                                        name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UsersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "users" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "users" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeDisabled" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const VerifyGitHubEnterpriseServerInstallationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "verifyGitHubEnterpriseServerInstallation" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "verifyGitHubEnterpriseServerInstallation" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "FragmentSpread",
                                        name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...GitHubEnterpriseServerInstallVerificationPayloadFragmentDoc.definitions,
        ],
    };
    const ViewerDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                    ],
                },
            },
            ...UserFragmentDoc.definitions,
        ],
    };
    const Viewer_AssignedIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer_assignedIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "assignedIssues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Viewer_CreatedIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer_createdIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "createdIssues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Viewer_TeamMembershipsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer_teamMemberships" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teamMemberships" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipConnectionFragmentDoc.definitions,
            ...TeamMembershipFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Viewer_TeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer_teams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teams" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
            ...TeamFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const WebhookDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "webhook" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhook" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }],
                            },
                        },
                    ],
                },
            },
            ...WebhookFragmentDoc.definitions,
        ],
    };
    const WebhooksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "webhooks" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhooks" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...WebhookConnectionFragmentDoc.definitions,
            ...WebhookFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const WorkflowStateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "workflowState" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowState" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStateFragmentDoc.definitions,
        ],
    };
    const WorkflowState_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "workflowState_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowState" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const WorkflowStatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "workflowStates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowStates" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStateConnectionFragmentDoc.definitions,
            ...WorkflowStateFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AirbyteIntegrationConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "airbyteIntegrationConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "AirbyteConfigurationInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "airbyteIntegrationConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveAttachmentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveAttachment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateAttachmentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createAttachment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteAttachmentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteAttachment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkDiscordDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkDiscord" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "channelId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "messageId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkDiscord" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "channelId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "channelId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "messageId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "messageId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkFrontDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkFront" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkFront" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "conversationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FrontAttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...FrontAttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkGitHubIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkGitHubIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkGitHubIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkGitHubPrDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkGitHubPR" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "number" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Float" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "owner" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "repo" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkGitHubPR" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "number" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "number" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "owner" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "owner" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "repo" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "repo" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkGitLabMrDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkGitLabMR" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "number" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Float" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "projectPathWithNamespace" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkGitLabMR" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "number" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "number" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "projectPathWithNamespace" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "projectPathWithNamespace" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkIntercomDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkIntercom" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkIntercom" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "conversationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkJiraIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkJiraIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkJiraIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraIssueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkSlackDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkSlack" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "channel" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "latest" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "syncToCommentThread" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "ts" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkSlack" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "channel" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "channel" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "latest" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "latest" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "syncToCommentThread" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "syncToCommentThread" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "ts" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "ts" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkUrlDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkURL" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkURL" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkZendeskDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkZendesk" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "ticketId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkZendesk" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "ticketId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "ticketId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentSyncToSlackDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentSyncToSlack" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentSyncToSlack" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateAttachmentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateAttachment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const CreateCommentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createComment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CommentCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "commentCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteCommentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteComment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "commentDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const CommentResolveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "commentResolve" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "resolvingCommentId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "commentResolve" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "resolvingCommentId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "resolvingCommentId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentPayloadFragmentDoc.definitions,
        ],
    };
    const CommentUnresolveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "commentUnresolve" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "commentUnresolve" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateCommentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateComment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CommentUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "commentUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentPayloadFragmentDoc.definitions,
        ],
    };
    const CreateContactDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createContact" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ContactCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "contactCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ContactPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ContactPayloadFragmentDoc.definitions,
        ],
    };
    const CreateCsvExportReportDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createCsvExportReport" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } },
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "createCsvExportReport" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includePrivateTeamIds" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateCsvExportReportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CreateCsvExportReportPayloadFragmentDoc.definitions,
        ],
    };
    const CreateOrganizationFromOnboardingDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createOrganizationFromOnboarding" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CreateOrganizationInput" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "survey" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "OnboardingCustomerSurvey" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "createOrganizationFromOnboarding" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "survey" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "survey" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
            ...AuthOrganizationFragmentDoc.definitions,
            ...AuthUserFragmentDoc.definitions,
        ],
    };
    const CreateProjectUpdateReminderDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createProjectUpdateReminder" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "createProjectUpdateReminder" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "projectId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "userId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateReminderPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdateReminderPayloadFragmentDoc.definitions,
        ],
    };
    const CreateCustomViewDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createCustomView" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customViewCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomViewPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteCustomViewDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteCustomView" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customViewDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateCustomViewDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateCustomView" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customViewUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomViewPayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveCycleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveCycle" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycleArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CycleArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateCycleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createCycle" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleCreateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycleCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CyclePayloadFragmentDoc.definitions,
        ],
    };
    const CycleShiftAllDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "cycleShiftAll" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CycleShiftAllInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycleShiftAll" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CyclePayloadFragmentDoc.definitions,
        ],
    };
    const CycleStartUpcomingCycleTodayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "cycleStartUpcomingCycleToday" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycleStartUpcomingCycleToday" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CyclePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateCycleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateCycle" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleUpdateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycleUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CyclePayloadFragmentDoc.definitions,
        ],
    };
    const CreateDocumentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createDocument" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "DocumentCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteDocumentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteDocument" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveDocumentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveDocument" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateDocumentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateDocument" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "DocumentUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentPayloadFragmentDoc.definitions,
        ],
    };
    const CreateEmailIntakeAddressDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createEmailIntakeAddress" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailIntakeAddressCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EmailIntakeAddressPayloadFragmentDoc.definitions,
            ...EmailIntakeAddressFragmentDoc.definitions,
        ],
    };
    const DeleteEmailIntakeAddressDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteEmailIntakeAddress" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailIntakeAddressDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const EmailIntakeAddressRotateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "emailIntakeAddressRotate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailIntakeAddressRotate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EmailIntakeAddressPayloadFragmentDoc.definitions,
            ...EmailIntakeAddressFragmentDoc.definitions,
        ],
    };
    const UpdateEmailIntakeAddressDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateEmailIntakeAddress" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailIntakeAddressUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EmailIntakeAddressPayloadFragmentDoc.definitions,
            ...EmailIntakeAddressFragmentDoc.definitions,
        ],
    };
    const EmailTokenUserAccountAuthDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "emailTokenUserAccountAuth" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailTokenUserAccountAuth" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...AuthResolverResponseFragmentDoc.definitions,
            ...AuthUserFragmentDoc.definitions,
            ...AuthOrganizationFragmentDoc.definitions,
        ],
    };
    const EmailUnsubscribeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "emailUnsubscribe" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribeInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailUnsubscribe" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailUnsubscribePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EmailUnsubscribePayloadFragmentDoc.definitions,
        ],
    };
    const EmailUserAccountAuthChallengeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "emailUserAccountAuthChallenge" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailUserAccountAuthChallenge" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...EmailUserAccountAuthChallengeResponseFragmentDoc.definitions,
        ],
    };
    const CreateEmojiDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createEmoji" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmojiCreateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emojiCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EmojiPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteEmojiDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteEmoji" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emojiDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const CreateEntityExternalLinkDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createEntityExternalLink" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entityExternalLinkCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EntityExternalLinkPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteEntityExternalLinkDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteEntityExternalLink" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entityExternalLinkDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateEntityExternalLinkDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateEntityExternalLink" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entityExternalLinkUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EntityExternalLinkPayloadFragmentDoc.definitions,
        ],
    };
    const CreateFavoriteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createFavorite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favoriteCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...FavoritePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteFavoriteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteFavorite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favoriteDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateFavoriteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateFavorite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favoriteUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...FavoritePayloadFragmentDoc.definitions,
        ],
    };
    const FileUploadDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "fileUpload" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filename" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "makePublic" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "size" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fileUpload" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "contentType" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filename" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filename" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "makePublic" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "makePublic" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "metaData" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "size" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "size" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UploadPayloadFragmentDoc.definitions,
            ...UploadFileFragmentDoc.definitions,
            ...UploadFileHeaderFragmentDoc.definitions,
        ],
    };
    const CreateGitAutomationStateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createGitAutomationState" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitAutomationStateCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...GitAutomationStatePayloadFragmentDoc.definitions,
            ...GitAutomationStateFragmentDoc.definitions,
            ...GitAutomationTargetBranchFragmentDoc.definitions,
        ],
    };
    const DeleteGitAutomationStateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteGitAutomationState" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitAutomationStateDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateGitAutomationStateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateGitAutomationState" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitAutomationStateUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...GitAutomationStatePayloadFragmentDoc.definitions,
            ...GitAutomationStateFragmentDoc.definitions,
            ...GitAutomationTargetBranchFragmentDoc.definitions,
        ],
    };
    const CreateGitAutomationTargetBranchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createGitAutomationTargetBranch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitAutomationTargetBranchCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...GitAutomationTargetBranchPayloadFragmentDoc.definitions,
            ...GitAutomationTargetBranchFragmentDoc.definitions,
        ],
    };
    const DeleteGitAutomationTargetBranchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteGitAutomationTargetBranch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitAutomationTargetBranchDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateGitAutomationTargetBranchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateGitAutomationTargetBranch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitAutomationTargetBranchUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...GitAutomationTargetBranchPayloadFragmentDoc.definitions,
            ...GitAutomationTargetBranchFragmentDoc.definitions,
        ],
    };
    const GoogleUserAccountAuthDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "googleUserAccountAuth" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "GoogleUserAccountAuthInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "googleUserAccountAuth" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...AuthResolverResponseFragmentDoc.definitions,
            ...AuthUserFragmentDoc.definitions,
            ...AuthOrganizationFragmentDoc.definitions,
        ],
    };
    const ImageUploadFromUrlDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "imageUploadFromUrl" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "imageUploadFromUrl" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ImageUploadFromUrlPayloadFragmentDoc.definitions,
        ],
    };
    const ImportFileUploadDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "importFileUpload" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filename" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "size" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "importFileUpload" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "contentType" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filename" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filename" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "metaData" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "size" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "size" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UploadPayloadFragmentDoc.definitions,
            ...UploadFileFragmentDoc.definitions,
            ...UploadFileHeaderFragmentDoc.definitions,
        ],
    };
    const ArchiveInitiativeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveInitiative" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateInitiativeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createInitiative" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteInitiativeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteInitiative" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const CreateInitiativeToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createInitiativeToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeToProjectCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeToProjectPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteInitiativeToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteInitiativeToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeToProjectDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateInitiativeToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateInitiativeToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeToProjectUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeToProjectPayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveInitiativeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveInitiative" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateInitiativeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateInitiative" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativePayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveIntegrationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveIntegration" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationAsksConnectChannelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationAsksConnectChannel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationAsksConnectChannel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AsksChannelConnectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AsksChannelConnectPayloadFragmentDoc.definitions,
            ...SlackChannelNameMappingFragmentDoc.definitions,
            ...SlackAsksTeamSettingsFragmentDoc.definitions,
        ],
    };
    const DeleteIntegrationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteIntegration" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationDiscordDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationDiscord" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationDiscord" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationFigmaDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationFigma" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationFigma" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationFrontDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationFront" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationFront" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGitHubEnterpriseServerConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGitHubEnterpriseServerConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "githubUrl" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "organizationName" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGitHubEnterpriseServerConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "githubUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "githubUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "organizationName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "organizationName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubEnterpriseServerPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...GitHubEnterpriseServerPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGitHubPersonalDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGitHubPersonal" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGitHubPersonal" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const CreateIntegrationGithubCommitDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createIntegrationGithubCommit" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGithubCommitCreate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...GitHubCommitIntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGithubConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGithubConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGithubConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "installationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGithubImportConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGithubImportConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGithubImportConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "installationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGitlabConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGitlabConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGitlabConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "accessToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "gitlabUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitLabIntegrationCreatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...GitLabIntegrationCreatePayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGoogleSheetsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGoogleSheets" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGoogleSheets" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationIntercomDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationIntercom" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationIntercom" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "domainUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteIntegrationIntercomDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteIntegrationIntercom" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationIntercomDelete" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateIntegrationIntercomSettingsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateIntegrationIntercomSettings" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IntercomSettingsInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationIntercomSettingsUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationJiraPersonalDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationJiraPersonal" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationJiraPersonal" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "accessToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationLoomDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationLoom" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationLoom" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationRequestDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationRequest" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationRequest" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationRequestPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationRequestPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSentryConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSentryConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSentryConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "installationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "organizationSlug" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlack" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlack" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "shouldUseV2Auth" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackAsksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackAsks" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackAsks" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackCustomViewNotificationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackCustomViewNotifications" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "customViewId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackCustomViewNotifications" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "customViewId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "customViewId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...SlackChannelConnectPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackImportEmojisDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackImportEmojis" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackImportEmojis" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackOrgProjectUpdatesPostDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...SlackChannelConnectPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackPersonalDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackPersonal" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackPersonal" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackPostDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackPost" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackPost" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "shouldUseV2Auth" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...SlackChannelConnectPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackProjectPostDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackProjectPost" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "service" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackProjectPost" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "projectId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "service" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "service" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...SlackChannelConnectPayloadFragmentDoc.definitions,
        ],
    };
    const CreateIntegrationTemplateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createIntegrationTemplate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationTemplateCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationTemplatePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteIntegrationTemplateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteIntegrationTemplate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationTemplateDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationZendeskDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationZendesk" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationZendesk" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "scope" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "subdomain" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const CreateIntegrationsSettingsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createIntegrationsSettings" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationsSettingsCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationsSettingsPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateIntegrationsSettingsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateIntegrationsSettings" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationsSettingsUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationsSettingsPayloadFragmentDoc.definitions,
        ],
    };
    const IssueAddLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueAddLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueAddLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "labelId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "trash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "trash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "trash" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateIssueBatchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateIssueBatch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "ids" } },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "ListType",
                                type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UUID" } } },
                            },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueBatchUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "ids" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "ids" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueBatchPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueBatchPayloadFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
        ],
    };
    const CreateIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueCreateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "permanentlyDelete" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "permanentlyDelete" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "permanentlyDelete" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueArchivePayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveIssueDraftDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveIssueDraft" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueDraftArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueDraftArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueDraftArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateIssueDraftDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createIssueDraft" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueDraftCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueDraftCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueDraftPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueDraftPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteIssueDraftDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteIssueDraft" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueDraftDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateIssueDraftDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateIssueDraft" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueDraftUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueDraftUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueDraftPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueDraftPayloadFragmentDoc.definitions,
        ],
    };
    const IssueImportCreateAsanaDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportCreateAsana" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCreateAsana" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "asanaTeamName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "asanaToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeClosedIssues" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "instantProcess" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "organizationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const IssueImportCreateCsvJiraDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportCreateCSVJira" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCreateCSVJira" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "csvUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraEmail" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraHostname" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "organizationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const IssueImportCreateClubhouseDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportCreateClubhouse" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseGroupName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCreateClubhouse" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "clubhouseGroupName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "clubhouseGroupName" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "clubhouseToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeClosedIssues" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "instantProcess" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "organizationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const IssueImportCreateGithubDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportCreateGithub" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "githubLabels" } },
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "githubRepoIds" } },
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "githubShouldImportOrgProjects" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCreateGithub" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "githubLabels" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "githubLabels" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "githubRepoIds" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "githubRepoIds" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "githubShouldImportOrgProjects" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "githubShouldImportOrgProjects" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeClosedIssues" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "instantProcess" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "integrationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "organizationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const IssueImportCreateJiraDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportCreateJira" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jql" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCreateJira" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeClosedIssues" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "instantProcess" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraEmail" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraHostname" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraProject" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jql" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jql" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "organizationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const DeleteIssueImportDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteIssueImport" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueImportId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportDeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportDeletePayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const IssueImportProcessDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportProcess" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "mapping" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "JSONObject" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportProcess" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueImportId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "mapping" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "mapping" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const UpdateIssueImportDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateIssueImport" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueImportUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const CreateIssueLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createIssueLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelCreateInput" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabelCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "replaceTeamLabels" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteIssueLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteIssueLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabelDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateIssueLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateIssueLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelUpdateInput" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabelUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "replaceTeamLabels" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelPayloadFragmentDoc.definitions,
        ],
    };
    const CreateIssueRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createIssueRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationCreateInput" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "overrideCreatedAt" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelationCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "overrideCreatedAt" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "overrideCreatedAt" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteIssueRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteIssueRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelationDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateIssueRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateIssueRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelationUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationPayloadFragmentDoc.definitions,
        ],
    };
    const IssueReminderDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueReminder" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueReminder" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "reminderAt" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const IssueRemoveLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueRemoveLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRemoveLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "labelId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const IssueSubscribeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueSubscribe" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueSubscribe" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "userId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueArchivePayloadFragmentDoc.definitions,
        ],
    };
    const IssueUnsubscribeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueUnsubscribe" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueUnsubscribe" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "userId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const JoinOrganizationFromOnboardingDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "joinOrganizationFromOnboarding" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "JoinOrganizationInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "joinOrganizationFromOnboarding" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
            ...AuthOrganizationFragmentDoc.definitions,
            ...AuthUserFragmentDoc.definitions,
        ],
    };
    const LeaveOrganizationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "leaveOrganization" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "leaveOrganization" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "organizationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
            ...AuthOrganizationFragmentDoc.definitions,
            ...AuthUserFragmentDoc.definitions,
        ],
    };
    const LogoutDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "logout" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "logout" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...LogoutResponseFragmentDoc.definitions,
        ],
    };
    const LogoutAllSessionsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "logoutAllSessions" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "logoutAllSessions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...LogoutResponseFragmentDoc.definitions,
        ],
    };
    const LogoutOtherSessionsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "logoutOtherSessions" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "logoutOtherSessions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...LogoutResponseFragmentDoc.definitions,
        ],
    };
    const LogoutSessionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "logoutSession" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sessionId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "logoutSession" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "sessionId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "sessionId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...LogoutResponseFragmentDoc.definitions,
        ],
    };
    const ArchiveNotificationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveNotification" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationArchivePayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
        ],
    };
    const NotificationArchiveAllDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationArchiveAll" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationArchiveAll" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationBatchActionPayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
        ],
    };
    const NotificationMarkReadAllDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationMarkReadAll" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "readAt" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationMarkReadAll" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "readAt" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "readAt" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationBatchActionPayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
        ],
    };
    const NotificationMarkUnreadAllDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationMarkUnreadAll" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationMarkUnreadAll" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationBatchActionPayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
        ],
    };
    const NotificationSnoozeAllDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationSnoozeAll" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "snoozedUntilAt" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSnoozeAll" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "snoozedUntilAt" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "snoozedUntilAt" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationBatchActionPayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
        ],
    };
    const CreateNotificationSubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createNotificationSubscription" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscriptionCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationSubscriptionPayloadFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
        ],
    };
    const DeleteNotificationSubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteNotificationSubscription" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscriptionDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateNotificationSubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateNotificationSubscription" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscriptionUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationSubscriptionPayloadFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
        ],
    };
    const UnarchiveNotificationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveNotification" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationArchivePayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
        ],
    };
    const NotificationUnsnoozeAllDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationUnsnoozeAll" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "unsnoozedAt" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationUnsnoozeAll" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "unsnoozedAt" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "unsnoozedAt" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationBatchActionPayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
        ],
    };
    const UpdateNotificationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateNotification" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationPayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
        ],
    };
    const DeleteOrganizationCancelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteOrganizationCancel" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationCancelDelete" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...OrganizationCancelDeletePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteOrganizationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteOrganization" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "DeleteOrganizationInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationDeletePayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationDeleteChallengeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "organizationDeleteChallenge" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationDeleteChallenge" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationDeletePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteOrganizationDomainDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteOrganizationDomain" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationDomainDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const CreateOrganizationInviteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createOrganizationInvite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInviteCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationInvitePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteOrganizationInviteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteOrganizationInvite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInviteDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateOrganizationInviteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateOrganizationInvite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInviteUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationInvitePayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationStartTrialDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "organizationStartTrial" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationStartTrial" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationStartTrialPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationStartTrialPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateOrganizationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateOrganization" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationPayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "trash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "trash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "trash" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "connectSlackChannel" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "connectSlackChannel" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "connectSlackChannel" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateProjectLinkDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createProjectLink" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLinkCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectLinkPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteProjectLinkDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteProjectLink" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLinkDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateProjectLinkDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateProjectLink" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLinkUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLinkUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLinkPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectLinkPayloadFragmentDoc.definitions,
        ],
    };
    const CreateProjectMilestoneDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createProjectMilestone" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestoneCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectMilestonePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteProjectMilestoneDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteProjectMilestone" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestoneDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateProjectMilestoneDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateProjectMilestone" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestoneUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectMilestonePayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveProjectStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveProjectStatus" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectStatusArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectStatusArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateProjectStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createProjectStatus" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectStatusCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectStatusPayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveProjectStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveProjectStatus" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectStatusUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectStatusArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateProjectStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateProjectStatus" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectStatusUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectStatusPayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectPayloadFragmentDoc.definitions,
        ],
    };
    const CreateProjectUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createProjectUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdateCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdatePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteProjectUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteProjectUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdateDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const CreateProjectUpdateInteractionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createProjectUpdateInteraction" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInteractionCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdateInteractionCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateInteractionPayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdateInteractionPayloadFragmentDoc.definitions,
        ],
    };
    const ProjectUpdateMarkAsReadDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "projectUpdateMarkAsRead" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdateMarkAsRead" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateWithInteractionPayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdateWithInteractionPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateProjectUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateProjectUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdateUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdatePayloadFragmentDoc.definitions,
        ],
    };
    const CreatePushSubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createPushSubscription" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pushSubscriptionCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...PushSubscriptionPayloadFragmentDoc.definitions,
            ...PushSubscriptionFragmentDoc.definitions,
        ],
    };
    const DeletePushSubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deletePushSubscription" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pushSubscriptionDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...PushSubscriptionPayloadFragmentDoc.definitions,
            ...PushSubscriptionFragmentDoc.definitions,
        ],
    };
    const CreateReactionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createReaction" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ReactionCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactionCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ReactionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ReactionPayloadFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
        ],
    };
    const DeleteReactionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteReaction" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactionDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const RefreshGoogleSheetsDataDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "refreshGoogleSheetsData" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "refreshGoogleSheetsData" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const ResendOrganizationInviteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "resendOrganizationInvite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "resendOrganizationInvite" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveRoadmapDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveRoadmap" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateRoadmapDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createRoadmap" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteRoadmapDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteRoadmap" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const CreateRoadmapToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createRoadmapToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapToProjectCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapToProjectPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteRoadmapToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteRoadmapToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapToProjectDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateRoadmapToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateRoadmapToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapToProjectUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapToProjectPayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveRoadmapDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveRoadmap" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateRoadmapDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateRoadmap" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapPayloadFragmentDoc.definitions,
        ],
    };
    const SamlTokenUserAccountAuthDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "samlTokenUserAccountAuth" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "samlTokenUserAccountAuth" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...AuthResolverResponseFragmentDoc.definitions,
            ...AuthUserFragmentDoc.definitions,
            ...AuthOrganizationFragmentDoc.definitions,
        ],
    };
    const CreateTeamDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createTeam" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamCreateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "copySettingsFromTeamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteTeamCyclesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteTeamCycles" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamCyclesDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteTeamDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteTeam" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteTeamKeyDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteTeamKey" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamKeyDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const CreateTeamMembershipDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createTeamMembership" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMembershipCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteTeamMembershipDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteTeamMembership" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMembershipDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateTeamMembershipDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateTeamMembership" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMembershipUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipPayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveTeamDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveTeam" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateTeamDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateTeam" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamUpdateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamPayloadFragmentDoc.definitions,
        ],
    };
    const CreateTemplateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createTemplate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TemplateCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "templateCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TemplatePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteTemplateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteTemplate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "templateDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateTemplateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateTemplate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TemplateUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "templateUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TemplatePayloadFragmentDoc.definitions,
        ],
    };
    const CreateTimeScheduleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createTimeSchedule" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeScheduleCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TimeSchedulePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteTimeScheduleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteTimeSchedule" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeScheduleDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const TimeScheduleRefreshIntegrationScheduleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "timeScheduleRefreshIntegrationSchedule" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeScheduleRefreshIntegrationSchedule" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TimeSchedulePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateTimeScheduleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateTimeSchedule" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeScheduleUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TimeSchedulePayloadFragmentDoc.definitions,
        ],
    };
    const TimeScheduleUpsertExternalDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "timeScheduleUpsertExternal" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "externalId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeScheduleUpsertExternal" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "externalId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "externalId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TimeSchedulePayloadFragmentDoc.definitions,
        ],
    };
    const CreateTriageResponsibilityDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createTriageResponsibility" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibilityCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TriageResponsibilityPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteTriageResponsibilityDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteTriageResponsibility" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibilityDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateTriageResponsibilityDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateTriageResponsibility" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibilityUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TriageResponsibilityPayloadFragmentDoc.definitions,
        ],
    };
    const UserDemoteAdminDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userDemoteAdmin" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userDemoteAdmin" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UserDemoteMemberDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userDemoteMember" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userDemoteMember" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UserDiscordConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userDiscordConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userDiscordConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserPayloadFragmentDoc.definitions,
        ],
    };
    const UserExternalUserDisconnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userExternalUserDisconnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "service" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userExternalUserDisconnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "service" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "service" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateUserFlagDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateUserFlag" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "flag" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "operation" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagUpdateOperation" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userFlagUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "flag" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "flag" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "operation" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "operation" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserSettingsFlagPayloadFragmentDoc.definitions,
        ],
    };
    const UserPromoteAdminDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userPromoteAdmin" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userPromoteAdmin" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UserPromoteMemberDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userPromoteMember" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userPromoteMember" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UserSettingsFlagsResetDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userSettingsFlagsReset" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "flags" } },
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettingsFlagsReset" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "flags" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "flags" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserSettingsFlagsResetPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateUserSettingsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateUserSettings" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettingsUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserSettingsPayloadFragmentDoc.definitions,
        ],
    };
    const SuspendUserDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "suspendUser" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSuspend" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UnsuspendUserDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unsuspendUser" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userUnsuspend" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateUserDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateUser" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserUpdateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserPayloadFragmentDoc.definitions,
        ],
    };
    const CreateViewPreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createViewPreferences" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewPreferencesCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesPayloadFragmentDoc.definitions,
            ...ViewPreferencesFragmentDoc.definitions,
            ...ViewPreferencesValuesFragmentDoc.definitions,
        ],
    };
    const DeleteViewPreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteViewPreferences" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewPreferencesDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateViewPreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateViewPreferences" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewPreferencesUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesPayloadFragmentDoc.definitions,
            ...ViewPreferencesFragmentDoc.definitions,
            ...ViewPreferencesValuesFragmentDoc.definitions,
        ],
    };
    const CreateWebhookDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createWebhook" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "WebhookCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhookCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...WebhookPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteWebhookDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteWebhook" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhookDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateWebhookDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateWebhook" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "WebhookUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhookUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...WebhookPayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveWorkflowStateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveWorkflowState" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowStateArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStateArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateWorkflowStateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createWorkflowState" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowStateCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStatePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateWorkflowStateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateWorkflowState" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowStateUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStatePayloadFragmentDoc.definitions,
        ],
    };

    var _generated_documents = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get AuthenticationSessionType () { return AuthenticationSessionType; },
        get ContextViewType () { return ContextViewType; },
        get CustomerStatusType () { return CustomerStatusType; },
        get DateResolutionType () { return DateResolutionType; },
        get Day () { return Day; },
        get FacetPageSource () { return FacetPageSource; },
        get FeatureFlagRolloutStageType () { return FeatureFlagRolloutStageType; },
        get GitAutomationStates () { return GitAutomationStates; },
        get GithubOrgType () { return GithubOrgType; },
        get InitiativeStatus () { return InitiativeStatus; },
        get InitiativeTab () { return InitiativeTab; },
        get IntegrationService () { return IntegrationService; },
        get IssueRelationType () { return IssueRelationType; },
        get OAuthClientApprovalStatus () { return OAuthClientApprovalStatus; },
        get OrganizationDomainAuthType () { return OrganizationDomainAuthType; },
        get OrganizationInviteStatus () { return OrganizationInviteStatus; },
        get PaginationNulls () { return PaginationNulls; },
        get PaginationOrderBy () { return PaginationOrderBy; },
        get PaginationSortOrder () { return PaginationSortOrder; },
        get ProjectStatusType () { return ProjectStatusType; },
        get ProjectTab () { return ProjectTab; },
        get ProjectUpdateHealthType () { return ProjectUpdateHealthType; },
        get ProjectUpdateReminderFrequency () { return ProjectUpdateReminderFrequency; },
        get PullRequestIssueLinkType () { return PullRequestIssueLinkType; },
        get PullRequestReviewerDecision () { return PullRequestReviewerDecision; },
        get PullRequestStatus () { return PullRequestStatus; },
        get PushSubscriptionType () { return PushSubscriptionType; },
        get ReleaseChannel () { return ReleaseChannel; },
        get SLADayCountType () { return SLADayCountType; },
        get SchemaFieldType () { return SchemaFieldType; },
        get SendStrategy () { return SendStrategy; },
        get SlaStatus () { return SlaStatus; },
        get SlackChannelType () { return SlackChannelType; },
        get TriageResponsibilityAction () { return TriageResponsibilityAction; },
        get UserContextViewType () { return UserContextViewType; },
        get UserFlagType () { return UserFlagType; },
        get UserFlagUpdateOperation () { return UserFlagUpdateOperation; },
        get UserRoleType () { return UserRoleType; },
        get ViewPreferencesType () { return ViewPreferencesType; },
        get ViewType () { return ViewType; },
        get WorkflowTrigger () { return WorkflowTrigger; },
        get WorkflowTriggerType () { return WorkflowTriggerType; },
        get WorkflowType () { return WorkflowType; },
        EntityFragmentDoc: EntityFragmentDoc,
        CommentNotificationFragmentDoc: CommentNotificationFragmentDoc,
        CustomViewNotificationSubscriptionFragmentDoc: CustomViewNotificationSubscriptionFragmentDoc,
        CycleNotificationSubscriptionFragmentDoc: CycleNotificationSubscriptionFragmentDoc,
        DocumentContentFragmentDoc: DocumentContentFragmentDoc,
        DocumentContentHistoryFragmentDoc: DocumentContentHistoryFragmentDoc,
        DraftFragmentDoc: DraftFragmentDoc,
        AttachmentArchivePayloadFragmentDoc: AttachmentArchivePayloadFragmentDoc,
        CycleArchivePayloadFragmentDoc: CycleArchivePayloadFragmentDoc,
        DeletePayloadFragmentDoc: DeletePayloadFragmentDoc,
        DocumentArchivePayloadFragmentDoc: DocumentArchivePayloadFragmentDoc,
        InitiativeArchivePayloadFragmentDoc: InitiativeArchivePayloadFragmentDoc,
        IssueArchivePayloadFragmentDoc: IssueArchivePayloadFragmentDoc,
        IssueDraftArchivePayloadFragmentDoc: IssueDraftArchivePayloadFragmentDoc,
        ActorBotFragmentDoc: ActorBotFragmentDoc,
        DocumentNotificationFragmentDoc: DocumentNotificationFragmentDoc,
        InitiativeNotificationFragmentDoc: InitiativeNotificationFragmentDoc,
        NotificationSubscriptionFragmentDoc: NotificationSubscriptionFragmentDoc,
        IssueNotificationFragmentDoc: IssueNotificationFragmentDoc,
        OauthClientApprovalFragmentDoc: OauthClientApprovalFragmentDoc,
        OauthClientApprovalNotificationFragmentDoc: OauthClientApprovalNotificationFragmentDoc,
        ProjectNotificationFragmentDoc: ProjectNotificationFragmentDoc,
        NotificationFragmentDoc: NotificationFragmentDoc,
        NotificationArchivePayloadFragmentDoc: NotificationArchivePayloadFragmentDoc,
        ProjectArchivePayloadFragmentDoc: ProjectArchivePayloadFragmentDoc,
        ProjectStatusArchivePayloadFragmentDoc: ProjectStatusArchivePayloadFragmentDoc,
        RoadmapArchivePayloadFragmentDoc: RoadmapArchivePayloadFragmentDoc,
        TeamArchivePayloadFragmentDoc: TeamArchivePayloadFragmentDoc,
        WorkflowStateArchivePayloadFragmentDoc: WorkflowStateArchivePayloadFragmentDoc,
        ArchivePayloadFragmentDoc: ArchivePayloadFragmentDoc,
        LabelNotificationSubscriptionFragmentDoc: LabelNotificationSubscriptionFragmentDoc,
        ProjectNotificationSubscriptionFragmentDoc: ProjectNotificationSubscriptionFragmentDoc,
        ReminderFragmentDoc: ReminderFragmentDoc,
        TeamNotificationSubscriptionFragmentDoc: TeamNotificationSubscriptionFragmentDoc,
        UserAccountFragmentDoc: UserAccountFragmentDoc,
        UserNotificationSubscriptionFragmentDoc: UserNotificationSubscriptionFragmentDoc,
        AuthOrganizationFragmentDoc: AuthOrganizationFragmentDoc,
        AuthUserFragmentDoc: AuthUserFragmentDoc,
        AuthEmailIntakeAddressFragmentDoc: AuthEmailIntakeAddressFragmentDoc,
        InitiativeNotificationSubscriptionFragmentDoc: InitiativeNotificationSubscriptionFragmentDoc,
        AuthOrganizationInviteFragmentDoc: AuthOrganizationInviteFragmentDoc,
        OrganizationIpRestrictionFragmentDoc: OrganizationIpRestrictionFragmentDoc,
        ProjectStatusFragmentDoc: ProjectStatusFragmentDoc,
        PaidSubscriptionFragmentDoc: PaidSubscriptionFragmentDoc,
        OrganizationFragmentDoc: OrganizationFragmentDoc,
        AuthOauthClientWithScopeFragmentDoc: AuthOauthClientWithScopeFragmentDoc,
        AuthOauthClientWithMembershipsFragmentDoc: AuthOauthClientWithMembershipsFragmentDoc,
        AuthenticationSessionResponseFragmentDoc: AuthenticationSessionResponseFragmentDoc,
        OrganizationDomainFragmentDoc: OrganizationDomainFragmentDoc,
        WebhookFailureEventFragmentDoc: WebhookFailureEventFragmentDoc,
        UserAuthorizedApplicationFragmentDoc: UserAuthorizedApplicationFragmentDoc,
        ApplicationFragmentDoc: ApplicationFragmentDoc,
        PasskeyFragmentDoc: PasskeyFragmentDoc,
        SharedSlackSettingsFragmentDoc: SharedSlackSettingsFragmentDoc,
        FrontSettingsFragmentDoc: FrontSettingsFragmentDoc,
        GitHubRepoMappingFragmentDoc: GitHubRepoMappingFragmentDoc,
        GitHubRepoFragmentDoc: GitHubRepoFragmentDoc,
        GitHubSettingsFragmentDoc: GitHubSettingsFragmentDoc,
        GitHubImportSettingsFragmentDoc: GitHubImportSettingsFragmentDoc,
        GitHubPersonalSettingsFragmentDoc: GitHubPersonalSettingsFragmentDoc,
        GitLabSettingsFragmentDoc: GitLabSettingsFragmentDoc,
        GoogleSheetsSettingsFragmentDoc: GoogleSheetsSettingsFragmentDoc,
        IntercomSettingsFragmentDoc: IntercomSettingsFragmentDoc,
        JiraProjectDataFragmentDoc: JiraProjectDataFragmentDoc,
        JiraLinearMappingFragmentDoc: JiraLinearMappingFragmentDoc,
        JiraSettingsFragmentDoc: JiraSettingsFragmentDoc,
        JiraPersonalSettingsFragmentDoc: JiraPersonalSettingsFragmentDoc,
        LaunchDarklySettingsFragmentDoc: LaunchDarklySettingsFragmentDoc,
        NotionSettingsFragmentDoc: NotionSettingsFragmentDoc,
        OpsgenieSettingsFragmentDoc: OpsgenieSettingsFragmentDoc,
        PagerDutySettingsFragmentDoc: PagerDutySettingsFragmentDoc,
        SentrySettingsFragmentDoc: SentrySettingsFragmentDoc,
        SlackSettingsFragmentDoc: SlackSettingsFragmentDoc,
        SlackAsksTeamSettingsFragmentDoc: SlackAsksTeamSettingsFragmentDoc,
        SlackChannelNameMappingFragmentDoc: SlackChannelNameMappingFragmentDoc,
        SlackAsksSettingsFragmentDoc: SlackAsksSettingsFragmentDoc,
        SlackPostSettingsFragmentDoc: SlackPostSettingsFragmentDoc,
        ZendeskSettingsFragmentDoc: ZendeskSettingsFragmentDoc,
        IntegrationSettingsFragmentDoc: IntegrationSettingsFragmentDoc,
        InitiativePayloadFragmentDoc: InitiativePayloadFragmentDoc,
        InitiativeToProjectPayloadFragmentDoc: InitiativeToProjectPayloadFragmentDoc,
        NotificationDeliveryPreferencesDayFragmentDoc: NotificationDeliveryPreferencesDayFragmentDoc,
        NotificationDeliveryPreferencesScheduleFragmentDoc: NotificationDeliveryPreferencesScheduleFragmentDoc,
        NotificationDeliveryPreferencesChannelFragmentDoc: NotificationDeliveryPreferencesChannelFragmentDoc,
        NotificationDeliveryPreferencesFragmentDoc: NotificationDeliveryPreferencesFragmentDoc,
        UserSettingsFragmentDoc: UserSettingsFragmentDoc,
        AuthenticationSessionFragmentDoc: AuthenticationSessionFragmentDoc,
        IssueImportJqlCheckPayloadFragmentDoc: IssueImportJqlCheckPayloadFragmentDoc,
        IssueImportSyncCheckPayloadFragmentDoc: IssueImportSyncCheckPayloadFragmentDoc,
        ApiKeyFragmentDoc: ApiKeyFragmentDoc,
        PageInfoFragmentDoc: PageInfoFragmentDoc,
        ApiKeyConnectionFragmentDoc: ApiKeyConnectionFragmentDoc,
        ApiKeyPayloadFragmentDoc: ApiKeyPayloadFragmentDoc,
        AsksChannelConnectPayloadFragmentDoc: AsksChannelConnectPayloadFragmentDoc,
        AttachmentFragmentDoc: AttachmentFragmentDoc,
        AttachmentConnectionFragmentDoc: AttachmentConnectionFragmentDoc,
        AttachmentPayloadFragmentDoc: AttachmentPayloadFragmentDoc,
        AttachmentSourcesPayloadFragmentDoc: AttachmentSourcesPayloadFragmentDoc,
        AuditEntryFragmentDoc: AuditEntryFragmentDoc,
        AuditEntryConnectionFragmentDoc: AuditEntryConnectionFragmentDoc,
        AuditEntryTypeFragmentDoc: AuditEntryTypeFragmentDoc,
        AuthApiKeyFragmentDoc: AuthApiKeyFragmentDoc,
        AuthApiKeyPayloadFragmentDoc: AuthApiKeyPayloadFragmentDoc,
        AuthIntegrationFragmentDoc: AuthIntegrationFragmentDoc,
        AuthOauthClientFragmentDoc: AuthOauthClientFragmentDoc,
        OauthTokenFragmentDoc: OauthTokenFragmentDoc,
        AuthOauthClientWithTokensFragmentDoc: AuthOauthClientWithTokensFragmentDoc,
        AuthOrganizationBucketNamePayloadFragmentDoc: AuthOrganizationBucketNamePayloadFragmentDoc,
        AuthOrganizationDomainFragmentDoc: AuthOrganizationDomainFragmentDoc,
        AuthOrganizationExistsPayloadFragmentDoc: AuthOrganizationExistsPayloadFragmentDoc,
        AuthOrganizationPayloadFragmentDoc: AuthOrganizationPayloadFragmentDoc,
        AuthResolverResponseFragmentDoc: AuthResolverResponseFragmentDoc,
        AuthSuccessPayloadFragmentDoc: AuthSuccessPayloadFragmentDoc,
        AuthorizedApplicationBaseFragmentDoc: AuthorizedApplicationBaseFragmentDoc,
        ReactionFragmentDoc: ReactionFragmentDoc,
        CommentFragmentDoc: CommentFragmentDoc,
        CommentConnectionFragmentDoc: CommentConnectionFragmentDoc,
        CommentPayloadFragmentDoc: CommentPayloadFragmentDoc,
        ContactPayloadFragmentDoc: ContactPayloadFragmentDoc,
        CreateCsvExportReportPayloadFragmentDoc: CreateCsvExportReportPayloadFragmentDoc,
        CreateOrJoinOrganizationResponseFragmentDoc: CreateOrJoinOrganizationResponseFragmentDoc,
        ViewPreferencesValuesFragmentDoc: ViewPreferencesValuesFragmentDoc,
        ViewPreferencesFragmentDoc: ViewPreferencesFragmentDoc,
        CustomViewFragmentDoc: CustomViewFragmentDoc,
        CustomViewConnectionFragmentDoc: CustomViewConnectionFragmentDoc,
        CustomViewHasSubscribersPayloadFragmentDoc: CustomViewHasSubscribersPayloadFragmentDoc,
        CustomViewPayloadFragmentDoc: CustomViewPayloadFragmentDoc,
        CustomViewSuggestionPayloadFragmentDoc: CustomViewSuggestionPayloadFragmentDoc,
        CustomerNeedPayloadFragmentDoc: CustomerNeedPayloadFragmentDoc,
        CustomerPayloadFragmentDoc: CustomerPayloadFragmentDoc,
        CustomerStatusPayloadFragmentDoc: CustomerStatusPayloadFragmentDoc,
        CustomerTierPayloadFragmentDoc: CustomerTierPayloadFragmentDoc,
        CycleFragmentDoc: CycleFragmentDoc,
        CycleConnectionFragmentDoc: CycleConnectionFragmentDoc,
        CyclePayloadFragmentDoc: CyclePayloadFragmentDoc,
        DiaryEntryFragmentDoc: DiaryEntryFragmentDoc,
        DiaryEntryConnectionFragmentDoc: DiaryEntryConnectionFragmentDoc,
        DocumentFragmentDoc: DocumentFragmentDoc,
        DocumentConnectionFragmentDoc: DocumentConnectionFragmentDoc,
        DocumentContentHistoryTypeFragmentDoc: DocumentContentHistoryTypeFragmentDoc,
        DocumentContentHistoryPayloadFragmentDoc: DocumentContentHistoryPayloadFragmentDoc,
        DocumentPayloadFragmentDoc: DocumentPayloadFragmentDoc,
        ArchiveResponseFragmentDoc: ArchiveResponseFragmentDoc,
        DocumentSearchResultFragmentDoc: DocumentSearchResultFragmentDoc,
        DocumentSearchPayloadFragmentDoc: DocumentSearchPayloadFragmentDoc,
        DocumentSearchResultConnectionFragmentDoc: DocumentSearchResultConnectionFragmentDoc,
        EmailIntakeAddressFragmentDoc: EmailIntakeAddressFragmentDoc,
        EmailIntakeAddressPayloadFragmentDoc: EmailIntakeAddressPayloadFragmentDoc,
        EmailUnsubscribePayloadFragmentDoc: EmailUnsubscribePayloadFragmentDoc,
        EmailUserAccountAuthChallengeResponseFragmentDoc: EmailUserAccountAuthChallengeResponseFragmentDoc,
        EmojiFragmentDoc: EmojiFragmentDoc,
        EmojiConnectionFragmentDoc: EmojiConnectionFragmentDoc,
        EmojiPayloadFragmentDoc: EmojiPayloadFragmentDoc,
        EntityExternalLinkFragmentDoc: EntityExternalLinkFragmentDoc,
        EntityExternalLinkConnectionFragmentDoc: EntityExternalLinkConnectionFragmentDoc,
        EntityExternalLinkPayloadFragmentDoc: EntityExternalLinkPayloadFragmentDoc,
        ExternalUserFragmentDoc: ExternalUserFragmentDoc,
        ExternalUserConnectionFragmentDoc: ExternalUserConnectionFragmentDoc,
        FacetFragmentDoc: FacetFragmentDoc,
        FacetConnectionFragmentDoc: FacetConnectionFragmentDoc,
        FavoriteFragmentDoc: FavoriteFragmentDoc,
        FavoriteConnectionFragmentDoc: FavoriteConnectionFragmentDoc,
        FavoritePayloadFragmentDoc: FavoritePayloadFragmentDoc,
        FeatureFlagRolloutStageFragmentDoc: FeatureFlagRolloutStageFragmentDoc,
        FeatureFlagFragmentDoc: FeatureFlagFragmentDoc,
        FeatureFlagConnectionFragmentDoc: FeatureFlagConnectionFragmentDoc,
        FeatureFlagRolloutStageConnectionFragmentDoc: FeatureFlagRolloutStageConnectionFragmentDoc,
        FrontAttachmentPayloadFragmentDoc: FrontAttachmentPayloadFragmentDoc,
        GitAutomationTargetBranchFragmentDoc: GitAutomationTargetBranchFragmentDoc,
        GitAutomationStateFragmentDoc: GitAutomationStateFragmentDoc,
        GitAutomationStateConnectionFragmentDoc: GitAutomationStateConnectionFragmentDoc,
        GitAutomationStatePayloadFragmentDoc: GitAutomationStatePayloadFragmentDoc,
        GitAutomationTargetBranchPayloadFragmentDoc: GitAutomationTargetBranchPayloadFragmentDoc,
        GitHubCommitIntegrationPayloadFragmentDoc: GitHubCommitIntegrationPayloadFragmentDoc,
        GitHubEnterpriseServerInstallVerificationPayloadFragmentDoc: GitHubEnterpriseServerInstallVerificationPayloadFragmentDoc,
        GitHubEnterpriseServerPayloadFragmentDoc: GitHubEnterpriseServerPayloadFragmentDoc,
        GitLabIntegrationCreatePayloadFragmentDoc: GitLabIntegrationCreatePayloadFragmentDoc,
        ImageUploadFromUrlPayloadFragmentDoc: ImageUploadFromUrlPayloadFragmentDoc,
        InitiativeFragmentDoc: InitiativeFragmentDoc,
        InitiativeConnectionFragmentDoc: InitiativeConnectionFragmentDoc,
        InitiativeToProjectFragmentDoc: InitiativeToProjectFragmentDoc,
        InitiativeToProjectConnectionFragmentDoc: InitiativeToProjectConnectionFragmentDoc,
        IntegrationFragmentDoc: IntegrationFragmentDoc,
        IntegrationConnectionFragmentDoc: IntegrationConnectionFragmentDoc,
        IntegrationHasScopesPayloadFragmentDoc: IntegrationHasScopesPayloadFragmentDoc,
        IntegrationPayloadFragmentDoc: IntegrationPayloadFragmentDoc,
        IntegrationRequestPayloadFragmentDoc: IntegrationRequestPayloadFragmentDoc,
        IntegrationTemplateFragmentDoc: IntegrationTemplateFragmentDoc,
        IntegrationTemplateConnectionFragmentDoc: IntegrationTemplateConnectionFragmentDoc,
        IntegrationTemplatePayloadFragmentDoc: IntegrationTemplatePayloadFragmentDoc,
        IntegrationsSettingsFragmentDoc: IntegrationsSettingsFragmentDoc,
        IntegrationsSettingsConnectionFragmentDoc: IntegrationsSettingsConnectionFragmentDoc,
        IntegrationsSettingsPayloadFragmentDoc: IntegrationsSettingsPayloadFragmentDoc,
        IssueFragmentDoc: IssueFragmentDoc,
        IssueBatchPayloadFragmentDoc: IssueBatchPayloadFragmentDoc,
        IssueConnectionFragmentDoc: IssueConnectionFragmentDoc,
        IssueDraftPayloadFragmentDoc: IssueDraftPayloadFragmentDoc,
        IssueFilterSuggestionPayloadFragmentDoc: IssueFilterSuggestionPayloadFragmentDoc,
        IssueRelationHistoryPayloadFragmentDoc: IssueRelationHistoryPayloadFragmentDoc,
        UserFragmentDoc: UserFragmentDoc,
        IssueImportFragmentDoc: IssueImportFragmentDoc,
        IssueLabelFragmentDoc: IssueLabelFragmentDoc,
        IssueHistoryFragmentDoc: IssueHistoryFragmentDoc,
        IssueHistoryConnectionFragmentDoc: IssueHistoryConnectionFragmentDoc,
        IssueImportCheckPayloadFragmentDoc: IssueImportCheckPayloadFragmentDoc,
        IssueImportDeletePayloadFragmentDoc: IssueImportDeletePayloadFragmentDoc,
        IssueImportPayloadFragmentDoc: IssueImportPayloadFragmentDoc,
        IssueLabelConnectionFragmentDoc: IssueLabelConnectionFragmentDoc,
        IssueLabelPayloadFragmentDoc: IssueLabelPayloadFragmentDoc,
        IssuePayloadFragmentDoc: IssuePayloadFragmentDoc,
        IssuePriorityValueFragmentDoc: IssuePriorityValueFragmentDoc,
        IssueRelationFragmentDoc: IssueRelationFragmentDoc,
        IssueRelationConnectionFragmentDoc: IssueRelationConnectionFragmentDoc,
        IssueRelationPayloadFragmentDoc: IssueRelationPayloadFragmentDoc,
        IssueSearchResultFragmentDoc: IssueSearchResultFragmentDoc,
        IssueSearchPayloadFragmentDoc: IssueSearchPayloadFragmentDoc,
        IssueSearchResultConnectionFragmentDoc: IssueSearchResultConnectionFragmentDoc,
        LogoutResponseFragmentDoc: LogoutResponseFragmentDoc,
        NodeFragmentDoc: NodeFragmentDoc,
        NotificationBatchActionPayloadFragmentDoc: NotificationBatchActionPayloadFragmentDoc,
        NotificationConnectionFragmentDoc: NotificationConnectionFragmentDoc,
        NotificationPayloadFragmentDoc: NotificationPayloadFragmentDoc,
        NotificationSubscriptionConnectionFragmentDoc: NotificationSubscriptionConnectionFragmentDoc,
        NotificationSubscriptionPayloadFragmentDoc: NotificationSubscriptionPayloadFragmentDoc,
        OauthClientFragmentDoc: OauthClientFragmentDoc,
        OauthClientConnectionFragmentDoc: OauthClientConnectionFragmentDoc,
        OrganizationAcceptedOrExpiredInviteDetailsPayloadFragmentDoc: OrganizationAcceptedOrExpiredInviteDetailsPayloadFragmentDoc,
        OrganizationCancelDeletePayloadFragmentDoc: OrganizationCancelDeletePayloadFragmentDoc,
        OrganizationDeletePayloadFragmentDoc: OrganizationDeletePayloadFragmentDoc,
        OrganizationExistsPayloadFragmentDoc: OrganizationExistsPayloadFragmentDoc,
        OrganizationInviteFragmentDoc: OrganizationInviteFragmentDoc,
        OrganizationInviteConnectionFragmentDoc: OrganizationInviteConnectionFragmentDoc,
        OrganizationInviteFullDetailsPayloadFragmentDoc: OrganizationInviteFullDetailsPayloadFragmentDoc,
        OrganizationInviteLinkDetailsPayloadFragmentDoc: OrganizationInviteLinkDetailsPayloadFragmentDoc,
        OrganizationInvitePayloadFragmentDoc: OrganizationInvitePayloadFragmentDoc,
        OrganizationMetaFragmentDoc: OrganizationMetaFragmentDoc,
        OrganizationPayloadFragmentDoc: OrganizationPayloadFragmentDoc,
        OrganizationRegionResponseFragmentDoc: OrganizationRegionResponseFragmentDoc,
        OrganizationStartTrialPayloadFragmentDoc: OrganizationStartTrialPayloadFragmentDoc,
        PasskeyLoginStartResponseFragmentDoc: PasskeyLoginStartResponseFragmentDoc,
        ProjectFragmentDoc: ProjectFragmentDoc,
        ProjectConnectionFragmentDoc: ProjectConnectionFragmentDoc,
        ProjectFilterSuggestionPayloadFragmentDoc: ProjectFilterSuggestionPayloadFragmentDoc,
        ProjectHistoryFragmentDoc: ProjectHistoryFragmentDoc,
        ProjectHistoryConnectionFragmentDoc: ProjectHistoryConnectionFragmentDoc,
        ProjectLinkFragmentDoc: ProjectLinkFragmentDoc,
        ProjectLinkConnectionFragmentDoc: ProjectLinkConnectionFragmentDoc,
        ProjectLinkPayloadFragmentDoc: ProjectLinkPayloadFragmentDoc,
        ProjectMilestoneFragmentDoc: ProjectMilestoneFragmentDoc,
        ProjectMilestoneConnectionFragmentDoc: ProjectMilestoneConnectionFragmentDoc,
        ProjectMilestoneMoveIssueToTeamFragmentDoc: ProjectMilestoneMoveIssueToTeamFragmentDoc,
        ProjectMilestoneMoveProjectTeamsFragmentDoc: ProjectMilestoneMoveProjectTeamsFragmentDoc,
        ProjectMilestoneMovePayloadFragmentDoc: ProjectMilestoneMovePayloadFragmentDoc,
        ProjectMilestonePayloadFragmentDoc: ProjectMilestonePayloadFragmentDoc,
        ProjectPayloadFragmentDoc: ProjectPayloadFragmentDoc,
        ProjectRelationFragmentDoc: ProjectRelationFragmentDoc,
        ProjectRelationConnectionFragmentDoc: ProjectRelationConnectionFragmentDoc,
        ProjectRelationPayloadFragmentDoc: ProjectRelationPayloadFragmentDoc,
        ProjectSearchResultFragmentDoc: ProjectSearchResultFragmentDoc,
        ProjectSearchPayloadFragmentDoc: ProjectSearchPayloadFragmentDoc,
        ProjectSearchResultConnectionFragmentDoc: ProjectSearchResultConnectionFragmentDoc,
        ProjectStatusConnectionFragmentDoc: ProjectStatusConnectionFragmentDoc,
        ProjectStatusCountPayloadFragmentDoc: ProjectStatusCountPayloadFragmentDoc,
        ProjectStatusPayloadFragmentDoc: ProjectStatusPayloadFragmentDoc,
        ProjectUpdateFragmentDoc: ProjectUpdateFragmentDoc,
        ProjectUpdateConnectionFragmentDoc: ProjectUpdateConnectionFragmentDoc,
        ProjectUpdateInteractionFragmentDoc: ProjectUpdateInteractionFragmentDoc,
        ProjectUpdateInteractionConnectionFragmentDoc: ProjectUpdateInteractionConnectionFragmentDoc,
        ProjectUpdateInteractionPayloadFragmentDoc: ProjectUpdateInteractionPayloadFragmentDoc,
        ProjectUpdatePayloadFragmentDoc: ProjectUpdatePayloadFragmentDoc,
        ProjectUpdateReminderPayloadFragmentDoc: ProjectUpdateReminderPayloadFragmentDoc,
        ProjectUpdateWithInteractionPayloadFragmentDoc: ProjectUpdateWithInteractionPayloadFragmentDoc,
        PushSubscriptionFragmentDoc: PushSubscriptionFragmentDoc,
        PushSubscriptionConnectionFragmentDoc: PushSubscriptionConnectionFragmentDoc,
        PushSubscriptionPayloadFragmentDoc: PushSubscriptionPayloadFragmentDoc,
        PushSubscriptionTestPayloadFragmentDoc: PushSubscriptionTestPayloadFragmentDoc,
        RateLimitResultPayloadFragmentDoc: RateLimitResultPayloadFragmentDoc,
        RateLimitPayloadFragmentDoc: RateLimitPayloadFragmentDoc,
        ReactionConnectionFragmentDoc: ReactionConnectionFragmentDoc,
        ReactionPayloadFragmentDoc: ReactionPayloadFragmentDoc,
        RoadmapFragmentDoc: RoadmapFragmentDoc,
        RoadmapConnectionFragmentDoc: RoadmapConnectionFragmentDoc,
        RoadmapPayloadFragmentDoc: RoadmapPayloadFragmentDoc,
        RoadmapToProjectFragmentDoc: RoadmapToProjectFragmentDoc,
        RoadmapToProjectConnectionFragmentDoc: RoadmapToProjectConnectionFragmentDoc,
        RoadmapToProjectPayloadFragmentDoc: RoadmapToProjectPayloadFragmentDoc,
        SlackChannelConnectPayloadFragmentDoc: SlackChannelConnectPayloadFragmentDoc,
        SsoUrlFromEmailResponseFragmentDoc: SsoUrlFromEmailResponseFragmentDoc,
        SuccessPayloadFragmentDoc: SuccessPayloadFragmentDoc,
        SummaryPayloadFragmentDoc: SummaryPayloadFragmentDoc,
        SynchronizedPayloadFragmentDoc: SynchronizedPayloadFragmentDoc,
        TeamFragmentDoc: TeamFragmentDoc,
        TeamConnectionFragmentDoc: TeamConnectionFragmentDoc,
        TeamMembershipFragmentDoc: TeamMembershipFragmentDoc,
        TeamMembershipConnectionFragmentDoc: TeamMembershipConnectionFragmentDoc,
        TeamMembershipPayloadFragmentDoc: TeamMembershipPayloadFragmentDoc,
        TeamPayloadFragmentDoc: TeamPayloadFragmentDoc,
        TemplateFragmentDoc: TemplateFragmentDoc,
        TemplateConnectionFragmentDoc: TemplateConnectionFragmentDoc,
        TemplatePayloadFragmentDoc: TemplatePayloadFragmentDoc,
        TimeScheduleEntryFragmentDoc: TimeScheduleEntryFragmentDoc,
        TimeScheduleFragmentDoc: TimeScheduleFragmentDoc,
        TimeScheduleConnectionFragmentDoc: TimeScheduleConnectionFragmentDoc,
        TimeSchedulePayloadFragmentDoc: TimeSchedulePayloadFragmentDoc,
        TriageResponsibilityManualSelectionFragmentDoc: TriageResponsibilityManualSelectionFragmentDoc,
        TriageResponsibilityFragmentDoc: TriageResponsibilityFragmentDoc,
        TriageResponsibilityConnectionFragmentDoc: TriageResponsibilityConnectionFragmentDoc,
        TriageResponsibilityPayloadFragmentDoc: TriageResponsibilityPayloadFragmentDoc,
        UploadFileHeaderFragmentDoc: UploadFileHeaderFragmentDoc,
        UploadFileFragmentDoc: UploadFileFragmentDoc,
        UploadPayloadFragmentDoc: UploadPayloadFragmentDoc,
        UserAdminPayloadFragmentDoc: UserAdminPayloadFragmentDoc,
        UserConnectionFragmentDoc: UserConnectionFragmentDoc,
        UserPayloadFragmentDoc: UserPayloadFragmentDoc,
        UserSettingsFlagPayloadFragmentDoc: UserSettingsFlagPayloadFragmentDoc,
        UserSettingsFlagsResetPayloadFragmentDoc: UserSettingsFlagsResetPayloadFragmentDoc,
        UserSettingsPayloadFragmentDoc: UserSettingsPayloadFragmentDoc,
        ViewPreferencesPayloadFragmentDoc: ViewPreferencesPayloadFragmentDoc,
        WebhookFragmentDoc: WebhookFragmentDoc,
        WebhookConnectionFragmentDoc: WebhookConnectionFragmentDoc,
        WebhookPayloadFragmentDoc: WebhookPayloadFragmentDoc,
        WorkflowCronJobDefinitionFragmentDoc: WorkflowCronJobDefinitionFragmentDoc,
        WorkflowCronJobDefinitionConnectionFragmentDoc: WorkflowCronJobDefinitionConnectionFragmentDoc,
        WorkflowDefinitionFragmentDoc: WorkflowDefinitionFragmentDoc,
        WorkflowDefinitionConnectionFragmentDoc: WorkflowDefinitionConnectionFragmentDoc,
        WorkflowStateFragmentDoc: WorkflowStateFragmentDoc,
        WorkflowStateConnectionFragmentDoc: WorkflowStateConnectionFragmentDoc,
        WorkflowStatePayloadFragmentDoc: WorkflowStatePayloadFragmentDoc,
        AdministrableTeamsDocument: AdministrableTeamsDocument,
        ApiKeysDocument: ApiKeysDocument,
        ApplicationInfoDocument: ApplicationInfoDocument,
        ApplicationWithAuthorizationDocument: ApplicationWithAuthorizationDocument,
        AttachmentDocument: AttachmentDocument,
        AttachmentIssueDocument: AttachmentIssueDocument,
        AttachmentIssue_AttachmentsDocument: AttachmentIssue_AttachmentsDocument,
        AttachmentIssue_BotActorDocument: AttachmentIssue_BotActorDocument,
        AttachmentIssue_ChildrenDocument: AttachmentIssue_ChildrenDocument,
        AttachmentIssue_CommentsDocument: AttachmentIssue_CommentsDocument,
        AttachmentIssue_HistoryDocument: AttachmentIssue_HistoryDocument,
        AttachmentIssue_InverseRelationsDocument: AttachmentIssue_InverseRelationsDocument,
        AttachmentIssue_LabelsDocument: AttachmentIssue_LabelsDocument,
        AttachmentIssue_RelationsDocument: AttachmentIssue_RelationsDocument,
        AttachmentIssue_SubscribersDocument: AttachmentIssue_SubscribersDocument,
        AttachmentsDocument: AttachmentsDocument,
        AttachmentsForUrlDocument: AttachmentsForUrlDocument,
        AuditEntriesDocument: AuditEntriesDocument,
        AuditEntryTypesDocument: AuditEntryTypesDocument,
        AuthenticationSessionsDocument: AuthenticationSessionsDocument,
        AvailableUsersDocument: AvailableUsersDocument,
        CommentDocument: CommentDocument,
        Comment_BotActorDocument: Comment_BotActorDocument,
        Comment_ChildrenDocument: Comment_ChildrenDocument,
        Comment_DocumentContentDocument: Comment_DocumentContentDocument,
        CommentsDocument: CommentsDocument,
        CustomViewDocument: CustomViewDocument,
        CustomView_IssuesDocument: CustomView_IssuesDocument,
        CustomView_OrganizationViewPreferencesDocument: CustomView_OrganizationViewPreferencesDocument,
        CustomView_OrganizationViewPreferences_PreferencesDocument: CustomView_OrganizationViewPreferences_PreferencesDocument,
        CustomView_ProjectsDocument: CustomView_ProjectsDocument,
        CustomView_UserViewPreferencesDocument: CustomView_UserViewPreferencesDocument,
        CustomView_UserViewPreferences_PreferencesDocument: CustomView_UserViewPreferences_PreferencesDocument,
        CustomView_ViewPreferencesValuesDocument: CustomView_ViewPreferencesValuesDocument,
        CustomViewHasSubscribersDocument: CustomViewHasSubscribersDocument,
        CustomViewsDocument: CustomViewsDocument,
        CycleDocument: CycleDocument,
        Cycle_IssuesDocument: Cycle_IssuesDocument,
        Cycle_UncompletedIssuesUponCloseDocument: Cycle_UncompletedIssuesUponCloseDocument,
        CyclesDocument: CyclesDocument,
        DocumentDocument: DocumentDocument,
        Document_CommentsDocument: Document_CommentsDocument,
        DocumentContentHistoryDocument: DocumentContentHistoryDocument,
        DocumentsDocument: DocumentsDocument,
        EmojiDocument: EmojiDocument,
        EmojisDocument: EmojisDocument,
        EntityExternalLinkDocument: EntityExternalLinkDocument,
        ExternalUserDocument: ExternalUserDocument,
        ExternalUsersDocument: ExternalUsersDocument,
        FavoriteDocument: FavoriteDocument,
        Favorite_ChildrenDocument: Favorite_ChildrenDocument,
        FavoritesDocument: FavoritesDocument,
        InitiativeDocument: InitiativeDocument,
        Initiative_LinksDocument: Initiative_LinksDocument,
        Initiative_ProjectsDocument: Initiative_ProjectsDocument,
        InitiativeToProjectDocument: InitiativeToProjectDocument,
        InitiativeToProjectsDocument: InitiativeToProjectsDocument,
        InitiativesDocument: InitiativesDocument,
        IntegrationDocument: IntegrationDocument,
        IntegrationHasScopesDocument: IntegrationHasScopesDocument,
        IntegrationTemplateDocument: IntegrationTemplateDocument,
        IntegrationTemplatesDocument: IntegrationTemplatesDocument,
        IntegrationsDocument: IntegrationsDocument,
        IntegrationsSettingsDocument: IntegrationsSettingsDocument,
        IssueDocument: IssueDocument,
        Issue_AttachmentsDocument: Issue_AttachmentsDocument,
        Issue_BotActorDocument: Issue_BotActorDocument,
        Issue_ChildrenDocument: Issue_ChildrenDocument,
        Issue_CommentsDocument: Issue_CommentsDocument,
        Issue_HistoryDocument: Issue_HistoryDocument,
        Issue_InverseRelationsDocument: Issue_InverseRelationsDocument,
        Issue_LabelsDocument: Issue_LabelsDocument,
        Issue_RelationsDocument: Issue_RelationsDocument,
        Issue_SubscribersDocument: Issue_SubscribersDocument,
        IssueFigmaFileKeySearchDocument: IssueFigmaFileKeySearchDocument,
        IssueFilterSuggestionDocument: IssueFilterSuggestionDocument,
        IssueImportCheckCsvDocument: IssueImportCheckCsvDocument,
        IssueImportCheckSyncDocument: IssueImportCheckSyncDocument,
        IssueImportJqlCheckDocument: IssueImportJqlCheckDocument,
        IssueLabelDocument: IssueLabelDocument,
        IssueLabel_ChildrenDocument: IssueLabel_ChildrenDocument,
        IssueLabel_IssuesDocument: IssueLabel_IssuesDocument,
        IssueLabelsDocument: IssueLabelsDocument,
        IssuePriorityValuesDocument: IssuePriorityValuesDocument,
        IssueRelationDocument: IssueRelationDocument,
        IssueRelationsDocument: IssueRelationsDocument,
        IssueSearchDocument: IssueSearchDocument,
        IssueVcsBranchSearchDocument: IssueVcsBranchSearchDocument,
        IssueVcsBranchSearch_AttachmentsDocument: IssueVcsBranchSearch_AttachmentsDocument,
        IssueVcsBranchSearch_BotActorDocument: IssueVcsBranchSearch_BotActorDocument,
        IssueVcsBranchSearch_ChildrenDocument: IssueVcsBranchSearch_ChildrenDocument,
        IssueVcsBranchSearch_CommentsDocument: IssueVcsBranchSearch_CommentsDocument,
        IssueVcsBranchSearch_HistoryDocument: IssueVcsBranchSearch_HistoryDocument,
        IssueVcsBranchSearch_InverseRelationsDocument: IssueVcsBranchSearch_InverseRelationsDocument,
        IssueVcsBranchSearch_LabelsDocument: IssueVcsBranchSearch_LabelsDocument,
        IssueVcsBranchSearch_RelationsDocument: IssueVcsBranchSearch_RelationsDocument,
        IssueVcsBranchSearch_SubscribersDocument: IssueVcsBranchSearch_SubscribersDocument,
        IssuesDocument: IssuesDocument,
        NotificationDocument: NotificationDocument,
        NotificationSubscriptionDocument: NotificationSubscriptionDocument,
        NotificationSubscriptionsDocument: NotificationSubscriptionsDocument,
        NotificationsDocument: NotificationsDocument,
        OrganizationDocument: OrganizationDocument,
        Organization_IntegrationsDocument: Organization_IntegrationsDocument,
        Organization_LabelsDocument: Organization_LabelsDocument,
        Organization_SubscriptionDocument: Organization_SubscriptionDocument,
        Organization_TeamsDocument: Organization_TeamsDocument,
        Organization_TemplatesDocument: Organization_TemplatesDocument,
        Organization_UsersDocument: Organization_UsersDocument,
        OrganizationExistsDocument: OrganizationExistsDocument,
        OrganizationInviteDocument: OrganizationInviteDocument,
        OrganizationInvitesDocument: OrganizationInvitesDocument,
        ProjectDocument: ProjectDocument,
        Project_CommentsDocument: Project_CommentsDocument,
        Project_DocumentContentDocument: Project_DocumentContentDocument,
        Project_DocumentsDocument: Project_DocumentsDocument,
        Project_ExternalLinksDocument: Project_ExternalLinksDocument,
        Project_HistoryDocument: Project_HistoryDocument,
        Project_InitiativesDocument: Project_InitiativesDocument,
        Project_IssuesDocument: Project_IssuesDocument,
        Project_LinksDocument: Project_LinksDocument,
        Project_MembersDocument: Project_MembersDocument,
        Project_ProjectMilestonesDocument: Project_ProjectMilestonesDocument,
        Project_ProjectUpdatesDocument: Project_ProjectUpdatesDocument,
        Project_TeamsDocument: Project_TeamsDocument,
        ProjectFilterSuggestionDocument: ProjectFilterSuggestionDocument,
        ProjectLinkDocument: ProjectLinkDocument,
        ProjectLinksDocument: ProjectLinksDocument,
        ProjectMilestoneDocument: ProjectMilestoneDocument,
        ProjectMilestone_DocumentContentDocument: ProjectMilestone_DocumentContentDocument,
        ProjectMilestone_IssuesDocument: ProjectMilestone_IssuesDocument,
        ProjectMilestonesDocument: ProjectMilestonesDocument,
        ProjectRelationDocument: ProjectRelationDocument,
        ProjectRelationsDocument: ProjectRelationsDocument,
        ProjectStatusDocument: ProjectStatusDocument,
        ProjectStatusesDocument: ProjectStatusesDocument,
        ProjectUpdateDocument: ProjectUpdateDocument,
        ProjectUpdate_CommentsDocument: ProjectUpdate_CommentsDocument,
        ProjectUpdateInteractionDocument: ProjectUpdateInteractionDocument,
        ProjectUpdateInteractionsDocument: ProjectUpdateInteractionsDocument,
        ProjectUpdatesDocument: ProjectUpdatesDocument,
        ProjectsDocument: ProjectsDocument,
        PushSubscriptionTestDocument: PushSubscriptionTestDocument,
        RateLimitStatusDocument: RateLimitStatusDocument,
        RoadmapDocument: RoadmapDocument,
        Roadmap_ProjectsDocument: Roadmap_ProjectsDocument,
        RoadmapToProjectDocument: RoadmapToProjectDocument,
        RoadmapToProjectsDocument: RoadmapToProjectsDocument,
        RoadmapsDocument: RoadmapsDocument,
        SearchDocumentsDocument: SearchDocumentsDocument,
        SearchDocuments_ArchivePayloadDocument: SearchDocuments_ArchivePayloadDocument,
        SearchIssuesDocument: SearchIssuesDocument,
        SearchIssues_ArchivePayloadDocument: SearchIssues_ArchivePayloadDocument,
        SearchProjectsDocument: SearchProjectsDocument,
        SearchProjects_ArchivePayloadDocument: SearchProjects_ArchivePayloadDocument,
        SsoUrlFromEmailDocument: SsoUrlFromEmailDocument,
        TeamDocument: TeamDocument,
        Team_CyclesDocument: Team_CyclesDocument,
        Team_GitAutomationStatesDocument: Team_GitAutomationStatesDocument,
        Team_IssuesDocument: Team_IssuesDocument,
        Team_LabelsDocument: Team_LabelsDocument,
        Team_MembersDocument: Team_MembersDocument,
        Team_MembershipsDocument: Team_MembershipsDocument,
        Team_ProjectsDocument: Team_ProjectsDocument,
        Team_StatesDocument: Team_StatesDocument,
        Team_TemplatesDocument: Team_TemplatesDocument,
        Team_WebhooksDocument: Team_WebhooksDocument,
        TeamMembershipDocument: TeamMembershipDocument,
        TeamMembershipsDocument: TeamMembershipsDocument,
        TeamsDocument: TeamsDocument,
        TemplateDocument: TemplateDocument,
        TemplatesDocument: TemplatesDocument,
        TemplatesForIntegrationDocument: TemplatesForIntegrationDocument,
        TimeScheduleDocument: TimeScheduleDocument,
        TimeSchedulesDocument: TimeSchedulesDocument,
        TriageResponsibilitiesDocument: TriageResponsibilitiesDocument,
        TriageResponsibilityDocument: TriageResponsibilityDocument,
        TriageResponsibility_ManualSelectionDocument: TriageResponsibility_ManualSelectionDocument,
        UserDocument: UserDocument,
        User_AssignedIssuesDocument: User_AssignedIssuesDocument,
        User_CreatedIssuesDocument: User_CreatedIssuesDocument,
        User_TeamMembershipsDocument: User_TeamMembershipsDocument,
        User_TeamsDocument: User_TeamsDocument,
        UserSettingsDocument: UserSettingsDocument,
        UserSettings_NotificationDeliveryPreferencesDocument: UserSettings_NotificationDeliveryPreferencesDocument,
        UserSettings_NotificationDeliveryPreferences_MobileDocument: UserSettings_NotificationDeliveryPreferences_MobileDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleDocument: UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayDocument: UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayDocument: UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayDocument: UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayDocument: UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayDocument: UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayDocument: UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayDocument: UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayDocument,
        UsersDocument: UsersDocument,
        VerifyGitHubEnterpriseServerInstallationDocument: VerifyGitHubEnterpriseServerInstallationDocument,
        ViewerDocument: ViewerDocument,
        Viewer_AssignedIssuesDocument: Viewer_AssignedIssuesDocument,
        Viewer_CreatedIssuesDocument: Viewer_CreatedIssuesDocument,
        Viewer_TeamMembershipsDocument: Viewer_TeamMembershipsDocument,
        Viewer_TeamsDocument: Viewer_TeamsDocument,
        WebhookDocument: WebhookDocument,
        WebhooksDocument: WebhooksDocument,
        WorkflowStateDocument: WorkflowStateDocument,
        WorkflowState_IssuesDocument: WorkflowState_IssuesDocument,
        WorkflowStatesDocument: WorkflowStatesDocument,
        AirbyteIntegrationConnectDocument: AirbyteIntegrationConnectDocument,
        ArchiveAttachmentDocument: ArchiveAttachmentDocument,
        CreateAttachmentDocument: CreateAttachmentDocument,
        DeleteAttachmentDocument: DeleteAttachmentDocument,
        AttachmentLinkDiscordDocument: AttachmentLinkDiscordDocument,
        AttachmentLinkFrontDocument: AttachmentLinkFrontDocument,
        AttachmentLinkGitHubIssueDocument: AttachmentLinkGitHubIssueDocument,
        AttachmentLinkGitHubPrDocument: AttachmentLinkGitHubPrDocument,
        AttachmentLinkGitLabMrDocument: AttachmentLinkGitLabMrDocument,
        AttachmentLinkIntercomDocument: AttachmentLinkIntercomDocument,
        AttachmentLinkJiraIssueDocument: AttachmentLinkJiraIssueDocument,
        AttachmentLinkSlackDocument: AttachmentLinkSlackDocument,
        AttachmentLinkUrlDocument: AttachmentLinkUrlDocument,
        AttachmentLinkZendeskDocument: AttachmentLinkZendeskDocument,
        AttachmentSyncToSlackDocument: AttachmentSyncToSlackDocument,
        UpdateAttachmentDocument: UpdateAttachmentDocument,
        CreateCommentDocument: CreateCommentDocument,
        DeleteCommentDocument: DeleteCommentDocument,
        CommentResolveDocument: CommentResolveDocument,
        CommentUnresolveDocument: CommentUnresolveDocument,
        UpdateCommentDocument: UpdateCommentDocument,
        CreateContactDocument: CreateContactDocument,
        CreateCsvExportReportDocument: CreateCsvExportReportDocument,
        CreateOrganizationFromOnboardingDocument: CreateOrganizationFromOnboardingDocument,
        CreateProjectUpdateReminderDocument: CreateProjectUpdateReminderDocument,
        CreateCustomViewDocument: CreateCustomViewDocument,
        DeleteCustomViewDocument: DeleteCustomViewDocument,
        UpdateCustomViewDocument: UpdateCustomViewDocument,
        ArchiveCycleDocument: ArchiveCycleDocument,
        CreateCycleDocument: CreateCycleDocument,
        CycleShiftAllDocument: CycleShiftAllDocument,
        CycleStartUpcomingCycleTodayDocument: CycleStartUpcomingCycleTodayDocument,
        UpdateCycleDocument: UpdateCycleDocument,
        CreateDocumentDocument: CreateDocumentDocument,
        DeleteDocumentDocument: DeleteDocumentDocument,
        UnarchiveDocumentDocument: UnarchiveDocumentDocument,
        UpdateDocumentDocument: UpdateDocumentDocument,
        CreateEmailIntakeAddressDocument: CreateEmailIntakeAddressDocument,
        DeleteEmailIntakeAddressDocument: DeleteEmailIntakeAddressDocument,
        EmailIntakeAddressRotateDocument: EmailIntakeAddressRotateDocument,
        UpdateEmailIntakeAddressDocument: UpdateEmailIntakeAddressDocument,
        EmailTokenUserAccountAuthDocument: EmailTokenUserAccountAuthDocument,
        EmailUnsubscribeDocument: EmailUnsubscribeDocument,
        EmailUserAccountAuthChallengeDocument: EmailUserAccountAuthChallengeDocument,
        CreateEmojiDocument: CreateEmojiDocument,
        DeleteEmojiDocument: DeleteEmojiDocument,
        CreateEntityExternalLinkDocument: CreateEntityExternalLinkDocument,
        DeleteEntityExternalLinkDocument: DeleteEntityExternalLinkDocument,
        UpdateEntityExternalLinkDocument: UpdateEntityExternalLinkDocument,
        CreateFavoriteDocument: CreateFavoriteDocument,
        DeleteFavoriteDocument: DeleteFavoriteDocument,
        UpdateFavoriteDocument: UpdateFavoriteDocument,
        FileUploadDocument: FileUploadDocument,
        CreateGitAutomationStateDocument: CreateGitAutomationStateDocument,
        DeleteGitAutomationStateDocument: DeleteGitAutomationStateDocument,
        UpdateGitAutomationStateDocument: UpdateGitAutomationStateDocument,
        CreateGitAutomationTargetBranchDocument: CreateGitAutomationTargetBranchDocument,
        DeleteGitAutomationTargetBranchDocument: DeleteGitAutomationTargetBranchDocument,
        UpdateGitAutomationTargetBranchDocument: UpdateGitAutomationTargetBranchDocument,
        GoogleUserAccountAuthDocument: GoogleUserAccountAuthDocument,
        ImageUploadFromUrlDocument: ImageUploadFromUrlDocument,
        ImportFileUploadDocument: ImportFileUploadDocument,
        ArchiveInitiativeDocument: ArchiveInitiativeDocument,
        CreateInitiativeDocument: CreateInitiativeDocument,
        DeleteInitiativeDocument: DeleteInitiativeDocument,
        CreateInitiativeToProjectDocument: CreateInitiativeToProjectDocument,
        DeleteInitiativeToProjectDocument: DeleteInitiativeToProjectDocument,
        UpdateInitiativeToProjectDocument: UpdateInitiativeToProjectDocument,
        UnarchiveInitiativeDocument: UnarchiveInitiativeDocument,
        UpdateInitiativeDocument: UpdateInitiativeDocument,
        ArchiveIntegrationDocument: ArchiveIntegrationDocument,
        IntegrationAsksConnectChannelDocument: IntegrationAsksConnectChannelDocument,
        DeleteIntegrationDocument: DeleteIntegrationDocument,
        IntegrationDiscordDocument: IntegrationDiscordDocument,
        IntegrationFigmaDocument: IntegrationFigmaDocument,
        IntegrationFrontDocument: IntegrationFrontDocument,
        IntegrationGitHubEnterpriseServerConnectDocument: IntegrationGitHubEnterpriseServerConnectDocument,
        IntegrationGitHubPersonalDocument: IntegrationGitHubPersonalDocument,
        CreateIntegrationGithubCommitDocument: CreateIntegrationGithubCommitDocument,
        IntegrationGithubConnectDocument: IntegrationGithubConnectDocument,
        IntegrationGithubImportConnectDocument: IntegrationGithubImportConnectDocument,
        IntegrationGitlabConnectDocument: IntegrationGitlabConnectDocument,
        IntegrationGoogleSheetsDocument: IntegrationGoogleSheetsDocument,
        IntegrationIntercomDocument: IntegrationIntercomDocument,
        DeleteIntegrationIntercomDocument: DeleteIntegrationIntercomDocument,
        UpdateIntegrationIntercomSettingsDocument: UpdateIntegrationIntercomSettingsDocument,
        IntegrationJiraPersonalDocument: IntegrationJiraPersonalDocument,
        IntegrationLoomDocument: IntegrationLoomDocument,
        IntegrationRequestDocument: IntegrationRequestDocument,
        IntegrationSentryConnectDocument: IntegrationSentryConnectDocument,
        IntegrationSlackDocument: IntegrationSlackDocument,
        IntegrationSlackAsksDocument: IntegrationSlackAsksDocument,
        IntegrationSlackCustomViewNotificationsDocument: IntegrationSlackCustomViewNotificationsDocument,
        IntegrationSlackImportEmojisDocument: IntegrationSlackImportEmojisDocument,
        IntegrationSlackOrgProjectUpdatesPostDocument: IntegrationSlackOrgProjectUpdatesPostDocument,
        IntegrationSlackPersonalDocument: IntegrationSlackPersonalDocument,
        IntegrationSlackPostDocument: IntegrationSlackPostDocument,
        IntegrationSlackProjectPostDocument: IntegrationSlackProjectPostDocument,
        CreateIntegrationTemplateDocument: CreateIntegrationTemplateDocument,
        DeleteIntegrationTemplateDocument: DeleteIntegrationTemplateDocument,
        IntegrationZendeskDocument: IntegrationZendeskDocument,
        CreateIntegrationsSettingsDocument: CreateIntegrationsSettingsDocument,
        UpdateIntegrationsSettingsDocument: UpdateIntegrationsSettingsDocument,
        IssueAddLabelDocument: IssueAddLabelDocument,
        ArchiveIssueDocument: ArchiveIssueDocument,
        UpdateIssueBatchDocument: UpdateIssueBatchDocument,
        CreateIssueDocument: CreateIssueDocument,
        DeleteIssueDocument: DeleteIssueDocument,
        ArchiveIssueDraftDocument: ArchiveIssueDraftDocument,
        CreateIssueDraftDocument: CreateIssueDraftDocument,
        DeleteIssueDraftDocument: DeleteIssueDraftDocument,
        UpdateIssueDraftDocument: UpdateIssueDraftDocument,
        IssueImportCreateAsanaDocument: IssueImportCreateAsanaDocument,
        IssueImportCreateCsvJiraDocument: IssueImportCreateCsvJiraDocument,
        IssueImportCreateClubhouseDocument: IssueImportCreateClubhouseDocument,
        IssueImportCreateGithubDocument: IssueImportCreateGithubDocument,
        IssueImportCreateJiraDocument: IssueImportCreateJiraDocument,
        DeleteIssueImportDocument: DeleteIssueImportDocument,
        IssueImportProcessDocument: IssueImportProcessDocument,
        UpdateIssueImportDocument: UpdateIssueImportDocument,
        CreateIssueLabelDocument: CreateIssueLabelDocument,
        DeleteIssueLabelDocument: DeleteIssueLabelDocument,
        UpdateIssueLabelDocument: UpdateIssueLabelDocument,
        CreateIssueRelationDocument: CreateIssueRelationDocument,
        DeleteIssueRelationDocument: DeleteIssueRelationDocument,
        UpdateIssueRelationDocument: UpdateIssueRelationDocument,
        IssueReminderDocument: IssueReminderDocument,
        IssueRemoveLabelDocument: IssueRemoveLabelDocument,
        IssueSubscribeDocument: IssueSubscribeDocument,
        UnarchiveIssueDocument: UnarchiveIssueDocument,
        IssueUnsubscribeDocument: IssueUnsubscribeDocument,
        UpdateIssueDocument: UpdateIssueDocument,
        JoinOrganizationFromOnboardingDocument: JoinOrganizationFromOnboardingDocument,
        LeaveOrganizationDocument: LeaveOrganizationDocument,
        LogoutDocument: LogoutDocument,
        LogoutAllSessionsDocument: LogoutAllSessionsDocument,
        LogoutOtherSessionsDocument: LogoutOtherSessionsDocument,
        LogoutSessionDocument: LogoutSessionDocument,
        ArchiveNotificationDocument: ArchiveNotificationDocument,
        NotificationArchiveAllDocument: NotificationArchiveAllDocument,
        NotificationMarkReadAllDocument: NotificationMarkReadAllDocument,
        NotificationMarkUnreadAllDocument: NotificationMarkUnreadAllDocument,
        NotificationSnoozeAllDocument: NotificationSnoozeAllDocument,
        CreateNotificationSubscriptionDocument: CreateNotificationSubscriptionDocument,
        DeleteNotificationSubscriptionDocument: DeleteNotificationSubscriptionDocument,
        UpdateNotificationSubscriptionDocument: UpdateNotificationSubscriptionDocument,
        UnarchiveNotificationDocument: UnarchiveNotificationDocument,
        NotificationUnsnoozeAllDocument: NotificationUnsnoozeAllDocument,
        UpdateNotificationDocument: UpdateNotificationDocument,
        DeleteOrganizationCancelDocument: DeleteOrganizationCancelDocument,
        DeleteOrganizationDocument: DeleteOrganizationDocument,
        OrganizationDeleteChallengeDocument: OrganizationDeleteChallengeDocument,
        DeleteOrganizationDomainDocument: DeleteOrganizationDomainDocument,
        CreateOrganizationInviteDocument: CreateOrganizationInviteDocument,
        DeleteOrganizationInviteDocument: DeleteOrganizationInviteDocument,
        UpdateOrganizationInviteDocument: UpdateOrganizationInviteDocument,
        OrganizationStartTrialDocument: OrganizationStartTrialDocument,
        UpdateOrganizationDocument: UpdateOrganizationDocument,
        ArchiveProjectDocument: ArchiveProjectDocument,
        CreateProjectDocument: CreateProjectDocument,
        DeleteProjectDocument: DeleteProjectDocument,
        CreateProjectLinkDocument: CreateProjectLinkDocument,
        DeleteProjectLinkDocument: DeleteProjectLinkDocument,
        UpdateProjectLinkDocument: UpdateProjectLinkDocument,
        CreateProjectMilestoneDocument: CreateProjectMilestoneDocument,
        DeleteProjectMilestoneDocument: DeleteProjectMilestoneDocument,
        UpdateProjectMilestoneDocument: UpdateProjectMilestoneDocument,
        ArchiveProjectStatusDocument: ArchiveProjectStatusDocument,
        CreateProjectStatusDocument: CreateProjectStatusDocument,
        UnarchiveProjectStatusDocument: UnarchiveProjectStatusDocument,
        UpdateProjectStatusDocument: UpdateProjectStatusDocument,
        UnarchiveProjectDocument: UnarchiveProjectDocument,
        UpdateProjectDocument: UpdateProjectDocument,
        CreateProjectUpdateDocument: CreateProjectUpdateDocument,
        DeleteProjectUpdateDocument: DeleteProjectUpdateDocument,
        CreateProjectUpdateInteractionDocument: CreateProjectUpdateInteractionDocument,
        ProjectUpdateMarkAsReadDocument: ProjectUpdateMarkAsReadDocument,
        UpdateProjectUpdateDocument: UpdateProjectUpdateDocument,
        CreatePushSubscriptionDocument: CreatePushSubscriptionDocument,
        DeletePushSubscriptionDocument: DeletePushSubscriptionDocument,
        CreateReactionDocument: CreateReactionDocument,
        DeleteReactionDocument: DeleteReactionDocument,
        RefreshGoogleSheetsDataDocument: RefreshGoogleSheetsDataDocument,
        ResendOrganizationInviteDocument: ResendOrganizationInviteDocument,
        ArchiveRoadmapDocument: ArchiveRoadmapDocument,
        CreateRoadmapDocument: CreateRoadmapDocument,
        DeleteRoadmapDocument: DeleteRoadmapDocument,
        CreateRoadmapToProjectDocument: CreateRoadmapToProjectDocument,
        DeleteRoadmapToProjectDocument: DeleteRoadmapToProjectDocument,
        UpdateRoadmapToProjectDocument: UpdateRoadmapToProjectDocument,
        UnarchiveRoadmapDocument: UnarchiveRoadmapDocument,
        UpdateRoadmapDocument: UpdateRoadmapDocument,
        SamlTokenUserAccountAuthDocument: SamlTokenUserAccountAuthDocument,
        CreateTeamDocument: CreateTeamDocument,
        DeleteTeamCyclesDocument: DeleteTeamCyclesDocument,
        DeleteTeamDocument: DeleteTeamDocument,
        DeleteTeamKeyDocument: DeleteTeamKeyDocument,
        CreateTeamMembershipDocument: CreateTeamMembershipDocument,
        DeleteTeamMembershipDocument: DeleteTeamMembershipDocument,
        UpdateTeamMembershipDocument: UpdateTeamMembershipDocument,
        UnarchiveTeamDocument: UnarchiveTeamDocument,
        UpdateTeamDocument: UpdateTeamDocument,
        CreateTemplateDocument: CreateTemplateDocument,
        DeleteTemplateDocument: DeleteTemplateDocument,
        UpdateTemplateDocument: UpdateTemplateDocument,
        CreateTimeScheduleDocument: CreateTimeScheduleDocument,
        DeleteTimeScheduleDocument: DeleteTimeScheduleDocument,
        TimeScheduleRefreshIntegrationScheduleDocument: TimeScheduleRefreshIntegrationScheduleDocument,
        UpdateTimeScheduleDocument: UpdateTimeScheduleDocument,
        TimeScheduleUpsertExternalDocument: TimeScheduleUpsertExternalDocument,
        CreateTriageResponsibilityDocument: CreateTriageResponsibilityDocument,
        DeleteTriageResponsibilityDocument: DeleteTriageResponsibilityDocument,
        UpdateTriageResponsibilityDocument: UpdateTriageResponsibilityDocument,
        UserDemoteAdminDocument: UserDemoteAdminDocument,
        UserDemoteMemberDocument: UserDemoteMemberDocument,
        UserDiscordConnectDocument: UserDiscordConnectDocument,
        UserExternalUserDisconnectDocument: UserExternalUserDisconnectDocument,
        UpdateUserFlagDocument: UpdateUserFlagDocument,
        UserPromoteAdminDocument: UserPromoteAdminDocument,
        UserPromoteMemberDocument: UserPromoteMemberDocument,
        UserSettingsFlagsResetDocument: UserSettingsFlagsResetDocument,
        UpdateUserSettingsDocument: UpdateUserSettingsDocument,
        SuspendUserDocument: SuspendUserDocument,
        UnsuspendUserDocument: UnsuspendUserDocument,
        UpdateUserDocument: UpdateUserDocument,
        CreateViewPreferencesDocument: CreateViewPreferencesDocument,
        DeleteViewPreferencesDocument: DeleteViewPreferencesDocument,
        UpdateViewPreferencesDocument: UpdateViewPreferencesDocument,
        CreateWebhookDocument: CreateWebhookDocument,
        DeleteWebhookDocument: DeleteWebhookDocument,
        UpdateWebhookDocument: UpdateWebhookDocument,
        ArchiveWorkflowStateDocument: ArchiveWorkflowStateDocument,
        CreateWorkflowStateDocument: CreateWorkflowStateDocument,
        UpdateWorkflowStateDocument: UpdateWorkflowStateDocument
    });

    /**
     * Base class to provide a request function
     *
     * @param request - function to call the graphql client
     */
    class Request {
        constructor(request) {
            this._request = request;
        }
        /**
         * Helper to paginate over all pages of a given connection query.
         * @param fn The query to paginate
         * @param args The arguments to pass to the query
         */
        paginate(fn, args) {
            return __awaiter(this, void 0, void 0, function* () {
                const boundFn = fn.bind(this);
                let connection = yield boundFn(args);
                const nodes = connection.nodes;
                while (connection.pageInfo.hasNextPage) {
                    connection = yield boundFn(Object.assign(Object.assign({ first: 50 }, args), { after: connection.pageInfo.endCursor }));
                    nodes.push(...connection.nodes);
                }
                return nodes;
            });
        }
    }
    /**
     * Default connection variables required for pagination
     * Defaults to 50 as per the Linear API
     */
    function defaultConnection(variables) {
        var _a, _b;
        return Object.assign(Object.assign({}, variables), { first: (_a = variables.first) !== null && _a !== void 0 ? _a : (variables.after ? 50 : undefined), last: (_b = variables.last) !== null && _b !== void 0 ? _b : (variables.before ? 50 : undefined) });
    }
    /**
     * Connection models containing a list of nodes and pagination information
     * Follows the Relay spec
     */
    class LinearConnection extends Request {
        constructor(request) {
            super(request);
            this.pageInfo = new PageInfo(request, { hasNextPage: false, hasPreviousPage: false, __typename: "PageInfo" });
            this.nodes = [];
        }
    }
    /**
     * The base connection class to provide pagination
     * Follows the Relay spec
     *
     * @param request - function to call the graphql client
     * @param fetch - Function to refetch the connection given different pagination variables
     * @param nodes - The list of models to initialize the connection
     * @param pageInfo - The pagination information to initialize the connection
     */
    class Connection extends LinearConnection {
        constructor(request, fetch, nodes, pageInfo) {
            super(request);
            this._fetch = fetch;
            this.nodes = nodes;
            this.pageInfo = pageInfo;
        }
        /** Add nodes to the end of the existing nodes */
        _appendNodes(nodes) {
            var _a;
            this.nodes = nodes ? [...((_a = this.nodes) !== null && _a !== void 0 ? _a : []), ...nodes] : this.nodes;
        }
        /** Add nodes to the start of the existing nodes */
        _prependNodes(nodes) {
            var _a;
            this.nodes = nodes ? [...nodes, ...((_a = this.nodes) !== null && _a !== void 0 ? _a : [])] : this.nodes;
        }
        /** Update the pagination end cursor */
        _appendPageInfo(pageInfo) {
            var _a, _b;
            if (this.pageInfo) {
                this.pageInfo.endCursor = (_a = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.endCursor) !== null && _a !== void 0 ? _a : this.pageInfo.startCursor;
                this.pageInfo.hasNextPage = (_b = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.hasNextPage) !== null && _b !== void 0 ? _b : this.pageInfo.hasNextPage;
            }
        }
        /** Update the pagination start cursor */
        _prependPageInfo(pageInfo) {
            var _a, _b;
            if (this.pageInfo) {
                this.pageInfo.startCursor = (_a = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.startCursor) !== null && _a !== void 0 ? _a : this.pageInfo.startCursor;
                this.pageInfo.hasPreviousPage = (_b = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.hasPreviousPage) !== null && _b !== void 0 ? _b : this.pageInfo.hasPreviousPage;
            }
        }
        /** Fetch the next page of results and append to nodes */
        fetchNext() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                if ((_a = this.pageInfo) === null || _a === void 0 ? void 0 : _a.hasNextPage) {
                    const response = yield this._fetch({
                        after: (_b = this.pageInfo) === null || _b === void 0 ? void 0 : _b.endCursor,
                    });
                    this._appendNodes(response === null || response === void 0 ? void 0 : response.nodes);
                    this._appendPageInfo(response === null || response === void 0 ? void 0 : response.pageInfo);
                }
                return Promise.resolve(this);
            });
        }
        /** Fetch the previous page of results and prepend to nodes */
        fetchPrevious() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                if ((_a = this.pageInfo) === null || _a === void 0 ? void 0 : _a.hasPreviousPage) {
                    const response = yield this._fetch({
                        before: (_b = this.pageInfo) === null || _b === void 0 ? void 0 : _b.startCursor,
                    });
                    this._prependNodes(response === null || response === void 0 ? void 0 : response.nodes);
                    this._prependPageInfo(response === null || response === void 0 ? void 0 : response.pageInfo);
                }
                return Promise.resolve(this);
            });
        }
    }
    /**
     * Function to parse custom scalars into Date types
     *
     * @param value - value to parse
     */
    function parseDate(value) {
        try {
            return value ? new Date(value) : undefined;
        }
        catch (e) {
            return undefined;
        }
    }
    /**
     * Function to parse custom scalars into JSON objects
     *
     * @param value - value to parse
     */
    function parseJson(value) {
        try {
            return value ? JSON.parse(value) : undefined;
        }
        catch (e) {
            return undefined;
        }
    }
    /**
     * A bot actor is an actor that is not a user, but an application or integration.
     *
     * @param request - function to call the graphql client
     * @param data - L.ActorBotFragment response data
     */
    class ActorBot extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.avatarUrl = (_a = data.avatarUrl) !== null && _a !== void 0 ? _a : undefined;
            this.id = (_b = data.id) !== null && _b !== void 0 ? _b : undefined;
            this.name = (_c = data.name) !== null && _c !== void 0 ? _c : undefined;
            this.subType = (_d = data.subType) !== null && _d !== void 0 ? _d : undefined;
            this.type = data.type;
            this.userDisplayName = (_e = data.userDisplayName) !== null && _e !== void 0 ? _e : undefined;
        }
    }
    /**
     * An API key. Grants access to the user's resources.
     *
     * @param request - function to call the graphql client
     * @param data - L.ApiKeyFragment response data
     */
    class ApiKey extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.label = data.label;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
        }
    }
    /**
     * ApiKeyConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ApiKeyConnection model
     * @param data - ApiKeyConnection response data
     */
    class ApiKeyConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ApiKey(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * ApiKeyPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ApiKeyPayloadFragment response data
     */
    class ApiKeyPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.apiKey = new ApiKey(request, data.apiKey);
        }
    }
    /**
     * Public information of the OAuth application.
     *
     * @param request - function to call the graphql client
     * @param data - L.ApplicationFragment response data
     */
    class Application extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.clientId = data.clientId;
            this.description = (_a = data.description) !== null && _a !== void 0 ? _a : undefined;
            this.developer = data.developer;
            this.developerUrl = data.developerUrl;
            this.id = data.id;
            this.imageUrl = (_b = data.imageUrl) !== null && _b !== void 0 ? _b : undefined;
            this.name = data.name;
        }
    }
    /**
     * A generic payload return from entity archive or deletion mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.ArchivePayloadFragment response data
     */
    class ArchivePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * Contains requested archived model objects.
     *
     * @param request - function to call the graphql client
     * @param data - L.ArchiveResponseFragment response data
     */
    class ArchiveResponse extends Request {
        constructor(request, data) {
            super(request);
            this.archive = data.archive;
            this.databaseVersion = data.databaseVersion;
            this.includesDependencies = data.includesDependencies;
            this.totalCount = data.totalCount;
        }
    }
    /**
     * AsksChannelConnectPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.AsksChannelConnectPayloadFragment response data
     */
    class AsksChannelConnectPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.addBot = data.addBot;
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.mapping = new SlackChannelNameMapping(request, data.mapping);
            this._integration = (_a = data.integration) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The integration that was created or updated. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * Issue attachment (e.g. support ticket, pull request).
     *
     * @param request - function to call the graphql client
     * @param data - L.AttachmentFragment response data
     */
    class Attachment extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.groupBySource = data.groupBySource;
            this.id = data.id;
            this.metadata = data.metadata;
            this.source = (_c = data.source) !== null && _c !== void 0 ? _c : undefined;
            this.sourceType = (_d = data.sourceType) !== null && _d !== void 0 ? _d : undefined;
            this.subtitle = (_e = data.subtitle) !== null && _e !== void 0 ? _e : undefined;
            this.title = data.title;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
            this.url = data.url;
            this._creator = (_g = data.creator) !== null && _g !== void 0 ? _g : undefined;
            this._externalUserCreator = (_h = data.externalUserCreator) !== null && _h !== void 0 ? _h : undefined;
            this._issue = data.issue;
        }
        /** The creator of the attachment. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The non-Linear user who created the attachment. */
        get externalUserCreator() {
            var _a, _b;
            return ((_a = this._externalUserCreator) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserCreator) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The issue this attachment belongs to. */
        get issue() {
            return new IssueQuery(this._request).fetch(this._issue.id);
        }
        /** [DEPRECATED] Archives an issue attachment. */
        archive() {
            return new ArchiveAttachmentMutation(this._request).fetch(this.id);
        }
        /** Creates a new attachment, or updates existing if the same `url` and `issueId` is used. */
        create(input) {
            return new CreateAttachmentMutation(this._request).fetch(input);
        }
        /** Deletes an issue attachment. */
        delete() {
            return new DeleteAttachmentMutation(this._request).fetch(this.id);
        }
        /** Updates an existing issue attachment. */
        update(input) {
            return new UpdateAttachmentMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.AttachmentArchivePayloadFragment response data
     */
    class AttachmentArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new AttachmentQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * AttachmentConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this AttachmentConnection model
     * @param data - AttachmentConnection response data
     */
    class AttachmentConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Attachment(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * AttachmentPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.AttachmentPayloadFragment response data
     */
    class AttachmentPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._attachment = data.attachment;
        }
        /** The issue attachment that was created. */
        get attachment() {
            return new AttachmentQuery(this._request).fetch(this._attachment.id);
        }
    }
    /**
     * AttachmentSourcesPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.AttachmentSourcesPayloadFragment response data
     */
    class AttachmentSourcesPayload extends Request {
        constructor(request, data) {
            super(request);
            this.sources = data.sources;
        }
    }
    /**
     * Workspace audit log entry object.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuditEntryFragment response data
     */
    class AuditEntry extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = parseDate(data.archivedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.countryCode = (_c = data.countryCode) !== null && _c !== void 0 ? _c : undefined;
            this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
            this.id = data.id;
            this.ip = (_e = data.ip) !== null && _e !== void 0 ? _e : undefined;
            this.metadata = (_f = data.metadata) !== null && _f !== void 0 ? _f : undefined;
            this.requestInformation = (_g = data.requestInformation) !== null && _g !== void 0 ? _g : undefined;
            this.type = data.type;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : new Date();
            this._actor = (_j = data.actor) !== null && _j !== void 0 ? _j : undefined;
        }
        /** The user that caused the audit entry to be created. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The organization the audit log belongs to. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
    }
    /**
     * AuditEntryConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this AuditEntryConnection model
     * @param data - AuditEntryConnection response data
     */
    class AuditEntryConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new AuditEntry(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * AuditEntryType model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuditEntryTypeFragment response data
     */
    class AuditEntryType extends Request {
        constructor(request, data) {
            super(request);
            this.description = data.description;
            this.type = data.type;
        }
    }
    /**
     * AuthApiKey model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthApiKeyFragment response data
     */
    class AuthApiKey extends Request {
        constructor(request, data) {
            super(request);
            this.id = data.id;
        }
    }
    /**
     * AuthApiKeyPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthApiKeyPayloadFragment response data
     */
    class AuthApiKeyPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
            this.authApiKey = new AuthApiKey(request, data.authApiKey);
        }
    }
    /**
     * An email address that can be used for submitting issues.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthEmailIntakeAddressFragment response data
     */
    class AuthEmailIntakeAddress extends Request {
        constructor(request, data) {
            super(request);
            this.address = data.address;
            this.enabled = data.enabled;
            this.id = data.id;
            this.creator = data.creator ? new AuthUser(request, data.creator) : undefined;
            this.organization = new AuthOrganization(request, data.organization);
        }
    }
    /**
     * AuthIntegration model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthIntegrationFragment response data
     */
    class AuthIntegration extends Request {
        constructor(request, data) {
            super(request);
            this.id = data.id;
        }
    }
    /**
     * AuthOauthClient model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthOauthClientFragment response data
     */
    class AuthOauthClient extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.clientId = data.clientId;
            this.clientSecret = data.clientSecret;
            this.creatorId = data.creatorId;
            this.description = (_b = data.description) !== null && _b !== void 0 ? _b : undefined;
            this.developer = data.developer;
            this.developerUrl = data.developerUrl;
            this.id = data.id;
            this.imageUrl = (_c = data.imageUrl) !== null && _c !== void 0 ? _c : undefined;
            this.name = data.name;
            this.organizationId = data.organizationId;
            this.publicEnabled = data.publicEnabled;
            this.redirectUris = data.redirectUris;
            this.webhookResourceTypes = data.webhookResourceTypes;
            this.webhookSecret = (_d = data.webhookSecret) !== null && _d !== void 0 ? _d : undefined;
            this.webhookUrl = (_e = data.webhookUrl) !== null && _e !== void 0 ? _e : undefined;
        }
    }
    /**
     * AuthOauthClient with token creator IDs and counts (memberships), for use in the GraphQL API.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthOauthClientWithMembershipsFragment response data
     */
    class AuthOauthClientWithMemberships extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.appId = data.appId;
            this.clientId = data.clientId;
            this.imageUrl = (_a = data.imageUrl) !== null && _a !== void 0 ? _a : undefined;
            this.name = data.name;
            this.scope = data.scope;
            this.totalMembers = data.totalMembers;
            this.webhookUrl = (_b = data.webhookUrl) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * AuthOauthClient with scope from OauthToken, for use in the GraphQL API.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthOauthClientWithScopeFragment response data
     */
    class AuthOauthClientWithScope extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.appId = data.appId;
            this.clientId = data.clientId;
            this.imageUrl = (_a = data.imageUrl) !== null && _a !== void 0 ? _a : undefined;
            this.name = data.name;
            this.scope = data.scope;
            this.webhookUrl = (_b = data.webhookUrl) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * AuthOauthClientWithTokens model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthOauthClientWithTokensFragment response data
     */
    class AuthOauthClientWithTokens extends Request {
        constructor(request, data) {
            super(request);
            this.client = new AuthOauthClient(request, data.client);
            this.tokens = data.tokens.map(node => new OauthToken(request, node));
        }
    }
    /**
     * An organization. Organizations are root-level objects that contain users and teams.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthOrganizationFragment response data
     */
    class AuthOrganization extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.allowedAuthServices = data.allowedAuthServices;
            this.deletionRequestedAt = (_a = parseDate(data.deletionRequestedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.enabled = data.enabled;
            this.id = data.id;
            this.logoUrl = (_b = data.logoUrl) !== null && _b !== void 0 ? _b : undefined;
            this.name = data.name;
            this.previousUrlKeys = data.previousUrlKeys;
            this.region = data.region;
            this.samlEnabled = data.samlEnabled;
            this.scimEnabled = data.scimEnabled;
            this.serviceId = data.serviceId;
            this.urlKey = data.urlKey;
            this.userCount = data.userCount;
            this.releaseChannel = data.releaseChannel;
        }
    }
    /**
     * AuthOrganizationBucketNamePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthOrganizationBucketNamePayloadFragment response data
     */
    class AuthOrganizationBucketNamePayload extends Request {
        constructor(request, data) {
            super(request);
            this.importsBucketName = data.importsBucketName;
            this.region = data.region;
            this.uploadsBucketName = data.uploadsBucketName;
        }
    }
    /**
     * AuthOrganizationDomain model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthOrganizationDomainFragment response data
     */
    class AuthOrganizationDomain extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.claimed = (_a = data.claimed) !== null && _a !== void 0 ? _a : undefined;
            this.disableOrganizationCreation = (_b = data.disableOrganizationCreation) !== null && _b !== void 0 ? _b : undefined;
            this.id = data.id;
            this.name = data.name;
            this.organizationId = data.organizationId;
            this.verified = data.verified;
            this.authType = data.authType;
        }
    }
    /**
     * AuthOrganizationExistsPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthOrganizationExistsPayloadFragment response data
     */
    class AuthOrganizationExistsPayload extends Request {
        constructor(request, data) {
            super(request);
            this.exists = data.exists;
            this.success = data.success;
        }
    }
    /**
     * An invitation to the organization that has been sent via email.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthOrganizationInviteFragment response data
     */
    class AuthOrganizationInvite extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.expiresAt = (_a = parseDate(data.expiresAt)) !== null && _a !== void 0 ? _a : undefined;
            this.id = data.id;
        }
    }
    /**
     * AuthOrganizationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthOrganizationPayloadFragment response data
     */
    class AuthOrganizationPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
            this.authOrganization = new AuthOrganization(request, data.authOrganization);
        }
    }
    /**
     * AuthResolverResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthResolverResponseFragment response data
     */
    class AuthResolverResponse extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.allowDomainAccess = (_a = data.allowDomainAccess) !== null && _a !== void 0 ? _a : undefined;
            this.email = data.email;
            this.id = data.id;
            this.lastUsedOrganizationId = (_b = data.lastUsedOrganizationId) !== null && _b !== void 0 ? _b : undefined;
            this.token = (_c = data.token) !== null && _c !== void 0 ? _c : undefined;
            this.availableOrganizations = data.availableOrganizations
                ? data.availableOrganizations.map(node => new AuthOrganization(request, node))
                : undefined;
            this.lockedOrganizations = data.lockedOrganizations
                ? data.lockedOrganizations.map(node => new AuthOrganization(request, node))
                : undefined;
            this.lockedUsers = data.lockedUsers.map(node => new AuthUser(request, node));
            this.users = data.users.map(node => new AuthUser(request, node));
        }
    }
    /**
     * AuthSuccessPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthSuccessPayloadFragment response data
     */
    class AuthSuccessPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * A user that has access to the the resources of an organization.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthUserFragment response data
     */
    class AuthUser extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.active = data.active;
            this.avatarUrl = (_a = data.avatarUrl) !== null && _a !== void 0 ? _a : undefined;
            this.displayName = data.displayName;
            this.email = data.email;
            this.id = data.id;
            this.name = data.name;
            this.userAccountId = data.userAccountId;
            this.organization = new AuthOrganization(request, data.organization);
            this.role = data.role;
        }
    }
    /**
     * User authentication session.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthenticationSessionFragment response data
     */
    class AuthenticationSession extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
            super(request);
            this.browserType = (_a = data.browserType) !== null && _a !== void 0 ? _a : undefined;
            this.client = (_b = data.client) !== null && _b !== void 0 ? _b : undefined;
            this.countryCodes = data.countryCodes;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.id = data.id;
            this.ip = (_d = data.ip) !== null && _d !== void 0 ? _d : undefined;
            this.lastActiveAt = (_e = parseDate(data.lastActiveAt)) !== null && _e !== void 0 ? _e : undefined;
            this.location = (_f = data.location) !== null && _f !== void 0 ? _f : undefined;
            this.locationCity = (_g = data.locationCity) !== null && _g !== void 0 ? _g : undefined;
            this.locationCountry = (_h = data.locationCountry) !== null && _h !== void 0 ? _h : undefined;
            this.locationCountryCode = (_j = data.locationCountryCode) !== null && _j !== void 0 ? _j : undefined;
            this.locationRegionCode = (_k = data.locationRegionCode) !== null && _k !== void 0 ? _k : undefined;
            this.name = data.name;
            this.operatingSystem = (_l = data.operatingSystem) !== null && _l !== void 0 ? _l : undefined;
            this.updatedAt = (_m = parseDate(data.updatedAt)) !== null && _m !== void 0 ? _m : new Date();
            this.userAgent = (_o = data.userAgent) !== null && _o !== void 0 ? _o : undefined;
            this.type = data.type;
        }
    }
    /**
     * Authentication session information.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthenticationSessionResponseFragment response data
     */
    class AuthenticationSessionResponse extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
            super(request);
            this.browserType = (_a = data.browserType) !== null && _a !== void 0 ? _a : undefined;
            this.client = (_b = data.client) !== null && _b !== void 0 ? _b : undefined;
            this.countryCodes = data.countryCodes;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.id = data.id;
            this.ip = (_d = data.ip) !== null && _d !== void 0 ? _d : undefined;
            this.isCurrentSession = data.isCurrentSession;
            this.lastActiveAt = (_e = parseDate(data.lastActiveAt)) !== null && _e !== void 0 ? _e : undefined;
            this.location = (_f = data.location) !== null && _f !== void 0 ? _f : undefined;
            this.locationCity = (_g = data.locationCity) !== null && _g !== void 0 ? _g : undefined;
            this.locationCountry = (_h = data.locationCountry) !== null && _h !== void 0 ? _h : undefined;
            this.locationCountryCode = (_j = data.locationCountryCode) !== null && _j !== void 0 ? _j : undefined;
            this.locationRegionCode = (_k = data.locationRegionCode) !== null && _k !== void 0 ? _k : undefined;
            this.name = data.name;
            this.operatingSystem = (_l = data.operatingSystem) !== null && _l !== void 0 ? _l : undefined;
            this.updatedAt = (_m = parseDate(data.updatedAt)) !== null && _m !== void 0 ? _m : new Date();
            this.userAgent = (_o = data.userAgent) !== null && _o !== void 0 ? _o : undefined;
            this.type = data.type;
        }
    }
    /**
     * AuthorizedApplicationBase model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthorizedApplicationBaseFragment response data
     */
    class AuthorizedApplicationBase extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.appId = data.appId;
            this.clientId = data.clientId;
            this.imageUrl = (_a = data.imageUrl) !== null && _a !== void 0 ? _a : undefined;
            this.name = data.name;
            this.scope = data.scope;
        }
    }
    /**
     * A comment associated with an issue.
     *
     * @param request - function to call the graphql client
     * @param data - L.CommentFragment response data
     */
    class Comment extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.body = data.body;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.editedAt = (_c = parseDate(data.editedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.quotedText = (_d = data.quotedText) !== null && _d !== void 0 ? _d : undefined;
            this.reactionData = data.reactionData;
            this.resolvedAt = (_e = parseDate(data.resolvedAt)) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
            this.url = data.url;
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.documentContent = data.documentContent ? new DocumentContent(request, data.documentContent) : undefined;
            this.reactions = data.reactions.map(node => new Reaction(request, node));
            this._externalUser = (_g = data.externalUser) !== null && _g !== void 0 ? _g : undefined;
            this._issue = (_h = data.issue) !== null && _h !== void 0 ? _h : undefined;
            this._parent = (_j = data.parent) !== null && _j !== void 0 ? _j : undefined;
            this._projectUpdate = (_k = data.projectUpdate) !== null && _k !== void 0 ? _k : undefined;
            this._resolvingComment = (_l = data.resolvingComment) !== null && _l !== void 0 ? _l : undefined;
            this._resolvingUser = (_m = data.resolvingUser) !== null && _m !== void 0 ? _m : undefined;
            this._user = (_o = data.user) !== null && _o !== void 0 ? _o : undefined;
        }
        /** The external user who wrote the comment. */
        get externalUser() {
            var _a, _b;
            return ((_a = this._externalUser) === null || _a === void 0 ? void 0 : _a.id) ? new ExternalUserQuery(this._request).fetch((_b = this._externalUser) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The issue that the comment is associated with. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The parent comment under which the current comment is nested. */
        get parent() {
            var _a, _b;
            return ((_a = this._parent) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._parent) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The project update that the comment is associated with. */
        get projectUpdate() {
            var _a, _b;
            return ((_a = this._projectUpdate) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectUpdateQuery(this._request).fetch((_b = this._projectUpdate) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The comment that resolved the thread. */
        get resolvingComment() {
            var _a, _b;
            return ((_a = this._resolvingComment) === null || _a === void 0 ? void 0 : _a.id)
                ? new CommentQuery(this._request).fetch({ id: (_b = this._resolvingComment) === null || _b === void 0 ? void 0 : _b.id })
                : undefined;
        }
        /** The user that resolved the thread. */
        get resolvingUser() {
            var _a, _b;
            return ((_a = this._resolvingUser) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._resolvingUser) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user who wrote the comment. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The children of the comment. */
        children(variables) {
            return new Comment_ChildrenQuery(this._request, variables).fetch(variables);
        }
        /** Creates a new comment. */
        create(input) {
            return new CreateCommentMutation(this._request).fetch(input);
        }
        /** Deletes a comment. */
        delete() {
            return new DeleteCommentMutation(this._request).fetch(this.id);
        }
        /** Updates a comment. */
        update(input) {
            return new UpdateCommentMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * CommentConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this CommentConnection model
     * @param data - CommentConnection response data
     */
    class CommentConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Comment(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A comment related notification.
     *
     * @param request - function to call the graphql client
     * @param data - L.CommentNotificationFragment response data
     */
    class CommentNotification extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.commentId = (_a = data.commentId) !== null && _a !== void 0 ? _a : undefined;
            this.parentCommentId = (_b = data.parentCommentId) !== null && _b !== void 0 ? _b : undefined;
            this.reactionEmoji = (_c = data.reactionEmoji) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    /**
     * CommentPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CommentPayloadFragment response data
     */
    class CommentPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._comment = data.comment;
        }
        /** The comment that was created or updated. */
        get comment() {
            return new CommentQuery(this._request).fetch({ id: this._comment.id });
        }
    }
    /**
     * ContactPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ContactPayloadFragment response data
     */
    class ContactPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * CreateCsvExportReportPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CreateCsvExportReportPayloadFragment response data
     */
    class CreateCsvExportReportPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * CreateOrJoinOrganizationResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.CreateOrJoinOrganizationResponseFragment response data
     */
    class CreateOrJoinOrganizationResponse extends Request {
        constructor(request, data) {
            super(request);
            this.organization = new AuthOrganization(request, data.organization);
            this.user = new AuthUser(request, data.user);
        }
    }
    /**
     * A custom view that has been saved by a user.
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomViewFragment response data
     */
    class CustomView extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.description = (_d = data.description) !== null && _d !== void 0 ? _d : undefined;
            this.filterData = data.filterData;
            this.filters = data.filters;
            this.icon = (_e = data.icon) !== null && _e !== void 0 ? _e : undefined;
            this.id = data.id;
            this.modelName = data.modelName;
            this.name = data.name;
            this.projectFilterData = (_f = data.projectFilterData) !== null && _f !== void 0 ? _f : undefined;
            this.shared = data.shared;
            this.slugId = (_g = data.slugId) !== null && _g !== void 0 ? _g : undefined;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : new Date();
            this.organizationViewPreferences = data.organizationViewPreferences
                ? new ViewPreferences(request, data.organizationViewPreferences)
                : undefined;
            this.userViewPreferences = data.userViewPreferences
                ? new ViewPreferences(request, data.userViewPreferences)
                : undefined;
            this.viewPreferencesValues = data.viewPreferencesValues
                ? new ViewPreferencesValues(request, data.viewPreferencesValues)
                : undefined;
            this._creator = data.creator;
            this._owner = data.owner;
            this._team = (_j = data.team) !== null && _j !== void 0 ? _j : undefined;
            this._updatedBy = (_k = data.updatedBy) !== null && _k !== void 0 ? _k : undefined;
        }
        /** The user who created the custom view. */
        get creator() {
            return new UserQuery(this._request).fetch(this._creator.id);
        }
        /** The organization of the custom view. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The user who owns the custom view. */
        get owner() {
            return new UserQuery(this._request).fetch(this._owner.id);
        }
        /** The team associated with the custom view. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user who last updated the custom view. */
        get updatedBy() {
            var _a, _b;
            return ((_a = this._updatedBy) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._updatedBy) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Issues associated with the custom view. */
        issues(variables) {
            return new CustomView_IssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Projects associated with the custom view. */
        projects(variables) {
            return new CustomView_ProjectsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Creates a new custom view. */
        create(input) {
            return new CreateCustomViewMutation(this._request).fetch(input);
        }
        /** Deletes a custom view. */
        delete() {
            return new DeleteCustomViewMutation(this._request).fetch(this.id);
        }
        /** Updates a custom view. */
        update(input) {
            return new UpdateCustomViewMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * CustomViewConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this CustomViewConnection model
     * @param data - CustomViewConnection response data
     */
    class CustomViewConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new CustomView(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * CustomViewHasSubscribersPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomViewHasSubscribersPayloadFragment response data
     */
    class CustomViewHasSubscribersPayload extends Request {
        constructor(request, data) {
            super(request);
            this.hasSubscribers = data.hasSubscribers;
        }
    }
    /**
     * A custom view notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomViewNotificationSubscriptionFragment response data
     */
    class CustomViewNotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.notificationSubscriptionTypes = data.notificationSubscriptionTypes;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = data.customView;
            this._cycle = (_f = data.cycle) !== null && _f !== void 0 ? _f : undefined;
            this._initiative = (_g = data.initiative) !== null && _g !== void 0 ? _g : undefined;
            this._label = (_h = data.label) !== null && _h !== void 0 ? _h : undefined;
            this._project = (_j = data.project) !== null && _j !== void 0 ? _j : undefined;
            this._subscriber = data.subscriber;
            this._team = (_k = data.team) !== null && _k !== void 0 ? _k : undefined;
            this._user = (_l = data.user) !== null && _l !== void 0 ? _l : undefined;
        }
        /** The custom view subscribed to. */
        get customView() {
            return new CustomViewQuery(this._request).fetch(this._customView.id);
        }
        /** The contextual cycle view associated with the notification subscription. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual initiative view associated with the notification subscription. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual label view associated with the notification subscription. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual project view associated with the notification subscription. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The team associated with the notification subscription. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user view associated with the notification subscription. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * CustomViewPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomViewPayloadFragment response data
     */
    class CustomViewPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._customView = data.customView;
        }
        /** The custom view that was created or updated. */
        get customView() {
            return new CustomViewQuery(this._request).fetch(this._customView.id);
        }
    }
    /**
     * CustomViewSuggestionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomViewSuggestionPayloadFragment response data
     */
    class CustomViewSuggestionPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.description = (_a = data.description) !== null && _a !== void 0 ? _a : undefined;
            this.icon = (_b = data.icon) !== null && _b !== void 0 ? _b : undefined;
            this.name = (_c = data.name) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    /**
     * CustomerNeedPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerNeedPayloadFragment response data
     */
    class CustomerNeedPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * CustomerPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerPayloadFragment response data
     */
    class CustomerPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * CustomerStatusPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerStatusPayloadFragment response data
     */
    class CustomerStatusPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * CustomerTierPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerTierPayloadFragment response data
     */
    class CustomerTierPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * A set of issues to be resolved in a specified amount of time.
     *
     * @param request - function to call the graphql client
     * @param data - L.CycleFragment response data
     */
    class Cycle extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.autoArchivedAt = (_b = parseDate(data.autoArchivedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.completedAt = (_c = parseDate(data.completedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.completedIssueCountHistory = data.completedIssueCountHistory;
            this.completedScopeHistory = data.completedScopeHistory;
            this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
            this.description = (_e = data.description) !== null && _e !== void 0 ? _e : undefined;
            this.endsAt = (_f = parseDate(data.endsAt)) !== null && _f !== void 0 ? _f : new Date();
            this.id = data.id;
            this.inProgressScopeHistory = data.inProgressScopeHistory;
            this.issueCountHistory = data.issueCountHistory;
            this.name = (_g = data.name) !== null && _g !== void 0 ? _g : undefined;
            this.number = data.number;
            this.progress = data.progress;
            this.scopeHistory = data.scopeHistory;
            this.startsAt = (_h = parseDate(data.startsAt)) !== null && _h !== void 0 ? _h : new Date();
            this.updatedAt = (_j = parseDate(data.updatedAt)) !== null && _j !== void 0 ? _j : new Date();
            this._team = data.team;
        }
        /** The team that the cycle is associated with. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** Issues associated with the cycle. */
        issues(variables) {
            return new Cycle_IssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Issues that weren't completed when the cycle was closed. */
        uncompletedIssuesUponClose(variables) {
            return new Cycle_UncompletedIssuesUponCloseQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Archives a cycle. */
        archive() {
            return new ArchiveCycleMutation(this._request).fetch(this.id);
        }
        /** Creates a new cycle. */
        create(input) {
            return new CreateCycleMutation(this._request).fetch(input);
        }
        /** Updates a cycle. */
        update(input) {
            return new UpdateCycleMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.CycleArchivePayloadFragment response data
     */
    class CycleArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * CycleConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this CycleConnection model
     * @param data - CycleConnection response data
     */
    class CycleConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Cycle(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A cycle notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.CycleNotificationSubscriptionFragment response data
     */
    class CycleNotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.notificationSubscriptionTypes = data.notificationSubscriptionTypes;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = (_f = data.customView) !== null && _f !== void 0 ? _f : undefined;
            this._cycle = data.cycle;
            this._initiative = (_g = data.initiative) !== null && _g !== void 0 ? _g : undefined;
            this._label = (_h = data.label) !== null && _h !== void 0 ? _h : undefined;
            this._project = (_j = data.project) !== null && _j !== void 0 ? _j : undefined;
            this._subscriber = data.subscriber;
            this._team = (_k = data.team) !== null && _k !== void 0 ? _k : undefined;
            this._user = (_l = data.user) !== null && _l !== void 0 ? _l : undefined;
        }
        /** The contextual custom view associated with the notification subscription. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The cycle subscribed to. */
        get cycle() {
            return new CycleQuery(this._request).fetch(this._cycle.id);
        }
        /** The contextual initiative view associated with the notification subscription. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual label view associated with the notification subscription. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual project view associated with the notification subscription. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The team associated with the notification subscription. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user view associated with the notification subscription. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * CyclePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CyclePayloadFragment response data
     */
    class CyclePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._cycle = (_a = data.cycle) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The Cycle that was created or updated. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * A generic payload return from entity deletion mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.DeletePayloadFragment response data
     */
    class DeletePayload extends Request {
        constructor(request, data) {
            super(request);
            this.entityId = data.entityId;
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * A diary entry
     *
     * @param request - function to call the graphql client
     * @param data - L.DiaryEntryFragment response data
     */
    class DiaryEntry extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.date = data.date;
            this.id = data.id;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._user = data.user;
        }
        /** The user who the diary belongs to. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
    }
    /**
     * DiaryEntryConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this DiaryEntryConnection model
     * @param data - DiaryEntryConnection response data
     */
    class DiaryEntryConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new DiaryEntry(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A document that can be attached to different entities.
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentFragment response data
     */
    class Document extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
            this.content = (_c = data.content) !== null && _c !== void 0 ? _c : undefined;
            this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
            this.documentContentId = (_e = data.documentContentId) !== null && _e !== void 0 ? _e : undefined;
            this.hiddenAt = (_f = parseDate(data.hiddenAt)) !== null && _f !== void 0 ? _f : undefined;
            this.icon = (_g = data.icon) !== null && _g !== void 0 ? _g : undefined;
            this.id = data.id;
            this.slugId = data.slugId;
            this.sortOrder = data.sortOrder;
            this.title = data.title;
            this.trashed = (_h = data.trashed) !== null && _h !== void 0 ? _h : undefined;
            this.updatedAt = (_j = parseDate(data.updatedAt)) !== null && _j !== void 0 ? _j : new Date();
            this.url = data.url;
            this._creator = (_k = data.creator) !== null && _k !== void 0 ? _k : undefined;
            this._lastAppliedTemplate = (_l = data.lastAppliedTemplate) !== null && _l !== void 0 ? _l : undefined;
            this._project = (_m = data.project) !== null && _m !== void 0 ? _m : undefined;
            this._updatedBy = (_o = data.updatedBy) !== null && _o !== void 0 ? _o : undefined;
        }
        /** The user who created the document. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The last template that was applied to this document. */
        get lastAppliedTemplate() {
            var _a, _b;
            return ((_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._lastAppliedTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The project that the document is associated with. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user who last updated the document. */
        get updatedBy() {
            var _a, _b;
            return ((_a = this._updatedBy) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._updatedBy) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Comments associated with the document. */
        comments(variables) {
            return new Document_CommentsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Creates a new document. */
        create(input) {
            return new CreateDocumentMutation(this._request).fetch(input);
        }
        /** Deletes (trashes) a document. */
        delete() {
            return new DeleteDocumentMutation(this._request).fetch(this.id);
        }
        /** Restores a document. */
        unarchive() {
            return new UnarchiveDocumentMutation(this._request).fetch(this.id);
        }
        /** Updates a document. */
        update(input) {
            return new UpdateDocumentMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentArchivePayloadFragment response data
     */
    class DocumentArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new DocumentQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * DocumentConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this DocumentConnection model
     * @param data - DocumentConnection response data
     */
    class DocumentConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Document(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A document content for a project.
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentContentFragment response data
     */
    class DocumentContent extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.content = (_b = data.content) !== null && _b !== void 0 ? _b : undefined;
            this.contentState = (_c = data.contentState) !== null && _c !== void 0 ? _c : undefined;
            this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
            this.id = data.id;
            this.restoredAt = (_e = parseDate(data.restoredAt)) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
            this._document = (_g = data.document) !== null && _g !== void 0 ? _g : undefined;
            this._initiative = (_h = data.initiative) !== null && _h !== void 0 ? _h : undefined;
            this._issue = (_j = data.issue) !== null && _j !== void 0 ? _j : undefined;
            this._project = (_k = data.project) !== null && _k !== void 0 ? _k : undefined;
            this._projectMilestone = (_l = data.projectMilestone) !== null && _l !== void 0 ? _l : undefined;
        }
        /** The document that the content is associated with. */
        get document() {
            var _a, _b;
            return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.id) ? new DocumentQuery(this._request).fetch((_b = this._document) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The initiative that the content is associated with. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The issue that the content is associated with. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The project that the content is associated with. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The project milestone that the content is associated with. */
        get projectMilestone() {
            var _a, _b;
            return ((_a = this._projectMilestone) === null || _a === void 0 ? void 0 : _a.id)
                ? new ProjectMilestoneQuery(this._request).fetch((_b = this._projectMilestone) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
    }
    /**
     * A document content history for a document.
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentContentHistoryFragment response data
     */
    class DocumentContentHistory extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.actorIds = data.actorIds;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.contentDataSnapshotAt = (_b = parseDate(data.contentDataSnapshotAt)) !== null && _b !== void 0 ? _b : new Date();
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.id = data.id;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this.documentContent = new DocumentContent(request, data.documentContent);
        }
    }
    /**
     * DocumentContentHistoryPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentContentHistoryPayloadFragment response data
     */
    class DocumentContentHistoryPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
            this.history = data.history.map(node => new DocumentContentHistoryType(request, node));
        }
    }
    /**
     * DocumentContentHistoryType model
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentContentHistoryTypeFragment response data
     */
    class DocumentContentHistoryType extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.actorIds = (_a = data.actorIds) !== null && _a !== void 0 ? _a : undefined;
            this.contentDataSnapshotAt = (_b = parseDate(data.contentDataSnapshotAt)) !== null && _b !== void 0 ? _b : new Date();
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.id = data.id;
        }
    }
    /**
     * A document related notification.
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentNotificationFragment response data
     */
    class DocumentNotification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.commentId = (_b = data.commentId) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.documentId = data.documentId;
            this.emailedAt = (_d = parseDate(data.emailedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.parentCommentId = (_e = data.parentCommentId) !== null && _e !== void 0 ? _e : undefined;
            this.reactionEmoji = (_f = data.reactionEmoji) !== null && _f !== void 0 ? _f : undefined;
            this.readAt = (_g = parseDate(data.readAt)) !== null && _g !== void 0 ? _g : undefined;
            this.snoozedUntilAt = (_h = parseDate(data.snoozedUntilAt)) !== null && _h !== void 0 ? _h : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_j = parseDate(data.unsnoozedAt)) !== null && _j !== void 0 ? _j : undefined;
            this.updatedAt = (_k = parseDate(data.updatedAt)) !== null && _k !== void 0 ? _k : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this._actor = (_l = data.actor) !== null && _l !== void 0 ? _l : undefined;
            this._externalUserActor = (_m = data.externalUserActor) !== null && _m !== void 0 ? _m : undefined;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
    }
    /**
     * DocumentPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentPayloadFragment response data
     */
    class DocumentPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._document = data.document;
        }
        /** The document that was created or updated. */
        get document() {
            return new DocumentQuery(this._request).fetch(this._document.id);
        }
    }
    /**
     * DocumentSearchPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentSearchPayloadFragment response data
     */
    class DocumentSearchPayload extends Request {
        constructor(request, data) {
            super(request);
            this.totalCount = data.totalCount;
            this.archivePayload = new ArchiveResponse(request, data.archivePayload);
            this.pageInfo = new PageInfo(request, data.pageInfo);
            this.nodes = data.nodes.map(node => new DocumentSearchResult(request, node));
        }
    }
    /**
     * DocumentSearchResult model
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentSearchResultFragment response data
     */
    class DocumentSearchResult extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
            this.content = (_c = data.content) !== null && _c !== void 0 ? _c : undefined;
            this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
            this.documentContentId = (_e = data.documentContentId) !== null && _e !== void 0 ? _e : undefined;
            this.hiddenAt = (_f = parseDate(data.hiddenAt)) !== null && _f !== void 0 ? _f : undefined;
            this.icon = (_g = data.icon) !== null && _g !== void 0 ? _g : undefined;
            this.id = data.id;
            this.metadata = data.metadata;
            this.slugId = data.slugId;
            this.sortOrder = data.sortOrder;
            this.title = data.title;
            this.trashed = (_h = data.trashed) !== null && _h !== void 0 ? _h : undefined;
            this.updatedAt = (_j = parseDate(data.updatedAt)) !== null && _j !== void 0 ? _j : new Date();
            this.url = data.url;
            this._creator = (_k = data.creator) !== null && _k !== void 0 ? _k : undefined;
            this._lastAppliedTemplate = (_l = data.lastAppliedTemplate) !== null && _l !== void 0 ? _l : undefined;
            this._project = (_m = data.project) !== null && _m !== void 0 ? _m : undefined;
            this._updatedBy = (_o = data.updatedBy) !== null && _o !== void 0 ? _o : undefined;
        }
        /** The user who created the document. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The last template that was applied to this document. */
        get lastAppliedTemplate() {
            var _a, _b;
            return ((_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._lastAppliedTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The project that the document is associated with. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user who last updated the document. */
        get updatedBy() {
            var _a, _b;
            return ((_a = this._updatedBy) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._updatedBy) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * DocumentSearchResultConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this DocumentSearchResultConnection model
     * @param data - DocumentSearchResultConnection response data
     */
    class DocumentSearchResultConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new DocumentSearchResult(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A general purpose draft. Used for comments, project updates, etc.
     *
     * @param request - function to call the graphql client
     * @param data - L.DraftFragment response data
     */
    class Draft extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.bodyData = (_b = parseJson(data.bodyData)) !== null && _b !== void 0 ? _b : {};
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.data = (_d = data.data) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.isAutogenerated = data.isAutogenerated;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this._issue = (_f = data.issue) !== null && _f !== void 0 ? _f : undefined;
            this._parentComment = (_g = data.parentComment) !== null && _g !== void 0 ? _g : undefined;
            this._project = (_h = data.project) !== null && _h !== void 0 ? _h : undefined;
            this._projectUpdate = (_j = data.projectUpdate) !== null && _j !== void 0 ? _j : undefined;
            this._user = data.user;
        }
        /** The issue for which this is a draft comment. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The comment for which this is a draft comment reply. */
        get parentComment() {
            var _a, _b;
            return ((_a = this._parentComment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._parentComment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The project for which this is a draft project update. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The project update for which this is a draft comment. */
        get projectUpdate() {
            var _a, _b;
            return ((_a = this._projectUpdate) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectUpdateQuery(this._request).fetch((_b = this._projectUpdate) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user who created the draft. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
    }
    /**
     * An email address that can be used for submitting issues.
     *
     * @param request - function to call the graphql client
     * @param data - L.EmailIntakeAddressFragment response data
     */
    class EmailIntakeAddress extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.address = data.address;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.enabled = data.enabled;
            this.id = data.id;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._creator = (_d = data.creator) !== null && _d !== void 0 ? _d : undefined;
            this._team = (_e = data.team) !== null && _e !== void 0 ? _e : undefined;
            this._template = (_f = data.template) !== null && _f !== void 0 ? _f : undefined;
        }
        /** The user who created the email intake address. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The organization that the email address is associated with. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The team that the email address is associated with. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The template that the email address is associated with. */
        get template() {
            var _a, _b;
            return ((_a = this._template) === null || _a === void 0 ? void 0 : _a.id) ? new TemplateQuery(this._request).fetch((_b = this._template) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Creates a new email intake address. */
        create(input) {
            return new CreateEmailIntakeAddressMutation(this._request).fetch(input);
        }
        /** Deletes an email intake address object. */
        delete() {
            return new DeleteEmailIntakeAddressMutation(this._request).fetch(this.id);
        }
        /** Updates an existing email intake address. */
        update(input) {
            return new UpdateEmailIntakeAddressMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * EmailIntakeAddressPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.EmailIntakeAddressPayloadFragment response data
     */
    class EmailIntakeAddressPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.emailIntakeAddress = new EmailIntakeAddress(request, data.emailIntakeAddress);
        }
    }
    /**
     * EmailUnsubscribePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.EmailUnsubscribePayloadFragment response data
     */
    class EmailUnsubscribePayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * EmailUserAccountAuthChallengeResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.EmailUserAccountAuthChallengeResponseFragment response data
     */
    class EmailUserAccountAuthChallengeResponse extends Request {
        constructor(request, data) {
            super(request);
            this.authType = data.authType;
            this.success = data.success;
        }
    }
    /**
     * A custom emoji.
     *
     * @param request - function to call the graphql client
     * @param data - L.EmojiFragment response data
     */
    class Emoji extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.name = data.name;
            this.source = data.source;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.url = data.url;
            this._creator = (_d = data.creator) !== null && _d !== void 0 ? _d : undefined;
        }
        /** The user who created the emoji. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The organization that the emoji belongs to. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** Creates a custom emoji. */
        create(input) {
            return new CreateEmojiMutation(this._request).fetch(input);
        }
        /** Deletes an emoji. */
        delete() {
            return new DeleteEmojiMutation(this._request).fetch(this.id);
        }
    }
    /**
     * EmojiConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this EmojiConnection model
     * @param data - EmojiConnection response data
     */
    class EmojiConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Emoji(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * EmojiPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.EmojiPayloadFragment response data
     */
    class EmojiPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._emoji = data.emoji;
        }
        /** The emoji that was created. */
        get emoji() {
            return new EmojiQuery(this._request).fetch(this._emoji.id);
        }
    }
    /**
     * A basic entity.
     *
     * @param request - function to call the graphql client
     * @param data - L.EntityFragment response data
     */
    class Entity extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
        }
    }
    /**
     * An external link for an entity like initiative, etc...
     *
     * @param request - function to call the graphql client
     * @param data - L.EntityExternalLinkFragment response data
     */
    class EntityExternalLink extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.label = data.label;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.url = data.url;
            this._creator = data.creator;
            this._initiative = (_d = data.initiative) !== null && _d !== void 0 ? _d : undefined;
        }
        /** The user who created the link. */
        get creator() {
            return new UserQuery(this._request).fetch(this._creator.id);
        }
        /** The initiative that the link is associated with. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Creates a new entity link. */
        create(input) {
            return new CreateEntityExternalLinkMutation(this._request).fetch(input);
        }
        /** Deletes an entity link. */
        delete() {
            return new DeleteEntityExternalLinkMutation(this._request).fetch(this.id);
        }
        /** Updates an entity link. */
        update(input) {
            return new UpdateEntityExternalLinkMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * EntityExternalLinkConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this EntityExternalLinkConnection model
     * @param data - EntityExternalLinkConnection response data
     */
    class EntityExternalLinkConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new EntityExternalLink(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * EntityExternalLinkPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.EntityExternalLinkPayloadFragment response data
     */
    class EntityExternalLinkPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entityExternalLink = data.entityExternalLink;
        }
        /** The link that was created or updated. */
        get entityExternalLink() {
            return new EntityExternalLinkQuery(this._request).fetch(this._entityExternalLink.id);
        }
    }
    /**
     * An external authenticated (e.g., through Slack) user which doesn't have a Linear account, but can create and update entities in Linear from the external system that authenticated them.
     *
     * @param request - function to call the graphql client
     * @param data - L.ExternalUserFragment response data
     */
    class ExternalUser extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.avatarUrl = (_b = data.avatarUrl) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.displayName = data.displayName;
            this.email = (_d = data.email) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.lastSeen = (_e = parseDate(data.lastSeen)) !== null && _e !== void 0 ? _e : undefined;
            this.name = data.name;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
        }
        /** Organization the external user belongs to. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
    }
    /**
     * ExternalUserConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ExternalUserConnection model
     * @param data - ExternalUserConnection response data
     */
    class ExternalUserConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ExternalUser(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A facet. Facets are joins between entities. A facet can tie a custom view to a project, or a a project to a roadmap for example.
     *
     * @param request - function to call the graphql client
     * @param data - L.FacetFragment response data
     */
    class Facet extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.sourcePage = (_d = data.sourcePage) !== null && _d !== void 0 ? _d : undefined;
            this._sourceInitiative = (_e = data.sourceInitiative) !== null && _e !== void 0 ? _e : undefined;
            this._sourceProject = (_f = data.sourceProject) !== null && _f !== void 0 ? _f : undefined;
            this._sourceTeam = (_g = data.sourceTeam) !== null && _g !== void 0 ? _g : undefined;
            this._targetCustomView = (_h = data.targetCustomView) !== null && _h !== void 0 ? _h : undefined;
        }
        /** The owning initiative. */
        get sourceInitiative() {
            var _a, _b;
            return ((_a = this._sourceInitiative) === null || _a === void 0 ? void 0 : _a.id)
                ? new InitiativeQuery(this._request).fetch((_b = this._sourceInitiative) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The owning organization. */
        get sourceOrganization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The owning project. */
        get sourceProject() {
            var _a, _b;
            return ((_a = this._sourceProject) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._sourceProject) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The owning team. */
        get sourceTeam() {
            var _a, _b;
            return ((_a = this._sourceTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._sourceTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The targeted custom view. */
        get targetCustomView() {
            var _a, _b;
            return ((_a = this._targetCustomView) === null || _a === void 0 ? void 0 : _a.id)
                ? new CustomViewQuery(this._request).fetch((_b = this._targetCustomView) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
    }
    /**
     * FacetConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this FacetConnection model
     * @param data - FacetConnection response data
     */
    class FacetConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Facet(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * User favorites presented in the sidebar.
     *
     * @param request - function to call the graphql client
     * @param data - L.FavoriteFragment response data
     */
    class Favorite extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.folderName = (_c = data.folderName) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.predefinedViewType = (_d = data.predefinedViewType) !== null && _d !== void 0 ? _d : undefined;
            this.sortOrder = data.sortOrder;
            this.type = data.type;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this.url = (_f = data.url) !== null && _f !== void 0 ? _f : undefined;
            this.initiativeTab = (_g = data.initiativeTab) !== null && _g !== void 0 ? _g : undefined;
            this.projectTab = (_h = data.projectTab) !== null && _h !== void 0 ? _h : undefined;
            this._customView = (_j = data.customView) !== null && _j !== void 0 ? _j : undefined;
            this._cycle = (_k = data.cycle) !== null && _k !== void 0 ? _k : undefined;
            this._document = (_l = data.document) !== null && _l !== void 0 ? _l : undefined;
            this._initiative = (_m = data.initiative) !== null && _m !== void 0 ? _m : undefined;
            this._issue = (_o = data.issue) !== null && _o !== void 0 ? _o : undefined;
            this._label = (_p = data.label) !== null && _p !== void 0 ? _p : undefined;
            this._owner = data.owner;
            this._parent = (_q = data.parent) !== null && _q !== void 0 ? _q : undefined;
            this._predefinedViewTeam = (_r = data.predefinedViewTeam) !== null && _r !== void 0 ? _r : undefined;
            this._project = (_s = data.project) !== null && _s !== void 0 ? _s : undefined;
            this._projectTeam = (_t = data.projectTeam) !== null && _t !== void 0 ? _t : undefined;
            this._roadmap = (_u = data.roadmap) !== null && _u !== void 0 ? _u : undefined;
            this._user = (_v = data.user) !== null && _v !== void 0 ? _v : undefined;
        }
        /** The favorited custom view. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The favorited cycle. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The favorited document. */
        get document() {
            var _a, _b;
            return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.id) ? new DocumentQuery(this._request).fetch((_b = this._document) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The favorited initiative. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The favorited issue. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The favorited label. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The owner of the favorite. */
        get owner() {
            return new UserQuery(this._request).fetch(this._owner.id);
        }
        /** The parent folder of the favorite. */
        get parent() {
            var _a, _b;
            return ((_a = this._parent) === null || _a === void 0 ? void 0 : _a.id) ? new FavoriteQuery(this._request).fetch((_b = this._parent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team of the favorited predefined view. */
        get predefinedViewTeam() {
            var _a, _b;
            return ((_a = this._predefinedViewTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._predefinedViewTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The favorited project. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** [DEPRECATED] The favorited team of the project. */
        get projectTeam() {
            var _a, _b;
            return ((_a = this._projectTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._projectTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The favorited roadmap. */
        get roadmap() {
            var _a, _b;
            return ((_a = this._roadmap) === null || _a === void 0 ? void 0 : _a.id) ? new RoadmapQuery(this._request).fetch((_b = this._roadmap) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The favorited user. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Children of the favorite. Only applies to favorites of type folder. */
        children(variables) {
            return new Favorite_ChildrenQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Creates a new favorite (project, cycle etc). */
        create(input) {
            return new CreateFavoriteMutation(this._request).fetch(input);
        }
        /** Deletes a favorite reference. */
        delete() {
            return new DeleteFavoriteMutation(this._request).fetch(this.id);
        }
        /** Updates a favorite. */
        update(input) {
            return new UpdateFavoriteMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * FavoriteConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this FavoriteConnection model
     * @param data - FavoriteConnection response data
     */
    class FavoriteConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Favorite(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * FavoritePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.FavoritePayloadFragment response data
     */
    class FavoritePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._favorite = data.favorite;
        }
        /** The object that was added as a favorite. */
        get favorite() {
            return new FavoriteQuery(this._request).fetch(this._favorite.id);
        }
    }
    /**
     * A feature flag for a project.
     *
     * @param request - function to call the graphql client
     * @param data - L.FeatureFlagFragment response data
     */
    class FeatureFlag extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.externalUrl = data.externalUrl;
            this.id = data.id;
            this.isEnabled = data.isEnabled;
            this.key = data.key;
            this.lastStageUpdatedAt = (_d = parseDate(data.lastStageUpdatedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.status = data.status;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this.pendingRolloutStage = data.pendingRolloutStage
                ? new FeatureFlagRolloutStage(request, data.pendingRolloutStage)
                : undefined;
            this.rolloutStage = new FeatureFlagRolloutStage(request, data.rolloutStage);
            this._creator = (_f = data.creator) !== null && _f !== void 0 ? _f : undefined;
            this._integration = data.integration;
            this._lastStageUpdatedBy = (_g = data.lastStageUpdatedBy) !== null && _g !== void 0 ? _g : undefined;
            this._project = data.project;
        }
        /** The user who created the feature flag. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The integration providing the feature flag. */
        get integration() {
            return new IntegrationQuery(this._request).fetch(this._integration.id);
        }
        /** The user who last changed the stage of the feature flag. */
        get lastStageUpdatedBy() {
            var _a, _b;
            return ((_a = this._lastStageUpdatedBy) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._lastStageUpdatedBy) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The organization of the feature flag. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The project the feature flag is associated with. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
    }
    /**
     * FeatureFlagConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this FeatureFlagConnection model
     * @param data - FeatureFlagConnection response data
     */
    class FeatureFlagConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new FeatureFlag(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A rollout stage for a feature flag.
     *
     * @param request - function to call the graphql client
     * @param data - L.FeatureFlagRolloutStageFragment response data
     */
    class FeatureFlagRolloutStage extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.name = data.name;
            this.segmentKeys = data.segmentKeys;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this.type = data.type;
            this._integration = data.integration;
        }
        /** The integration providing the feature flag. */
        get integration() {
            return new IntegrationQuery(this._request).fetch(this._integration.id);
        }
        /** The organization of the feature flag rollout stage. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
    }
    /**
     * FeatureFlagRolloutStageConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this FeatureFlagRolloutStageConnection model
     * @param data - FeatureFlagRolloutStageConnection response data
     */
    class FeatureFlagRolloutStageConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new FeatureFlagRolloutStage(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * FrontAttachmentPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.FrontAttachmentPayloadFragment response data
     */
    class FrontAttachmentPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * Front specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.FrontSettingsFragment response data
     */
    class FrontSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.automateTicketReopeningOnCancellation = (_a = data.automateTicketReopeningOnCancellation) !== null && _a !== void 0 ? _a : undefined;
            this.automateTicketReopeningOnComment = (_b = data.automateTicketReopeningOnComment) !== null && _b !== void 0 ? _b : undefined;
            this.automateTicketReopeningOnCompletion = (_c = data.automateTicketReopeningOnCompletion) !== null && _c !== void 0 ? _c : undefined;
            this.sendNoteOnComment = (_d = data.sendNoteOnComment) !== null && _d !== void 0 ? _d : undefined;
            this.sendNoteOnStatusChange = (_e = data.sendNoteOnStatusChange) !== null && _e !== void 0 ? _e : undefined;
        }
    }
    /**
     * A trigger that updates the issue status according to Git automations.
     *
     * @param request - function to call the graphql client
     * @param data - L.GitAutomationStateFragment response data
     */
    class GitAutomationState extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.branchPattern = (_b = data.branchPattern) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.id = data.id;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this.targetBranch = data.targetBranch ? new GitAutomationTargetBranch(request, data.targetBranch) : undefined;
            this.event = data.event;
            this._state = (_e = data.state) !== null && _e !== void 0 ? _e : undefined;
            this._team = data.team;
        }
        /** The associated workflow state. */
        get state() {
            var _a, _b;
            return ((_a = this._state) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._state) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team to which this automation state belongs. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** Creates a new automation state. */
        create(input) {
            return new CreateGitAutomationStateMutation(this._request).fetch(input);
        }
        /** Archives an automation state. */
        delete() {
            return new DeleteGitAutomationStateMutation(this._request).fetch(this.id);
        }
        /** Updates an existing state. */
        update(input) {
            return new UpdateGitAutomationStateMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * GitAutomationStateConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this GitAutomationStateConnection model
     * @param data - GitAutomationStateConnection response data
     */
    class GitAutomationStateConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new GitAutomationState(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * GitAutomationStatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.GitAutomationStatePayloadFragment response data
     */
    class GitAutomationStatePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.gitAutomationState = new GitAutomationState(request, data.gitAutomationState);
        }
    }
    /**
     * A Git target branch for which there are automations (GitAutomationState).
     *
     * @param request - function to call the graphql client
     * @param data - L.GitAutomationTargetBranchFragment response data
     */
    class GitAutomationTargetBranch extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.branchPattern = data.branchPattern;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.isRegex = data.isRegex;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._team = data.team;
        }
        /** The team to which this Git target branch automation belongs. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** Creates a Git target branch automation. */
        create(input) {
            return new CreateGitAutomationTargetBranchMutation(this._request).fetch(input);
        }
        /** Archives a Git target branch automation. */
        delete() {
            return new DeleteGitAutomationTargetBranchMutation(this._request).fetch(this.id);
        }
        /** Updates an existing Git target branch automation. */
        update(input) {
            return new UpdateGitAutomationTargetBranchMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * GitAutomationTargetBranchPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.GitAutomationTargetBranchPayloadFragment response data
     */
    class GitAutomationTargetBranchPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.targetBranch = new GitAutomationTargetBranch(request, data.targetBranch);
        }
    }
    /**
     * GitHubCommitIntegrationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.GitHubCommitIntegrationPayloadFragment response data
     */
    class GitHubCommitIntegrationPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.webhookSecret = data.webhookSecret;
            this._integration = (_a = data.integration) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The integration that was created or updated. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * GitHubEnterpriseServerInstallVerificationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.GitHubEnterpriseServerInstallVerificationPayloadFragment response data
     */
    class GitHubEnterpriseServerInstallVerificationPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * GitHubEnterpriseServerPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.GitHubEnterpriseServerPayloadFragment response data
     */
    class GitHubEnterpriseServerPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.installUrl = data.installUrl;
            this.lastSyncId = data.lastSyncId;
            this.setupUrl = data.setupUrl;
            this.success = data.success;
            this.webhookSecret = data.webhookSecret;
            this._integration = (_a = data.integration) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The integration that was created or updated. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * Metadata and settings for a GitHub import integration.
     *
     * @param request - function to call the graphql client
     * @param data - L.GitHubImportSettingsFragment response data
     */
    class GitHubImportSettings extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.labels = (_a = data.labels) !== null && _a !== void 0 ? _a : undefined;
            this.orgAvatarUrl = data.orgAvatarUrl;
            this.orgLogin = data.orgLogin;
            this.repositories = data.repositories.map(node => new GitHubRepo(request, node));
            this.orgType = data.orgType;
        }
    }
    /**
     * Metadata and settings for a GitHub Personal integration.
     *
     * @param request - function to call the graphql client
     * @param data - L.GitHubPersonalSettingsFragment response data
     */
    class GitHubPersonalSettings extends Request {
        constructor(request, data) {
            super(request);
            this.login = data.login;
        }
    }
    /**
     * GitHub repos available to sync.
     *
     * @param request - function to call the graphql client
     * @param data - L.GitHubRepoFragment response data
     */
    class GitHubRepo extends Request {
        constructor(request, data) {
            super(request);
            this.fullName = data.fullName;
            this.id = data.id;
        }
    }
    /**
     * Mapping of Linear teams to GitHub repos.
     *
     * @param request - function to call the graphql client
     * @param data - L.GitHubRepoMappingFragment response data
     */
    class GitHubRepoMapping extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.bidirectional = (_a = data.bidirectional) !== null && _a !== void 0 ? _a : undefined;
            this.default = (_b = data.default) !== null && _b !== void 0 ? _b : undefined;
            this.gitHubLabels = (_c = data.gitHubLabels) !== null && _c !== void 0 ? _c : undefined;
            this.gitHubRepoId = data.gitHubRepoId;
            this.linearTeamId = data.linearTeamId;
        }
    }
    /**
     * Metadata and settings for a GitHub integration.
     *
     * @param request - function to call the graphql client
     * @param data - L.GitHubSettingsFragment response data
     */
    class GitHubSettings extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.orgAvatarUrl = (_a = data.orgAvatarUrl) !== null && _a !== void 0 ? _a : undefined;
            this.orgLogin = data.orgLogin;
            this.repositories = data.repositories ? data.repositories.map(node => new GitHubRepo(request, node)) : undefined;
            this.repositoriesMapping = data.repositoriesMapping
                ? data.repositoriesMapping.map(node => new GitHubRepoMapping(request, node))
                : undefined;
            this.orgType = (_b = data.orgType) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * GitLabIntegrationCreatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.GitLabIntegrationCreatePayloadFragment response data
     */
    class GitLabIntegrationCreatePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.webhookSecret = data.webhookSecret;
            this._integration = (_a = data.integration) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The integration that was created or updated. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * Metadata and settings for a GitLab integration.
     *
     * @param request - function to call the graphql client
     * @param data - L.GitLabSettingsFragment response data
     */
    class GitLabSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.expiresAt = (_a = data.expiresAt) !== null && _a !== void 0 ? _a : undefined;
            this.readonly = (_b = data.readonly) !== null && _b !== void 0 ? _b : undefined;
            this.url = (_c = data.url) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    /**
     * Google Sheets specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.GoogleSheetsSettingsFragment response data
     */
    class GoogleSheetsSettings extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.sheetId = data.sheetId;
            this.spreadsheetId = data.spreadsheetId;
            this.spreadsheetUrl = data.spreadsheetUrl;
            this.updatedIssuesAt = (_a = parseDate(data.updatedIssuesAt)) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * ImageUploadFromUrlPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ImageUploadFromUrlPayloadFragment response data
     */
    class ImageUploadFromUrlPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.url = (_a = data.url) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * An initiative to group projects.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeFragment response data
     */
    class Initiative extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.description = (_d = data.description) !== null && _d !== void 0 ? _d : undefined;
            this.icon = (_e = data.icon) !== null && _e !== void 0 ? _e : undefined;
            this.id = data.id;
            this.name = data.name;
            this.slugId = data.slugId;
            this.sortOrder = data.sortOrder;
            this.targetDate = (_f = data.targetDate) !== null && _f !== void 0 ? _f : undefined;
            this.trashed = (_g = data.trashed) !== null && _g !== void 0 ? _g : undefined;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : new Date();
            this.status = data.status;
            this.targetDateResolution = (_j = data.targetDateResolution) !== null && _j !== void 0 ? _j : undefined;
            this._creator = (_k = data.creator) !== null && _k !== void 0 ? _k : undefined;
            this._owner = (_l = data.owner) !== null && _l !== void 0 ? _l : undefined;
        }
        /** The user who created the initiative. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The organization of the initiative. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The user who owns the initiative. */
        get owner() {
            var _a, _b;
            return ((_a = this._owner) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._owner) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Links associated with the initiative. */
        links(variables) {
            return new Initiative_LinksQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Projects associated with the initiative. */
        projects(variables) {
            return new Initiative_ProjectsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Archives a initiative. */
        archive() {
            return new ArchiveInitiativeMutation(this._request).fetch(this.id);
        }
        /** Creates a new initiative. */
        create(input) {
            return new CreateInitiativeMutation(this._request).fetch(input);
        }
        /** Deletes (trashes) an initiative. */
        delete() {
            return new DeleteInitiativeMutation(this._request).fetch(this.id);
        }
        /** Unarchives a initiative. */
        unarchive() {
            return new UnarchiveInitiativeMutation(this._request).fetch(this.id);
        }
        /** Updates a initiative. */
        update(input) {
            return new UpdateInitiativeMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeArchivePayloadFragment response data
     */
    class InitiativeArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * InitiativeConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this InitiativeConnection model
     * @param data - InitiativeConnection response data
     */
    class InitiativeConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Initiative(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * An initiative related notification.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeNotificationFragment response data
     */
    class InitiativeNotification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.commentId = (_b = data.commentId) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.emailedAt = (_d = parseDate(data.emailedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.initiativeId = data.initiativeId;
            this.parentCommentId = (_e = data.parentCommentId) !== null && _e !== void 0 ? _e : undefined;
            this.reactionEmoji = (_f = data.reactionEmoji) !== null && _f !== void 0 ? _f : undefined;
            this.readAt = (_g = parseDate(data.readAt)) !== null && _g !== void 0 ? _g : undefined;
            this.snoozedUntilAt = (_h = parseDate(data.snoozedUntilAt)) !== null && _h !== void 0 ? _h : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_j = parseDate(data.unsnoozedAt)) !== null && _j !== void 0 ? _j : undefined;
            this.updatedAt = (_k = parseDate(data.updatedAt)) !== null && _k !== void 0 ? _k : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this._actor = (_l = data.actor) !== null && _l !== void 0 ? _l : undefined;
            this._externalUserActor = (_m = data.externalUserActor) !== null && _m !== void 0 ? _m : undefined;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
    }
    /**
     * An initiative notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeNotificationSubscriptionFragment response data
     */
    class InitiativeNotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.notificationSubscriptionTypes = data.notificationSubscriptionTypes;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = (_f = data.customView) !== null && _f !== void 0 ? _f : undefined;
            this._cycle = (_g = data.cycle) !== null && _g !== void 0 ? _g : undefined;
            this._initiative = data.initiative;
            this._label = (_h = data.label) !== null && _h !== void 0 ? _h : undefined;
            this._project = (_j = data.project) !== null && _j !== void 0 ? _j : undefined;
            this._subscriber = data.subscriber;
            this._team = (_k = data.team) !== null && _k !== void 0 ? _k : undefined;
            this._user = (_l = data.user) !== null && _l !== void 0 ? _l : undefined;
        }
        /** The contextual custom view associated with the notification subscription. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual cycle view associated with the notification subscription. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The initiative subscribed to. */
        get initiative() {
            return new InitiativeQuery(this._request).fetch(this._initiative.id);
        }
        /** The contextual label view associated with the notification subscription. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual project view associated with the notification subscription. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The team associated with the notification subscription. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user view associated with the notification subscription. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * The payload returned by the initiative mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativePayloadFragment response data
     */
    class InitiativePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._initiative = data.initiative;
        }
        /** The initiative that was created or updated. */
        get initiative() {
            return new InitiativeQuery(this._request).fetch(this._initiative.id);
        }
    }
    /**
     * Join table between projects and initiatives.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeToProjectFragment response data
     */
    class InitiativeToProject extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._initiative = data.initiative;
            this._project = data.project;
        }
        /** The initiative that the project is associated with. */
        get initiative() {
            return new InitiativeQuery(this._request).fetch(this._initiative.id);
        }
        /** The project that the initiative is associated with. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** Creates a new initiativeToProject join. */
        create(input) {
            return new CreateInitiativeToProjectMutation(this._request).fetch(input);
        }
        /** Deletes a initiativeToProject. */
        delete() {
            return new DeleteInitiativeToProjectMutation(this._request).fetch(this.id);
        }
        /** Updates a initiativeToProject. */
        update(input) {
            return new UpdateInitiativeToProjectMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * InitiativeToProjectConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this InitiativeToProjectConnection model
     * @param data - InitiativeToProjectConnection response data
     */
    class InitiativeToProjectConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new InitiativeToProject(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * The result of a initiativeToProject mutation.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeToProjectPayloadFragment response data
     */
    class InitiativeToProjectPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._initiativeToProject = data.initiativeToProject;
        }
        /** The initiativeToProject that was created or updated. */
        get initiativeToProject() {
            return new InitiativeToProjectQuery(this._request).fetch(this._initiativeToProject.id);
        }
    }
    /**
     * An integration with an external service.
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationFragment response data
     */
    class Integration extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.service = data.service;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._creator = data.creator;
            this._team = (_d = data.team) !== null && _d !== void 0 ? _d : undefined;
        }
        /** The user that added the integration. */
        get creator() {
            return new UserQuery(this._request).fetch(this._creator.id);
        }
        /** The organization that the integration is associated with. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The team that the integration is associated with. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Archives an integration. */
        archive() {
            return new ArchiveIntegrationMutation(this._request).fetch(this.id);
        }
        /** Deletes an integration. */
        delete() {
            return new DeleteIntegrationMutation(this._request).fetch(this.id);
        }
    }
    /**
     * IntegrationConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IntegrationConnection model
     * @param data - IntegrationConnection response data
     */
    class IntegrationConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Integration(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * IntegrationHasScopesPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationHasScopesPayloadFragment response data
     */
    class IntegrationHasScopesPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.hasAllScopes = data.hasAllScopes;
            this.missingScopes = (_a = data.missingScopes) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * IntegrationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationPayloadFragment response data
     */
    class IntegrationPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._integration = (_a = data.integration) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The integration that was created or updated. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * IntegrationRequestPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationRequestPayloadFragment response data
     */
    class IntegrationRequestPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * The integration resource's settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationSettingsFragment response data
     */
    class IntegrationSettings extends Request {
        constructor(request, data) {
            super(request);
            this.front = data.front ? new FrontSettings(request, data.front) : undefined;
            this.gitHub = data.gitHub ? new GitHubSettings(request, data.gitHub) : undefined;
            this.gitHubImport = data.gitHubImport ? new GitHubImportSettings(request, data.gitHubImport) : undefined;
            this.gitHubPersonal = data.gitHubPersonal ? new GitHubPersonalSettings(request, data.gitHubPersonal) : undefined;
            this.gitLab = data.gitLab ? new GitLabSettings(request, data.gitLab) : undefined;
            this.googleSheets = data.googleSheets ? new GoogleSheetsSettings(request, data.googleSheets) : undefined;
            this.intercom = data.intercom ? new IntercomSettings(request, data.intercom) : undefined;
            this.jira = data.jira ? new JiraSettings(request, data.jira) : undefined;
            this.jiraPersonal = data.jiraPersonal ? new JiraPersonalSettings(request, data.jiraPersonal) : undefined;
            this.launchDarkly = data.launchDarkly ? new LaunchDarklySettings(request, data.launchDarkly) : undefined;
            this.notion = data.notion ? new NotionSettings(request, data.notion) : undefined;
            this.opsgenie = data.opsgenie ? new OpsgenieSettings(request, data.opsgenie) : undefined;
            this.pagerDuty = data.pagerDuty ? new PagerDutySettings(request, data.pagerDuty) : undefined;
            this.sentry = data.sentry ? new SentrySettings(request, data.sentry) : undefined;
            this.slack = data.slack ? new SlackSettings(request, data.slack) : undefined;
            this.slackAsks = data.slackAsks ? new SlackAsksSettings(request, data.slackAsks) : undefined;
            this.slackCustomViewNotifications = data.slackCustomViewNotifications
                ? new SlackPostSettings(request, data.slackCustomViewNotifications)
                : undefined;
            this.slackOrgProjectUpdatesPost = data.slackOrgProjectUpdatesPost
                ? new SlackPostSettings(request, data.slackOrgProjectUpdatesPost)
                : undefined;
            this.slackPost = data.slackPost ? new SlackPostSettings(request, data.slackPost) : undefined;
            this.slackProjectPost = data.slackProjectPost ? new SlackPostSettings(request, data.slackProjectPost) : undefined;
            this.zendesk = data.zendesk ? new ZendeskSettings(request, data.zendesk) : undefined;
        }
    }
    /**
     * Join table between templates and integrations.
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationTemplateFragment response data
     */
    class IntegrationTemplate extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.foreignEntityId = (_c = data.foreignEntityId) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this._integration = data.integration;
            this._template = data.template;
        }
        /** The integration that the template is associated with. */
        get integration() {
            return new IntegrationQuery(this._request).fetch(this._integration.id);
        }
        /** The template that the integration is associated with. */
        get template() {
            return new TemplateQuery(this._request).fetch(this._template.id);
        }
        /** Creates a new integrationTemplate join. */
        create(input) {
            return new CreateIntegrationTemplateMutation(this._request).fetch(input);
        }
        /** Deletes a integrationTemplate. */
        delete() {
            return new DeleteIntegrationTemplateMutation(this._request).fetch(this.id);
        }
    }
    /**
     * IntegrationTemplateConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IntegrationTemplateConnection model
     * @param data - IntegrationTemplateConnection response data
     */
    class IntegrationTemplateConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new IntegrationTemplate(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * IntegrationTemplatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationTemplatePayloadFragment response data
     */
    class IntegrationTemplatePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._integrationTemplate = data.integrationTemplate;
        }
        /** The IntegrationTemplate that was created or updated. */
        get integrationTemplate() {
            return new IntegrationTemplateQuery(this._request).fetch(this._integrationTemplate.id);
        }
    }
    /**
     * The configuration of all integrations for a project or a team.
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationsSettingsFragment response data
     */
    class IntegrationsSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.slackIssueAddedToTriage = (_c = data.slackIssueAddedToTriage) !== null && _c !== void 0 ? _c : undefined;
            this.slackIssueAddedToView = (_d = data.slackIssueAddedToView) !== null && _d !== void 0 ? _d : undefined;
            this.slackIssueCreated = (_e = data.slackIssueCreated) !== null && _e !== void 0 ? _e : undefined;
            this.slackIssueNewComment = (_f = data.slackIssueNewComment) !== null && _f !== void 0 ? _f : undefined;
            this.slackIssueSlaBreached = (_g = data.slackIssueSlaBreached) !== null && _g !== void 0 ? _g : undefined;
            this.slackIssueSlaHighRisk = (_h = data.slackIssueSlaHighRisk) !== null && _h !== void 0 ? _h : undefined;
            this.slackIssueStatusChangedAll = (_j = data.slackIssueStatusChangedAll) !== null && _j !== void 0 ? _j : undefined;
            this.slackIssueStatusChangedDone = (_k = data.slackIssueStatusChangedDone) !== null && _k !== void 0 ? _k : undefined;
            this.slackProjectUpdateCreated = (_l = data.slackProjectUpdateCreated) !== null && _l !== void 0 ? _l : undefined;
            this.slackProjectUpdateCreatedToTeam = (_m = data.slackProjectUpdateCreatedToTeam) !== null && _m !== void 0 ? _m : undefined;
            this.slackProjectUpdateCreatedToWorkspace = (_o = data.slackProjectUpdateCreatedToWorkspace) !== null && _o !== void 0 ? _o : undefined;
            this.updatedAt = (_p = parseDate(data.updatedAt)) !== null && _p !== void 0 ? _p : new Date();
            this.contextViewType = (_q = data.contextViewType) !== null && _q !== void 0 ? _q : undefined;
            this._project = (_r = data.project) !== null && _r !== void 0 ? _r : undefined;
            this._team = (_s = data.team) !== null && _s !== void 0 ? _s : undefined;
        }
        /** Project which those settings apply to. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Team which those settings apply to. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Creates new settings for one or more integrations. */
        create(input) {
            return new CreateIntegrationsSettingsMutation(this._request).fetch(input);
        }
        /** Updates settings related to integrations for a project or a team. */
        update(input) {
            return new UpdateIntegrationsSettingsMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * IntegrationsSettingsConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IntegrationsSettingsConnection model
     * @param data - IntegrationsSettingsConnection response data
     */
    class IntegrationsSettingsConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new IntegrationsSettings(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * IntegrationsSettingsPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationsSettingsPayloadFragment response data
     */
    class IntegrationsSettingsPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._integrationsSettings = data.integrationsSettings;
        }
        /** The settings that were created or updated. */
        get integrationsSettings() {
            return new IntegrationsSettingsQuery(this._request).fetch(this._integrationsSettings.id);
        }
    }
    /**
     * Intercom specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.IntercomSettingsFragment response data
     */
    class IntercomSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.automateTicketReopeningOnCancellation = (_a = data.automateTicketReopeningOnCancellation) !== null && _a !== void 0 ? _a : undefined;
            this.automateTicketReopeningOnComment = (_b = data.automateTicketReopeningOnComment) !== null && _b !== void 0 ? _b : undefined;
            this.automateTicketReopeningOnCompletion = (_c = data.automateTicketReopeningOnCompletion) !== null && _c !== void 0 ? _c : undefined;
            this.sendNoteOnComment = (_d = data.sendNoteOnComment) !== null && _d !== void 0 ? _d : undefined;
            this.sendNoteOnStatusChange = (_e = data.sendNoteOnStatusChange) !== null && _e !== void 0 ? _e : undefined;
        }
    }
    /**
     * An issue.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueFragment response data
     */
    class Issue extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7;
            super(request);
            this.addedToCycleAt = (_a = parseDate(data.addedToCycleAt)) !== null && _a !== void 0 ? _a : undefined;
            this.addedToProjectAt = (_b = parseDate(data.addedToProjectAt)) !== null && _b !== void 0 ? _b : undefined;
            this.archivedAt = (_c = parseDate(data.archivedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.autoArchivedAt = (_d = parseDate(data.autoArchivedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.autoClosedAt = (_e = parseDate(data.autoClosedAt)) !== null && _e !== void 0 ? _e : undefined;
            this.boardOrder = data.boardOrder;
            this.branchName = data.branchName;
            this.canceledAt = (_f = parseDate(data.canceledAt)) !== null && _f !== void 0 ? _f : undefined;
            this.completedAt = (_g = parseDate(data.completedAt)) !== null && _g !== void 0 ? _g : undefined;
            this.createdAt = (_h = parseDate(data.createdAt)) !== null && _h !== void 0 ? _h : new Date();
            this.customerTicketCount = data.customerTicketCount;
            this.description = (_j = data.description) !== null && _j !== void 0 ? _j : undefined;
            this.dueDate = (_k = data.dueDate) !== null && _k !== void 0 ? _k : undefined;
            this.estimate = (_l = data.estimate) !== null && _l !== void 0 ? _l : undefined;
            this.id = data.id;
            this.identifier = data.identifier;
            this.labelIds = data.labelIds;
            this.number = data.number;
            this.previousIdentifiers = data.previousIdentifiers;
            this.priority = data.priority;
            this.priorityLabel = data.priorityLabel;
            this.reactionData = data.reactionData;
            this.slaBreachesAt = (_m = parseDate(data.slaBreachesAt)) !== null && _m !== void 0 ? _m : undefined;
            this.slaStartedAt = (_o = parseDate(data.slaStartedAt)) !== null && _o !== void 0 ? _o : undefined;
            this.snoozedUntilAt = (_p = parseDate(data.snoozedUntilAt)) !== null && _p !== void 0 ? _p : undefined;
            this.sortOrder = data.sortOrder;
            this.startedAt = (_q = parseDate(data.startedAt)) !== null && _q !== void 0 ? _q : undefined;
            this.startedTriageAt = (_r = parseDate(data.startedTriageAt)) !== null && _r !== void 0 ? _r : undefined;
            this.subIssueSortOrder = (_s = data.subIssueSortOrder) !== null && _s !== void 0 ? _s : undefined;
            this.title = data.title;
            this.trashed = (_t = data.trashed) !== null && _t !== void 0 ? _t : undefined;
            this.triagedAt = (_u = parseDate(data.triagedAt)) !== null && _u !== void 0 ? _u : undefined;
            this.updatedAt = (_v = parseDate(data.updatedAt)) !== null && _v !== void 0 ? _v : new Date();
            this.url = data.url;
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.reactions = data.reactions.map(node => new Reaction(request, node));
            this.integrationSourceType = (_w = data.integrationSourceType) !== null && _w !== void 0 ? _w : undefined;
            this._assignee = (_x = data.assignee) !== null && _x !== void 0 ? _x : undefined;
            this._creator = (_y = data.creator) !== null && _y !== void 0 ? _y : undefined;
            this._cycle = (_z = data.cycle) !== null && _z !== void 0 ? _z : undefined;
            this._externalUserCreator = (_0 = data.externalUserCreator) !== null && _0 !== void 0 ? _0 : undefined;
            this._favorite = (_1 = data.favorite) !== null && _1 !== void 0 ? _1 : undefined;
            this._lastAppliedTemplate = (_2 = data.lastAppliedTemplate) !== null && _2 !== void 0 ? _2 : undefined;
            this._parent = (_3 = data.parent) !== null && _3 !== void 0 ? _3 : undefined;
            this._project = (_4 = data.project) !== null && _4 !== void 0 ? _4 : undefined;
            this._projectMilestone = (_5 = data.projectMilestone) !== null && _5 !== void 0 ? _5 : undefined;
            this._snoozedBy = (_6 = data.snoozedBy) !== null && _6 !== void 0 ? _6 : undefined;
            this._sourceComment = (_7 = data.sourceComment) !== null && _7 !== void 0 ? _7 : undefined;
            this._state = data.state;
            this._team = data.team;
        }
        /** The user to whom the issue is assigned to. */
        get assignee() {
            var _a, _b;
            return ((_a = this._assignee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._assignee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user who created the issue. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The cycle that the issue is associated with. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The external user who created the issue. */
        get externalUserCreator() {
            var _a, _b;
            return ((_a = this._externalUserCreator) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserCreator) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The users favorite associated with this issue. */
        get favorite() {
            var _a, _b;
            return ((_a = this._favorite) === null || _a === void 0 ? void 0 : _a.id) ? new FavoriteQuery(this._request).fetch((_b = this._favorite) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The last template that was applied to this issue. */
        get lastAppliedTemplate() {
            var _a, _b;
            return ((_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._lastAppliedTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The parent of the issue. */
        get parent() {
            var _a, _b;
            return ((_a = this._parent) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._parent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The project that the issue is associated with. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The projectMilestone that the issue is associated with. */
        get projectMilestone() {
            var _a, _b;
            return ((_a = this._projectMilestone) === null || _a === void 0 ? void 0 : _a.id)
                ? new ProjectMilestoneQuery(this._request).fetch((_b = this._projectMilestone) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The user who snoozed the issue. */
        get snoozedBy() {
            var _a, _b;
            return ((_a = this._snoozedBy) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._snoozedBy) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The comment that this issue was created from. */
        get sourceComment() {
            var _a, _b;
            return ((_a = this._sourceComment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._sourceComment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The workflow state that the issue is associated with. */
        get state() {
            return new WorkflowStateQuery(this._request).fetch(this._state.id);
        }
        /** The team that the issue is associated with. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** Attachments associated with the issue. */
        attachments(variables) {
            return new Issue_AttachmentsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Children of the issue. */
        children(variables) {
            return new Issue_ChildrenQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Comments associated with the issue. */
        comments(variables) {
            return new Issue_CommentsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** History entries associated with the issue. */
        history(variables) {
            return new Issue_HistoryQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Inverse relations associated with this issue. */
        inverseRelations(variables) {
            return new Issue_InverseRelationsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Labels associated with this issue. */
        labels(variables) {
            return new Issue_LabelsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Relations associated with this issue. */
        relations(variables) {
            return new Issue_RelationsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Users who are subscribed to the issue. */
        subscribers(variables) {
            return new Issue_SubscribersQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Archives an issue. */
        archive(variables) {
            return new ArchiveIssueMutation(this._request).fetch(this.id, variables);
        }
        /** Creates a new issue. */
        create(input) {
            return new CreateIssueMutation(this._request).fetch(input);
        }
        /** Deletes (trashes) an issue. */
        delete(variables) {
            return new DeleteIssueMutation(this._request).fetch(this.id, variables);
        }
        /** Unarchives an issue. */
        unarchive() {
            return new UnarchiveIssueMutation(this._request).fetch(this.id);
        }
        /** Updates an issue. */
        update(input) {
            return new UpdateIssueMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueArchivePayloadFragment response data
     */
    class IssueArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * IssueBatchPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueBatchPayloadFragment response data
     */
    class IssueBatchPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.issues = data.issues.map(node => new Issue(request, node));
        }
    }
    /**
     * IssueConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IssueConnection model
     * @param data - IssueConnection response data
     */
    class IssueConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Issue(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueDraftArchivePayloadFragment response data
     */
    class IssueDraftArchivePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * IssueDraftPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueDraftPayloadFragment response data
     */
    class IssueDraftPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * IssueFilterSuggestionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueFilterSuggestionPayloadFragment response data
     */
    class IssueFilterSuggestionPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.filter = (_a = data.filter) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * A record of changes to an issue.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueHistoryFragment response data
     */
    class IssueHistory extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23;
            super(request);
            this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
            this.addedLabelIds = (_b = data.addedLabelIds) !== null && _b !== void 0 ? _b : undefined;
            this.archived = (_c = data.archived) !== null && _c !== void 0 ? _c : undefined;
            this.archivedAt = (_d = parseDate(data.archivedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.attachmentId = (_e = data.attachmentId) !== null && _e !== void 0 ? _e : undefined;
            this.autoArchived = (_f = data.autoArchived) !== null && _f !== void 0 ? _f : undefined;
            this.autoClosed = (_g = data.autoClosed) !== null && _g !== void 0 ? _g : undefined;
            this.createdAt = (_h = parseDate(data.createdAt)) !== null && _h !== void 0 ? _h : new Date();
            this.fromAssigneeId = (_j = data.fromAssigneeId) !== null && _j !== void 0 ? _j : undefined;
            this.fromCycleId = (_k = data.fromCycleId) !== null && _k !== void 0 ? _k : undefined;
            this.fromDueDate = (_l = data.fromDueDate) !== null && _l !== void 0 ? _l : undefined;
            this.fromEstimate = (_m = data.fromEstimate) !== null && _m !== void 0 ? _m : undefined;
            this.fromParentId = (_o = data.fromParentId) !== null && _o !== void 0 ? _o : undefined;
            this.fromPriority = (_p = data.fromPriority) !== null && _p !== void 0 ? _p : undefined;
            this.fromProjectId = (_q = data.fromProjectId) !== null && _q !== void 0 ? _q : undefined;
            this.fromStateId = (_r = data.fromStateId) !== null && _r !== void 0 ? _r : undefined;
            this.fromTeamId = (_s = data.fromTeamId) !== null && _s !== void 0 ? _s : undefined;
            this.fromTitle = (_t = data.fromTitle) !== null && _t !== void 0 ? _t : undefined;
            this.id = data.id;
            this.removedLabelIds = (_u = data.removedLabelIds) !== null && _u !== void 0 ? _u : undefined;
            this.toAssigneeId = (_v = data.toAssigneeId) !== null && _v !== void 0 ? _v : undefined;
            this.toConvertedProjectId = (_w = data.toConvertedProjectId) !== null && _w !== void 0 ? _w : undefined;
            this.toCycleId = (_x = data.toCycleId) !== null && _x !== void 0 ? _x : undefined;
            this.toDueDate = (_y = data.toDueDate) !== null && _y !== void 0 ? _y : undefined;
            this.toEstimate = (_z = data.toEstimate) !== null && _z !== void 0 ? _z : undefined;
            this.toParentId = (_0 = data.toParentId) !== null && _0 !== void 0 ? _0 : undefined;
            this.toPriority = (_1 = data.toPriority) !== null && _1 !== void 0 ? _1 : undefined;
            this.toProjectId = (_2 = data.toProjectId) !== null && _2 !== void 0 ? _2 : undefined;
            this.toStateId = (_3 = data.toStateId) !== null && _3 !== void 0 ? _3 : undefined;
            this.toTeamId = (_4 = data.toTeamId) !== null && _4 !== void 0 ? _4 : undefined;
            this.toTitle = (_5 = data.toTitle) !== null && _5 !== void 0 ? _5 : undefined;
            this.trashed = (_6 = data.trashed) !== null && _6 !== void 0 ? _6 : undefined;
            this.updatedAt = (_7 = parseDate(data.updatedAt)) !== null && _7 !== void 0 ? _7 : new Date();
            this.updatedDescription = (_8 = data.updatedDescription) !== null && _8 !== void 0 ? _8 : undefined;
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.issueImport = data.issueImport ? new IssueImport(request, data.issueImport) : undefined;
            this.actors = data.actors ? data.actors.map(node => new User(request, node)) : undefined;
            this.addedLabels = data.addedLabels ? data.addedLabels.map(node => new IssueLabel(request, node)) : undefined;
            this.relationChanges = data.relationChanges
                ? data.relationChanges.map(node => new IssueRelationHistoryPayload(request, node))
                : undefined;
            this.removedLabels = data.removedLabels ? data.removedLabels.map(node => new IssueLabel(request, node)) : undefined;
            this.triageResponsibilityNotifiedUsers = data.triageResponsibilityNotifiedUsers
                ? data.triageResponsibilityNotifiedUsers.map(node => new User(request, node))
                : undefined;
            this._actor = (_9 = data.actor) !== null && _9 !== void 0 ? _9 : undefined;
            this._attachment = (_10 = data.attachment) !== null && _10 !== void 0 ? _10 : undefined;
            this._fromAssignee = (_11 = data.fromAssignee) !== null && _11 !== void 0 ? _11 : undefined;
            this._fromCycle = (_12 = data.fromCycle) !== null && _12 !== void 0 ? _12 : undefined;
            this._fromParent = (_13 = data.fromParent) !== null && _13 !== void 0 ? _13 : undefined;
            this._fromProject = (_14 = data.fromProject) !== null && _14 !== void 0 ? _14 : undefined;
            this._fromState = (_15 = data.fromState) !== null && _15 !== void 0 ? _15 : undefined;
            this._fromTeam = (_16 = data.fromTeam) !== null && _16 !== void 0 ? _16 : undefined;
            this._issue = data.issue;
            this._toAssignee = (_17 = data.toAssignee) !== null && _17 !== void 0 ? _17 : undefined;
            this._toConvertedProject = (_18 = data.toConvertedProject) !== null && _18 !== void 0 ? _18 : undefined;
            this._toCycle = (_19 = data.toCycle) !== null && _19 !== void 0 ? _19 : undefined;
            this._toParent = (_20 = data.toParent) !== null && _20 !== void 0 ? _20 : undefined;
            this._toProject = (_21 = data.toProject) !== null && _21 !== void 0 ? _21 : undefined;
            this._toState = (_22 = data.toState) !== null && _22 !== void 0 ? _22 : undefined;
            this._toTeam = (_23 = data.toTeam) !== null && _23 !== void 0 ? _23 : undefined;
        }
        /** The actor that performed the actions. This field may be empty in the case of integrations or automations. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The linked attachment. */
        get attachment() {
            var _a, _b;
            return ((_a = this._attachment) === null || _a === void 0 ? void 0 : _a.id) ? new AttachmentQuery(this._request).fetch((_b = this._attachment) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user that was unassigned from the issue. */
        get fromAssignee() {
            var _a, _b;
            return ((_a = this._fromAssignee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._fromAssignee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The cycle that the issue was moved from. */
        get fromCycle() {
            var _a, _b;
            return ((_a = this._fromCycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._fromCycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The parent issue that the issue was moved from. */
        get fromParent() {
            var _a, _b;
            return ((_a = this._fromParent) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._fromParent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The project that the issue was moved from. */
        get fromProject() {
            var _a, _b;
            return ((_a = this._fromProject) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._fromProject) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The state that the issue was moved from. */
        get fromState() {
            var _a, _b;
            return ((_a = this._fromState) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._fromState) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team that the issue was moved from. */
        get fromTeam() {
            var _a, _b;
            return ((_a = this._fromTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._fromTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The issue that was changed. */
        get issue() {
            return new IssueQuery(this._request).fetch(this._issue.id);
        }
        /** The user that was assigned to the issue. */
        get toAssignee() {
            var _a, _b;
            return ((_a = this._toAssignee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._toAssignee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The new project created from the issue. */
        get toConvertedProject() {
            var _a, _b;
            return ((_a = this._toConvertedProject) === null || _a === void 0 ? void 0 : _a.id)
                ? new ProjectQuery(this._request).fetch((_b = this._toConvertedProject) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The cycle that the issue was moved to. */
        get toCycle() {
            var _a, _b;
            return ((_a = this._toCycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._toCycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The parent issue that the issue was moved to. */
        get toParent() {
            var _a, _b;
            return ((_a = this._toParent) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._toParent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The project that the issue was moved to. */
        get toProject() {
            var _a, _b;
            return ((_a = this._toProject) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._toProject) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The state that the issue was moved to. */
        get toState() {
            var _a, _b;
            return ((_a = this._toState) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._toState) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team that the issue was moved to. */
        get toTeam() {
            var _a, _b;
            return ((_a = this._toTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._toTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * IssueHistoryConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IssueHistoryConnection model
     * @param data - IssueHistoryConnection response data
     */
    class IssueHistoryConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new IssueHistory(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * An import job for data from an external service.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueImportFragment response data
     */
    class IssueImport extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.creatorId = data.creatorId;
            this.csvFileUrl = (_c = data.csvFileUrl) !== null && _c !== void 0 ? _c : undefined;
            this.displayName = data.displayName;
            this.error = (_d = data.error) !== null && _d !== void 0 ? _d : undefined;
            this.errorMetadata = (_e = data.errorMetadata) !== null && _e !== void 0 ? _e : undefined;
            this.id = data.id;
            this.mapping = (_f = data.mapping) !== null && _f !== void 0 ? _f : undefined;
            this.progress = (_g = data.progress) !== null && _g !== void 0 ? _g : undefined;
            this.service = data.service;
            this.serviceMetadata = (_h = data.serviceMetadata) !== null && _h !== void 0 ? _h : undefined;
            this.status = data.status;
            this.teamName = (_j = data.teamName) !== null && _j !== void 0 ? _j : undefined;
            this.updatedAt = (_k = parseDate(data.updatedAt)) !== null && _k !== void 0 ? _k : new Date();
        }
        /** Deletes an import job. */
        delete(issueImportId) {
            return new DeleteIssueImportMutation(this._request).fetch(issueImportId);
        }
        /** Updates the mapping for the issue import. */
        update(input) {
            return new UpdateIssueImportMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * IssueImportCheckPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueImportCheckPayloadFragment response data
     */
    class IssueImportCheckPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * IssueImportDeletePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueImportDeletePayloadFragment response data
     */
    class IssueImportDeletePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.issueImport = data.issueImport ? new IssueImport(request, data.issueImport) : undefined;
        }
    }
    /**
     * Whether a custom JQL query is valid or not
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueImportJqlCheckPayloadFragment response data
     */
    class IssueImportJqlCheckPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.count = (_a = data.count) !== null && _a !== void 0 ? _a : undefined;
            this.error = (_b = data.error) !== null && _b !== void 0 ? _b : undefined;
            this.success = data.success;
        }
    }
    /**
     * IssueImportPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueImportPayloadFragment response data
     */
    class IssueImportPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.issueImport = data.issueImport ? new IssueImport(request, data.issueImport) : undefined;
        }
    }
    /**
     * Whether an issue import can be synced at the end of an import or not
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueImportSyncCheckPayloadFragment response data
     */
    class IssueImportSyncCheckPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.canSync = data.canSync;
            this.error = (_a = data.error) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * Labels that can be associated with issues.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueLabelFragment response data
     */
    class IssueLabel extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = data.color;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.isGroup = data.isGroup;
            this.name = data.name;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this._creator = (_e = data.creator) !== null && _e !== void 0 ? _e : undefined;
            this._parent = (_f = data.parent) !== null && _f !== void 0 ? _f : undefined;
            this._team = (_g = data.team) !== null && _g !== void 0 ? _g : undefined;
        }
        /** The user who created the label. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The parent label. */
        get parent() {
            var _a, _b;
            return ((_a = this._parent) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._parent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team that the label is associated with. If null, the label is associated with the global workspace. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Children of the label. */
        children(variables) {
            return new IssueLabel_ChildrenQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Issues associated with the label. */
        issues(variables) {
            return new IssueLabel_IssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Creates a new label. */
        create(input, variables) {
            return new CreateIssueLabelMutation(this._request).fetch(input, variables);
        }
        /** Deletes an issue label. */
        delete() {
            return new DeleteIssueLabelMutation(this._request).fetch(this.id);
        }
        /** Updates an label. */
        update(input, variables) {
            return new UpdateIssueLabelMutation(this._request).fetch(this.id, input, variables);
        }
    }
    /**
     * IssueLabelConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IssueLabelConnection model
     * @param data - IssueLabelConnection response data
     */
    class IssueLabelConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new IssueLabel(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * IssueLabelPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueLabelPayloadFragment response data
     */
    class IssueLabelPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._issueLabel = data.issueLabel;
        }
        /** The label that was created or updated. */
        get issueLabel() {
            return new IssueLabelQuery(this._request).fetch(this._issueLabel.id);
        }
    }
    /**
     * An issue related notification.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueNotificationFragment response data
     */
    class IssueNotification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.commentId = (_b = data.commentId) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.emailedAt = (_d = parseDate(data.emailedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.issueId = data.issueId;
            this.parentCommentId = (_e = data.parentCommentId) !== null && _e !== void 0 ? _e : undefined;
            this.reactionEmoji = (_f = data.reactionEmoji) !== null && _f !== void 0 ? _f : undefined;
            this.readAt = (_g = parseDate(data.readAt)) !== null && _g !== void 0 ? _g : undefined;
            this.snoozedUntilAt = (_h = parseDate(data.snoozedUntilAt)) !== null && _h !== void 0 ? _h : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_j = parseDate(data.unsnoozedAt)) !== null && _j !== void 0 ? _j : undefined;
            this.updatedAt = (_k = parseDate(data.updatedAt)) !== null && _k !== void 0 ? _k : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.subscriptions = data.subscriptions
                ? data.subscriptions.map(node => new NotificationSubscription(request, node))
                : undefined;
            this._actor = (_l = data.actor) !== null && _l !== void 0 ? _l : undefined;
            this._comment = (_m = data.comment) !== null && _m !== void 0 ? _m : undefined;
            this._externalUserActor = (_o = data.externalUserActor) !== null && _o !== void 0 ? _o : undefined;
            this._issue = data.issue;
            this._parentComment = (_p = data.parentComment) !== null && _p !== void 0 ? _p : undefined;
            this._team = data.team;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The comment related to the notification. */
        get comment() {
            var _a, _b;
            return ((_a = this._comment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._comment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The issue related to the notification. */
        get issue() {
            return new IssueQuery(this._request).fetch(this._issue.id);
        }
        /** The parent comment related to the notification, if a notification is a reply comment notification. */
        get parentComment() {
            var _a, _b;
            return ((_a = this._parentComment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._parentComment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The team related to the issue notification. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
    }
    /**
     * IssuePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssuePayloadFragment response data
     */
    class IssuePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._issue = (_a = data.issue) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The issue that was created or updated. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * IssuePriorityValue model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssuePriorityValueFragment response data
     */
    class IssuePriorityValue extends Request {
        constructor(request, data) {
            super(request);
            this.label = data.label;
            this.priority = data.priority;
        }
    }
    /**
     * A relation between two issues.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueRelationFragment response data
     */
    class IssueRelation extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.type = data.type;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._issue = data.issue;
            this._relatedIssue = data.relatedIssue;
        }
        /** The issue whose relationship is being described. */
        get issue() {
            return new IssueQuery(this._request).fetch(this._issue.id);
        }
        /** The related issue. */
        get relatedIssue() {
            return new IssueQuery(this._request).fetch(this._relatedIssue.id);
        }
        /** Creates a new issue relation. */
        create(input, variables) {
            return new CreateIssueRelationMutation(this._request).fetch(input, variables);
        }
        /** Deletes an issue relation. */
        delete() {
            return new DeleteIssueRelationMutation(this._request).fetch(this.id);
        }
        /** Updates an issue relation. */
        update(input) {
            return new UpdateIssueRelationMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * IssueRelationConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IssueRelationConnection model
     * @param data - IssueRelationConnection response data
     */
    class IssueRelationConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new IssueRelation(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * Issue relation history's payload.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueRelationHistoryPayloadFragment response data
     */
    class IssueRelationHistoryPayload extends Request {
        constructor(request, data) {
            super(request);
            this.identifier = data.identifier;
            this.type = data.type;
        }
    }
    /**
     * IssueRelationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueRelationPayloadFragment response data
     */
    class IssueRelationPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._issueRelation = data.issueRelation;
        }
        /** The issue relation that was created or updated. */
        get issueRelation() {
            return new IssueRelationQuery(this._request).fetch(this._issueRelation.id);
        }
    }
    /**
     * IssueSearchPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueSearchPayloadFragment response data
     */
    class IssueSearchPayload extends Request {
        constructor(request, data) {
            super(request);
            this.totalCount = data.totalCount;
            this.archivePayload = new ArchiveResponse(request, data.archivePayload);
            this.pageInfo = new PageInfo(request, data.pageInfo);
            this.nodes = data.nodes.map(node => new IssueSearchResult(request, node));
        }
    }
    /**
     * IssueSearchResult model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueSearchResultFragment response data
     */
    class IssueSearchResult extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7;
            super(request);
            this.addedToCycleAt = (_a = parseDate(data.addedToCycleAt)) !== null && _a !== void 0 ? _a : undefined;
            this.addedToProjectAt = (_b = parseDate(data.addedToProjectAt)) !== null && _b !== void 0 ? _b : undefined;
            this.archivedAt = (_c = parseDate(data.archivedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.autoArchivedAt = (_d = parseDate(data.autoArchivedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.autoClosedAt = (_e = parseDate(data.autoClosedAt)) !== null && _e !== void 0 ? _e : undefined;
            this.boardOrder = data.boardOrder;
            this.branchName = data.branchName;
            this.canceledAt = (_f = parseDate(data.canceledAt)) !== null && _f !== void 0 ? _f : undefined;
            this.completedAt = (_g = parseDate(data.completedAt)) !== null && _g !== void 0 ? _g : undefined;
            this.createdAt = (_h = parseDate(data.createdAt)) !== null && _h !== void 0 ? _h : new Date();
            this.customerTicketCount = data.customerTicketCount;
            this.description = (_j = data.description) !== null && _j !== void 0 ? _j : undefined;
            this.dueDate = (_k = data.dueDate) !== null && _k !== void 0 ? _k : undefined;
            this.estimate = (_l = data.estimate) !== null && _l !== void 0 ? _l : undefined;
            this.id = data.id;
            this.identifier = data.identifier;
            this.labelIds = data.labelIds;
            this.metadata = data.metadata;
            this.number = data.number;
            this.previousIdentifiers = data.previousIdentifiers;
            this.priority = data.priority;
            this.priorityLabel = data.priorityLabel;
            this.reactionData = data.reactionData;
            this.slaBreachesAt = (_m = parseDate(data.slaBreachesAt)) !== null && _m !== void 0 ? _m : undefined;
            this.slaStartedAt = (_o = parseDate(data.slaStartedAt)) !== null && _o !== void 0 ? _o : undefined;
            this.snoozedUntilAt = (_p = parseDate(data.snoozedUntilAt)) !== null && _p !== void 0 ? _p : undefined;
            this.sortOrder = data.sortOrder;
            this.startedAt = (_q = parseDate(data.startedAt)) !== null && _q !== void 0 ? _q : undefined;
            this.startedTriageAt = (_r = parseDate(data.startedTriageAt)) !== null && _r !== void 0 ? _r : undefined;
            this.subIssueSortOrder = (_s = data.subIssueSortOrder) !== null && _s !== void 0 ? _s : undefined;
            this.title = data.title;
            this.trashed = (_t = data.trashed) !== null && _t !== void 0 ? _t : undefined;
            this.triagedAt = (_u = parseDate(data.triagedAt)) !== null && _u !== void 0 ? _u : undefined;
            this.updatedAt = (_v = parseDate(data.updatedAt)) !== null && _v !== void 0 ? _v : new Date();
            this.url = data.url;
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.reactions = data.reactions.map(node => new Reaction(request, node));
            this.integrationSourceType = (_w = data.integrationSourceType) !== null && _w !== void 0 ? _w : undefined;
            this._assignee = (_x = data.assignee) !== null && _x !== void 0 ? _x : undefined;
            this._creator = (_y = data.creator) !== null && _y !== void 0 ? _y : undefined;
            this._cycle = (_z = data.cycle) !== null && _z !== void 0 ? _z : undefined;
            this._externalUserCreator = (_0 = data.externalUserCreator) !== null && _0 !== void 0 ? _0 : undefined;
            this._favorite = (_1 = data.favorite) !== null && _1 !== void 0 ? _1 : undefined;
            this._lastAppliedTemplate = (_2 = data.lastAppliedTemplate) !== null && _2 !== void 0 ? _2 : undefined;
            this._parent = (_3 = data.parent) !== null && _3 !== void 0 ? _3 : undefined;
            this._project = (_4 = data.project) !== null && _4 !== void 0 ? _4 : undefined;
            this._projectMilestone = (_5 = data.projectMilestone) !== null && _5 !== void 0 ? _5 : undefined;
            this._snoozedBy = (_6 = data.snoozedBy) !== null && _6 !== void 0 ? _6 : undefined;
            this._sourceComment = (_7 = data.sourceComment) !== null && _7 !== void 0 ? _7 : undefined;
            this._state = data.state;
            this._team = data.team;
        }
        /** The user to whom the issue is assigned to. */
        get assignee() {
            var _a, _b;
            return ((_a = this._assignee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._assignee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user who created the issue. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The cycle that the issue is associated with. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The external user who created the issue. */
        get externalUserCreator() {
            var _a, _b;
            return ((_a = this._externalUserCreator) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserCreator) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The users favorite associated with this issue. */
        get favorite() {
            var _a, _b;
            return ((_a = this._favorite) === null || _a === void 0 ? void 0 : _a.id) ? new FavoriteQuery(this._request).fetch((_b = this._favorite) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The last template that was applied to this issue. */
        get lastAppliedTemplate() {
            var _a, _b;
            return ((_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._lastAppliedTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The parent of the issue. */
        get parent() {
            var _a, _b;
            return ((_a = this._parent) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._parent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The project that the issue is associated with. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The projectMilestone that the issue is associated with. */
        get projectMilestone() {
            var _a, _b;
            return ((_a = this._projectMilestone) === null || _a === void 0 ? void 0 : _a.id)
                ? new ProjectMilestoneQuery(this._request).fetch((_b = this._projectMilestone) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The user who snoozed the issue. */
        get snoozedBy() {
            var _a, _b;
            return ((_a = this._snoozedBy) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._snoozedBy) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The comment that this issue was created from. */
        get sourceComment() {
            var _a, _b;
            return ((_a = this._sourceComment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._sourceComment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The workflow state that the issue is associated with. */
        get state() {
            return new WorkflowStateQuery(this._request).fetch(this._state.id);
        }
        /** The team that the issue is associated with. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
    }
    /**
     * IssueSearchResultConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IssueSearchResultConnection model
     * @param data - IssueSearchResultConnection response data
     */
    class IssueSearchResultConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new IssueSearchResult(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * Tuple for mapping Jira projects to Linear teams.
     *
     * @param request - function to call the graphql client
     * @param data - L.JiraLinearMappingFragment response data
     */
    class JiraLinearMapping extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.bidirectional = (_a = data.bidirectional) !== null && _a !== void 0 ? _a : undefined;
            this.default = (_b = data.default) !== null && _b !== void 0 ? _b : undefined;
            this.jiraProjectId = data.jiraProjectId;
            this.linearTeamId = data.linearTeamId;
        }
    }
    /**
     * Jira personal specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.JiraPersonalSettingsFragment response data
     */
    class JiraPersonalSettings extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.siteName = (_a = data.siteName) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * Metadata about a Jira project.
     *
     * @param request - function to call the graphql client
     * @param data - L.JiraProjectDataFragment response data
     */
    class JiraProjectData extends Request {
        constructor(request, data) {
            super(request);
            this.id = data.id;
            this.key = data.key;
            this.name = data.name;
        }
    }
    /**
     * Jira specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.JiraSettingsFragment response data
     */
    class JiraSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.isJiraServer = (_a = data.isJiraServer) !== null && _a !== void 0 ? _a : undefined;
            this.manualSetup = (_b = data.manualSetup) !== null && _b !== void 0 ? _b : undefined;
            this.setupPending = (_c = data.setupPending) !== null && _c !== void 0 ? _c : undefined;
            this.projectMapping = data.projectMapping
                ? data.projectMapping.map(node => new JiraLinearMapping(request, node))
                : undefined;
            this.projects = data.projects.map(node => new JiraProjectData(request, node));
        }
    }
    /**
     * A label notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.LabelNotificationSubscriptionFragment response data
     */
    class LabelNotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.notificationSubscriptionTypes = data.notificationSubscriptionTypes;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = (_f = data.customView) !== null && _f !== void 0 ? _f : undefined;
            this._cycle = (_g = data.cycle) !== null && _g !== void 0 ? _g : undefined;
            this._initiative = (_h = data.initiative) !== null && _h !== void 0 ? _h : undefined;
            this._label = data.label;
            this._project = (_j = data.project) !== null && _j !== void 0 ? _j : undefined;
            this._subscriber = data.subscriber;
            this._team = (_k = data.team) !== null && _k !== void 0 ? _k : undefined;
            this._user = (_l = data.user) !== null && _l !== void 0 ? _l : undefined;
        }
        /** The contextual custom view associated with the notification subscription. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual cycle view associated with the notification subscription. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual initiative view associated with the notification subscription. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The label subscribed to. */
        get label() {
            return new IssueLabelQuery(this._request).fetch(this._label.id);
        }
        /** The contextual project view associated with the notification subscription. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The team associated with the notification subscription. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user view associated with the notification subscription. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * LaunchDarkly specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.LaunchDarklySettingsFragment response data
     */
    class LaunchDarklySettings extends Request {
        constructor(request, data) {
            super(request);
            this.environment = data.environment;
            this.projectKey = data.projectKey;
        }
    }
    /**
     * LogoutResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.LogoutResponseFragment response data
     */
    class LogoutResponse extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * Node model
     *
     * @param request - function to call the graphql client
     * @param data - L.NodeFragment response data
     */
    class Node extends Request {
        constructor(request, data) {
            super(request);
            this.id = data.id;
        }
    }
    /**
     * A notification sent to a user.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationFragment response data
     */
    class Notification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.emailedAt = (_c = parseDate(data.emailedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.readAt = (_d = parseDate(data.readAt)) !== null && _d !== void 0 ? _d : undefined;
            this.snoozedUntilAt = (_e = parseDate(data.snoozedUntilAt)) !== null && _e !== void 0 ? _e : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_f = parseDate(data.unsnoozedAt)) !== null && _f !== void 0 ? _f : undefined;
            this.updatedAt = (_g = parseDate(data.updatedAt)) !== null && _g !== void 0 ? _g : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this._actor = (_h = data.actor) !== null && _h !== void 0 ? _h : undefined;
            this._externalUserActor = (_j = data.externalUserActor) !== null && _j !== void 0 ? _j : undefined;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** Archives a notification. */
        archive() {
            return new ArchiveNotificationMutation(this._request).fetch(this.id);
        }
        /** Unarchives a notification. */
        unarchive() {
            return new UnarchiveNotificationMutation(this._request).fetch(this.id);
        }
        /** Updates a notification. */
        update(input) {
            return new UpdateNotificationMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationArchivePayloadFragment response data
     */
    class NotificationArchivePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * NotificationBatchActionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationBatchActionPayloadFragment response data
     */
    class NotificationBatchActionPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.notifications = data.notifications.map(node => new Notification(request, node));
        }
    }
    /**
     * NotificationConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this NotificationConnection model
     * @param data - NotificationConnection response data
     */
    class NotificationConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => {
                switch (node.__typename) {
                    case "DocumentNotification":
                        return new DocumentNotification(request, node);
                    case "InitiativeNotification":
                        return new InitiativeNotification(request, node);
                    case "IssueNotification":
                        return new IssueNotification(request, node);
                    case "OauthClientApprovalNotification":
                        return new OauthClientApprovalNotification(request, node);
                    case "ProjectNotification":
                        return new ProjectNotification(request, node);
                    default:
                        return new Notification(request, node);
                }
            }), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A user's notification delivery preferences.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationDeliveryPreferencesFragment response data
     */
    class NotificationDeliveryPreferences extends Request {
        constructor(request, data) {
            super(request);
            this.mobile = data.mobile ? new NotificationDeliveryPreferencesChannel(request, data.mobile) : undefined;
        }
    }
    /**
     * A user's notification delivery preferences.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationDeliveryPreferencesChannelFragment response data
     */
    class NotificationDeliveryPreferencesChannel extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.notificationsDisabled = (_a = data.notificationsDisabled) !== null && _a !== void 0 ? _a : undefined;
            this.schedule = data.schedule ? new NotificationDeliveryPreferencesSchedule(request, data.schedule) : undefined;
        }
    }
    /**
     * A user's notification delivery schedule for a particular day.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationDeliveryPreferencesDayFragment response data
     */
    class NotificationDeliveryPreferencesDay extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.end = (_a = data.end) !== null && _a !== void 0 ? _a : undefined;
            this.start = (_b = data.start) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * A user's notification delivery schedule for a particular day.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationDeliveryPreferencesScheduleFragment response data
     */
    class NotificationDeliveryPreferencesSchedule extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.disabled = (_a = data.disabled) !== null && _a !== void 0 ? _a : undefined;
            this.friday = new NotificationDeliveryPreferencesDay(request, data.friday);
            this.monday = new NotificationDeliveryPreferencesDay(request, data.monday);
            this.saturday = new NotificationDeliveryPreferencesDay(request, data.saturday);
            this.sunday = new NotificationDeliveryPreferencesDay(request, data.sunday);
            this.thursday = new NotificationDeliveryPreferencesDay(request, data.thursday);
            this.tuesday = new NotificationDeliveryPreferencesDay(request, data.tuesday);
            this.wednesday = new NotificationDeliveryPreferencesDay(request, data.wednesday);
        }
    }
    /**
     * NotificationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationPayloadFragment response data
     */
    class NotificationPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * Notification subscriptions for models.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationSubscriptionFragment response data
     */
    class NotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = (_f = data.customView) !== null && _f !== void 0 ? _f : undefined;
            this._cycle = (_g = data.cycle) !== null && _g !== void 0 ? _g : undefined;
            this._initiative = (_h = data.initiative) !== null && _h !== void 0 ? _h : undefined;
            this._label = (_j = data.label) !== null && _j !== void 0 ? _j : undefined;
            this._project = (_k = data.project) !== null && _k !== void 0 ? _k : undefined;
            this._subscriber = data.subscriber;
            this._team = (_l = data.team) !== null && _l !== void 0 ? _l : undefined;
            this._user = (_m = data.user) !== null && _m !== void 0 ? _m : undefined;
        }
        /** The contextual custom view associated with the notification subscription. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual cycle view associated with the notification subscription. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual initiative view associated with the notification subscription. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual label view associated with the notification subscription. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual project view associated with the notification subscription. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The team associated with the notification subscription. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user view associated with the notification subscription. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Creates a new notification subscription for a cycle, custom view, label, project or team. */
        create(input) {
            return new CreateNotificationSubscriptionMutation(this._request).fetch(input);
        }
        /** Deletes a notification subscription reference. */
        delete() {
            return new DeleteNotificationSubscriptionMutation(this._request).fetch(this.id);
        }
        /** Updates a notification subscription. */
        update(input) {
            return new UpdateNotificationSubscriptionMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * NotificationSubscriptionConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this NotificationSubscriptionConnection model
     * @param data - NotificationSubscriptionConnection response data
     */
    class NotificationSubscriptionConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => {
                switch (node.__typename) {
                    case "CustomViewNotificationSubscription":
                        return new CustomViewNotificationSubscription(request, node);
                    case "CycleNotificationSubscription":
                        return new CycleNotificationSubscription(request, node);
                    case "InitiativeNotificationSubscription":
                        return new InitiativeNotificationSubscription(request, node);
                    case "LabelNotificationSubscription":
                        return new LabelNotificationSubscription(request, node);
                    case "ProjectNotificationSubscription":
                        return new ProjectNotificationSubscription(request, node);
                    case "TeamNotificationSubscription":
                        return new TeamNotificationSubscription(request, node);
                    case "UserNotificationSubscription":
                        return new UserNotificationSubscription(request, node);
                    default:
                        return new NotificationSubscription(request, node);
                }
            }), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * NotificationSubscriptionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationSubscriptionPayloadFragment response data
     */
    class NotificationSubscriptionPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * Notion specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotionSettingsFragment response data
     */
    class NotionSettings extends Request {
        constructor(request, data) {
            super(request);
            this.workspaceId = data.workspaceId;
            this.workspaceName = data.workspaceName;
        }
    }
    /**
     * OAuth2 client application
     *
     * @param request - function to call the graphql client
     * @param data - L.OauthClientFragment response data
     */
    class OauthClient extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.clientId = data.clientId;
            this.clientSecret = data.clientSecret;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.developer = data.developer;
            this.developerUrl = data.developerUrl;
            this.id = data.id;
            this.imageUrl = (_d = data.imageUrl) !== null && _d !== void 0 ? _d : undefined;
            this.name = data.name;
            this.publicEnabled = data.publicEnabled;
            this.redirectUris = data.redirectUris;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this.webhookResourceTypes = data.webhookResourceTypes;
            this.webhookSecret = (_f = data.webhookSecret) !== null && _f !== void 0 ? _f : undefined;
            this.webhookUrl = (_g = data.webhookUrl) !== null && _g !== void 0 ? _g : undefined;
            this._creator = data.creator;
        }
        /** The user who created the OAuth application. */
        get creator() {
            return new UserQuery(this._request).fetch(this._creator.id);
        }
        /** The organization that the OAuth application is associated with. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
    }
    /**
     * Request to install OAuth clients on organizations and the response to the request.
     *
     * @param request - function to call the graphql client
     * @param data - L.OauthClientApprovalFragment response data
     */
    class OauthClientApproval extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.denyReason = (_c = data.denyReason) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.oauthClientId = data.oauthClientId;
            this.requestReason = (_d = data.requestReason) !== null && _d !== void 0 ? _d : undefined;
            this.requesterId = data.requesterId;
            this.responderId = (_e = data.responderId) !== null && _e !== void 0 ? _e : undefined;
            this.scopes = data.scopes;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
            this.status = data.status;
        }
    }
    /**
     * An oauth client approval related notification.
     *
     * @param request - function to call the graphql client
     * @param data - L.OauthClientApprovalNotificationFragment response data
     */
    class OauthClientApprovalNotification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.emailedAt = (_c = parseDate(data.emailedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.oauthClientApprovalId = data.oauthClientApprovalId;
            this.readAt = (_d = parseDate(data.readAt)) !== null && _d !== void 0 ? _d : undefined;
            this.snoozedUntilAt = (_e = parseDate(data.snoozedUntilAt)) !== null && _e !== void 0 ? _e : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_f = parseDate(data.unsnoozedAt)) !== null && _f !== void 0 ? _f : undefined;
            this.updatedAt = (_g = parseDate(data.updatedAt)) !== null && _g !== void 0 ? _g : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.oauthClientApproval = new OauthClientApproval(request, data.oauthClientApproval);
            this._actor = (_h = data.actor) !== null && _h !== void 0 ? _h : undefined;
            this._externalUserActor = (_j = data.externalUserActor) !== null && _j !== void 0 ? _j : undefined;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
    }
    /**
     * OauthClientConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this OauthClientConnection model
     * @param data - OauthClientConnection response data
     */
    class OauthClientConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new OauthClient(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * OauthToken model
     *
     * @param request - function to call the graphql client
     * @param data - L.OauthTokenFragment response data
     */
    class OauthToken extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.clientId = data.clientId;
            this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
            this.id = data.id;
            this.revokedAt = (_b = parseDate(data.revokedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.scope = data.scope;
            this.userId = data.userId;
            this.client = new AuthOauthClient(request, data.client);
            this.user = new AuthUser(request, data.user);
        }
    }
    /**
     * Opsgenie specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.OpsgenieSettingsFragment response data
     */
    class OpsgenieSettings extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.apiFailedWithUnauthorizedErrorAt = (_a = parseDate(data.apiFailedWithUnauthorizedErrorAt)) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * An organization. Organizations are root-level objects that contain user accounts and teams.
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationFragment response data
     */
    class Organization extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.allowMembersToInvite = (_a = data.allowMembersToInvite) !== null && _a !== void 0 ? _a : undefined;
            this.allowedAuthServices = data.allowedAuthServices;
            this.archivedAt = (_b = parseDate(data.archivedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.createdIssueCount = data.createdIssueCount;
            this.deletionRequestedAt = (_d = parseDate(data.deletionRequestedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.fiscalYearStartMonth = data.fiscalYearStartMonth;
            this.gitBranchFormat = (_e = data.gitBranchFormat) !== null && _e !== void 0 ? _e : undefined;
            this.gitLinkbackMessagesEnabled = data.gitLinkbackMessagesEnabled;
            this.gitPublicLinkbackMessagesEnabled = data.gitPublicLinkbackMessagesEnabled;
            this.id = data.id;
            this.logoUrl = (_f = data.logoUrl) !== null && _f !== void 0 ? _f : undefined;
            this.name = data.name;
            this.periodUploadVolume = data.periodUploadVolume;
            this.previousUrlKeys = data.previousUrlKeys;
            this.projectUpdateReminderFrequencyInWeeks = (_g = data.projectUpdateReminderFrequencyInWeeks) !== null && _g !== void 0 ? _g : undefined;
            this.projectUpdateRemindersHour = data.projectUpdateRemindersHour;
            this.roadmapEnabled = data.roadmapEnabled;
            this.samlEnabled = data.samlEnabled;
            this.scimEnabled = data.scimEnabled;
            this.trialEndsAt = (_h = parseDate(data.trialEndsAt)) !== null && _h !== void 0 ? _h : undefined;
            this.updatedAt = (_j = parseDate(data.updatedAt)) !== null && _j !== void 0 ? _j : new Date();
            this.urlKey = data.urlKey;
            this.userCount = data.userCount;
            this.subscription = data.subscription ? new PaidSubscription(request, data.subscription) : undefined;
            this.ipRestrictions = data.ipRestrictions
                ? data.ipRestrictions.map(node => new OrganizationIpRestriction(request, node))
                : undefined;
            this.projectStatuses = data.projectStatuses.map(node => new ProjectStatus(request, node));
            this.projectUpdateRemindersDay = data.projectUpdateRemindersDay;
            this.projectUpdatesReminderFrequency = data.projectUpdatesReminderFrequency;
            this.releaseChannel = data.releaseChannel;
            this.slaDayCount = data.slaDayCount;
        }
        /** Integrations associated with the organization. */
        integrations(variables) {
            return new Organization_IntegrationsQuery(this._request, variables).fetch(variables);
        }
        /** Labels associated with the organization. */
        labels(variables) {
            return new Organization_LabelsQuery(this._request, variables).fetch(variables);
        }
        /** Teams associated with the organization. */
        teams(variables) {
            return new Organization_TeamsQuery(this._request, variables).fetch(variables);
        }
        /** Templates associated with the organization. */
        templates(variables) {
            return new Organization_TemplatesQuery(this._request, variables).fetch(variables);
        }
        /** Users associated with the organization. */
        users(variables) {
            return new Organization_UsersQuery(this._request, variables).fetch(variables);
        }
        /** Delete's an organization. Administrator privileges required. */
        delete(input) {
            return new DeleteOrganizationMutation(this._request).fetch(input);
        }
        /** Updates the user's organization. */
        update(input) {
            return new UpdateOrganizationMutation(this._request).fetch(input);
        }
    }
    /**
     * OrganizationAcceptedOrExpiredInviteDetailsPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationAcceptedOrExpiredInviteDetailsPayloadFragment response data
     */
    class OrganizationAcceptedOrExpiredInviteDetailsPayload extends Request {
        constructor(request, data) {
            super(request);
            this.status = data.status;
        }
    }
    /**
     * OrganizationCancelDeletePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationCancelDeletePayloadFragment response data
     */
    class OrganizationCancelDeletePayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * OrganizationDeletePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationDeletePayloadFragment response data
     */
    class OrganizationDeletePayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * Defines the use of a domain by an organization.
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationDomainFragment response data
     */
    class OrganizationDomain extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.claimed = (_b = data.claimed) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.disableOrganizationCreation = (_d = data.disableOrganizationCreation) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.name = data.name;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this.verificationEmail = (_f = data.verificationEmail) !== null && _f !== void 0 ? _f : undefined;
            this.verified = data.verified;
            this.authType = data.authType;
            this._creator = (_g = data.creator) !== null && _g !== void 0 ? _g : undefined;
        }
        /** The user who added the domain. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Deletes a domain. */
        delete() {
            return new DeleteOrganizationDomainMutation(this._request).fetch(this.id);
        }
    }
    /**
     * OrganizationExistsPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationExistsPayloadFragment response data
     */
    class OrganizationExistsPayload extends Request {
        constructor(request, data) {
            super(request);
            this.exists = data.exists;
            this.success = data.success;
        }
    }
    /**
     * An invitation to the organization that has been sent via email.
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationInviteFragment response data
     */
    class OrganizationInvite extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.acceptedAt = (_a = parseDate(data.acceptedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = parseDate(data.archivedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.email = data.email;
            this.expiresAt = (_d = parseDate(data.expiresAt)) !== null && _d !== void 0 ? _d : undefined;
            this.external = data.external;
            this.id = data.id;
            this.metadata = (_e = data.metadata) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
            this.role = data.role;
            this._invitee = (_g = data.invitee) !== null && _g !== void 0 ? _g : undefined;
            this._inviter = data.inviter;
        }
        /** The user who has accepted the invite. Null, if the invite hasn't been accepted. */
        get invitee() {
            var _a, _b;
            return ((_a = this._invitee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._invitee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user who created the invitation. */
        get inviter() {
            return new UserQuery(this._request).fetch(this._inviter.id);
        }
        /** The organization that the invite is associated with. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** Creates a new organization invite. */
        create(input) {
            return new CreateOrganizationInviteMutation(this._request).fetch(input);
        }
        /** Deletes an organization invite. */
        delete() {
            return new DeleteOrganizationInviteMutation(this._request).fetch(this.id);
        }
        /** Updates an organization invite. */
        update(input) {
            return new UpdateOrganizationInviteMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * OrganizationInviteConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this OrganizationInviteConnection model
     * @param data - OrganizationInviteConnection response data
     */
    class OrganizationInviteConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new OrganizationInvite(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * OrganizationInviteFullDetailsPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationInviteFullDetailsPayloadFragment response data
     */
    class OrganizationInviteFullDetailsPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.accepted = data.accepted;
            this.allowedAuthServices = data.allowedAuthServices;
            this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
            this.email = data.email;
            this.expired = data.expired;
            this.inviter = data.inviter;
            this.organizationId = data.organizationId;
            this.organizationLogoUrl = (_b = data.organizationLogoUrl) !== null && _b !== void 0 ? _b : undefined;
            this.organizationName = data.organizationName;
            this.role = data.role;
            this.status = data.status;
        }
    }
    /**
     * OrganizationInviteLinkDetailsPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationInviteLinkDetailsPayloadFragment response data
     */
    class OrganizationInviteLinkDetailsPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.allowedAuthServices = data.allowedAuthServices;
            this.organizationId = (_a = data.organizationId) !== null && _a !== void 0 ? _a : undefined;
            this.organizationLogoUrl = (_b = data.organizationLogoUrl) !== null && _b !== void 0 ? _b : undefined;
            this.organizationName = (_c = data.organizationName) !== null && _c !== void 0 ? _c : undefined;
            this.organizationRegion = (_d = data.organizationRegion) !== null && _d !== void 0 ? _d : undefined;
            this.organizationUrlKey = (_e = data.organizationUrlKey) !== null && _e !== void 0 ? _e : undefined;
        }
    }
    /**
     * OrganizationInvitePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationInvitePayloadFragment response data
     */
    class OrganizationInvitePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._organizationInvite = data.organizationInvite;
        }
        /** The organization invite that was created or updated. */
        get organizationInvite() {
            return new OrganizationInviteQuery(this._request).fetch(this._organizationInvite.id);
        }
    }
    /**
     * OrganizationIpRestriction model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationIpRestrictionFragment response data
     */
    class OrganizationIpRestriction extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.description = (_a = data.description) !== null && _a !== void 0 ? _a : undefined;
            this.enabled = data.enabled;
            this.range = data.range;
            this.type = data.type;
        }
    }
    /**
     * OrganizationMeta model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationMetaFragment response data
     */
    class OrganizationMeta extends Request {
        constructor(request, data) {
            super(request);
            this.allowedAuthServices = data.allowedAuthServices;
            this.region = data.region;
        }
    }
    /**
     * OrganizationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationPayloadFragment response data
     */
    class OrganizationPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
        /** The organization that was created or updated. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
    }
    /**
     * OrganizationRegionResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationRegionResponseFragment response data
     */
    class OrganizationRegionResponse extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.region = (_a = data.region) !== null && _a !== void 0 ? _a : undefined;
            this.success = data.success;
        }
    }
    /**
     * OrganizationStartTrialPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationStartTrialPayloadFragment response data
     */
    class OrganizationStartTrialPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * PageInfo model
     *
     * @param request - function to call the graphql client
     * @param data - L.PageInfoFragment response data
     */
    class PageInfo extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.endCursor = (_a = data.endCursor) !== null && _a !== void 0 ? _a : undefined;
            this.hasNextPage = data.hasNextPage;
            this.hasPreviousPage = data.hasPreviousPage;
            this.startCursor = (_b = data.startCursor) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * PagerDuty specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.PagerDutySettingsFragment response data
     */
    class PagerDutySettings extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.apiFailedWithUnauthorizedErrorAt = (_a = parseDate(data.apiFailedWithUnauthorizedErrorAt)) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * The paid subscription of an organization.
     *
     * @param request - function to call the graphql client
     * @param data - L.PaidSubscriptionFragment response data
     */
    class PaidSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.canceledAt = (_b = parseDate(data.canceledAt)) !== null && _b !== void 0 ? _b : undefined;
            this.collectionMethod = data.collectionMethod;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.id = data.id;
            this.nextBillingAt = (_d = parseDate(data.nextBillingAt)) !== null && _d !== void 0 ? _d : undefined;
            this.pendingChangeType = (_e = data.pendingChangeType) !== null && _e !== void 0 ? _e : undefined;
            this.seats = data.seats;
            this.seatsMaximum = (_f = data.seatsMaximum) !== null && _f !== void 0 ? _f : undefined;
            this.seatsMinimum = (_g = data.seatsMinimum) !== null && _g !== void 0 ? _g : undefined;
            this.type = data.type;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : new Date();
            this._creator = (_j = data.creator) !== null && _j !== void 0 ? _j : undefined;
        }
        /** The creator of the subscription. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The organization that the subscription is associated with. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
    }
    /**
     * Registered passkey for authentication.
     *
     * @param request - function to call the graphql client
     * @param data - L.PasskeyFragment response data
     */
    class Passkey extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.aaguid = data.aaguid;
            this.browserType = (_a = data.browserType) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.ip = (_c = data.ip) !== null && _c !== void 0 ? _c : undefined;
            this.label = data.label;
            this.lastUsedAt = (_d = parseDate(data.lastUsedAt)) !== null && _d !== void 0 ? _d : new Date();
            this.lastUsedSessionId = (_e = data.lastUsedSessionId) !== null && _e !== void 0 ? _e : undefined;
            this.locationCity = (_f = data.locationCity) !== null && _f !== void 0 ? _f : undefined;
            this.locationCountry = (_g = data.locationCountry) !== null && _g !== void 0 ? _g : undefined;
            this.locationCountryCode = (_h = data.locationCountryCode) !== null && _h !== void 0 ? _h : undefined;
            this.locationRegionCode = (_j = data.locationRegionCode) !== null && _j !== void 0 ? _j : undefined;
            this.updatedAt = (_k = parseDate(data.updatedAt)) !== null && _k !== void 0 ? _k : new Date();
            this.userAgent = (_l = data.userAgent) !== null && _l !== void 0 ? _l : undefined;
            this.clientType = data.clientType;
        }
    }
    /**
     * PasskeyLoginStartResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.PasskeyLoginStartResponseFragment response data
     */
    class PasskeyLoginStartResponse extends Request {
        constructor(request, data) {
            super(request);
            this.options = data.options;
            this.success = data.success;
        }
    }
    /**
     * A project.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectFragment response data
     */
    class Project extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.autoArchivedAt = (_b = parseDate(data.autoArchivedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.canceledAt = (_c = parseDate(data.canceledAt)) !== null && _c !== void 0 ? _c : undefined;
            this.color = data.color;
            this.completedAt = (_d = parseDate(data.completedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.completedIssueCountHistory = data.completedIssueCountHistory;
            this.completedScopeHistory = data.completedScopeHistory;
            this.content = (_e = data.content) !== null && _e !== void 0 ? _e : undefined;
            this.createdAt = (_f = parseDate(data.createdAt)) !== null && _f !== void 0 ? _f : new Date();
            this.description = data.description;
            this.healthUpdatedAt = (_g = parseDate(data.healthUpdatedAt)) !== null && _g !== void 0 ? _g : undefined;
            this.icon = (_h = data.icon) !== null && _h !== void 0 ? _h : undefined;
            this.id = data.id;
            this.inProgressScopeHistory = data.inProgressScopeHistory;
            this.issueCountHistory = data.issueCountHistory;
            this.name = data.name;
            this.priority = data.priority;
            this.progress = data.progress;
            this.projectUpdateRemindersPausedUntilAt = (_j = parseDate(data.projectUpdateRemindersPausedUntilAt)) !== null && _j !== void 0 ? _j : undefined;
            this.scope = data.scope;
            this.scopeHistory = data.scopeHistory;
            this.slackIssueComments = data.slackIssueComments;
            this.slackIssueStatuses = data.slackIssueStatuses;
            this.slackNewIssue = data.slackNewIssue;
            this.slugId = data.slugId;
            this.sortOrder = data.sortOrder;
            this.startDate = (_k = data.startDate) !== null && _k !== void 0 ? _k : undefined;
            this.startedAt = (_l = parseDate(data.startedAt)) !== null && _l !== void 0 ? _l : undefined;
            this.state = data.state;
            this.targetDate = (_m = data.targetDate) !== null && _m !== void 0 ? _m : undefined;
            this.trashed = (_o = data.trashed) !== null && _o !== void 0 ? _o : undefined;
            this.updatedAt = (_p = parseDate(data.updatedAt)) !== null && _p !== void 0 ? _p : new Date();
            this.url = data.url;
            this.documentContent = data.documentContent ? new DocumentContent(request, data.documentContent) : undefined;
            this.health = (_q = data.health) !== null && _q !== void 0 ? _q : undefined;
            this._convertedFromIssue = (_r = data.convertedFromIssue) !== null && _r !== void 0 ? _r : undefined;
            this._creator = (_s = data.creator) !== null && _s !== void 0 ? _s : undefined;
            this._favorite = (_t = data.favorite) !== null && _t !== void 0 ? _t : undefined;
            this._integrationsSettings = (_u = data.integrationsSettings) !== null && _u !== void 0 ? _u : undefined;
            this._lastAppliedTemplate = (_v = data.lastAppliedTemplate) !== null && _v !== void 0 ? _v : undefined;
            this._lead = (_w = data.lead) !== null && _w !== void 0 ? _w : undefined;
            this._status = data.status;
        }
        /** The project was created based on this issue. */
        get convertedFromIssue() {
            var _a, _b;
            return ((_a = this._convertedFromIssue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._convertedFromIssue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user who created the project. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user's favorite associated with this project. */
        get favorite() {
            var _a, _b;
            return ((_a = this._favorite) === null || _a === void 0 ? void 0 : _a.id) ? new FavoriteQuery(this._request).fetch((_b = this._favorite) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Settings for all integrations associated with that project. */
        get integrationsSettings() {
            var _a, _b;
            return ((_a = this._integrationsSettings) === null || _a === void 0 ? void 0 : _a.id)
                ? new IntegrationsSettingsQuery(this._request).fetch((_b = this._integrationsSettings) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The last template that was applied to this project. */
        get lastAppliedTemplate() {
            var _a, _b;
            return ((_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._lastAppliedTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The project lead. */
        get lead() {
            var _a, _b;
            return ((_a = this._lead) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._lead) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The status that the project is associated with. */
        get status() {
            return new ProjectStatusQuery(this._request).fetch(this._status.id);
        }
        /** Comments associated with the project overview. */
        comments(variables) {
            return new Project_CommentsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Documents associated with the project. */
        documents(variables) {
            return new Project_DocumentsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** External links associated with the project. */
        externalLinks(variables) {
            return new Project_ExternalLinksQuery(this._request, this.id, variables).fetch(variables);
        }
        /** History entries associated with the project. */
        history(variables) {
            return new Project_HistoryQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Initiatives that this project belongs to. */
        initiatives(variables) {
            return new Project_InitiativesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Issues associated with the project. */
        issues(variables) {
            return new Project_IssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** [DEPRECATED] Links associated with the project. */
        links(variables) {
            return new Project_LinksQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Users that are members of the project. */
        members(variables) {
            return new Project_MembersQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Milestones associated with the project. */
        projectMilestones(variables) {
            return new Project_ProjectMilestonesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Project updates associated with the project. */
        projectUpdates(variables) {
            return new Project_ProjectUpdatesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Teams associated with this project. */
        teams(variables) {
            return new Project_TeamsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Archives a project. */
        archive(variables) {
            return new ArchiveProjectMutation(this._request).fetch(this.id, variables);
        }
        /** Creates a new project. */
        create(input, variables) {
            return new CreateProjectMutation(this._request).fetch(input, variables);
        }
        /** Deletes (trashes) a project. */
        delete() {
            return new DeleteProjectMutation(this._request).fetch(this.id);
        }
        /** Unarchives a project. */
        unarchive() {
            return new UnarchiveProjectMutation(this._request).fetch(this.id);
        }
        /** Updates a project. */
        update() {
            return new ProjectUpdateQuery(this._request).fetch(this.id);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectArchivePayloadFragment response data
     */
    class ProjectArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * ProjectConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectConnection model
     * @param data - ProjectConnection response data
     */
    class ProjectConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Project(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * ProjectFilterSuggestionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectFilterSuggestionPayloadFragment response data
     */
    class ProjectFilterSuggestionPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.filter = (_a = data.filter) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * An history associated with a project.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectHistoryFragment response data
     */
    class ProjectHistory extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.entries = data.entries;
            this.id = data.id;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._project = data.project;
        }
        /** The project that the history is associated with. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
    }
    /**
     * ProjectHistoryConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectHistoryConnection model
     * @param data - ProjectHistoryConnection response data
     */
    class ProjectHistoryConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ProjectHistory(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * An external link for a project.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectLinkFragment response data
     */
    class ProjectLink extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.label = data.label;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.url = data.url;
            this._creator = data.creator;
            this._project = data.project;
        }
        /** The user who created the link. */
        get creator() {
            return new UserQuery(this._request).fetch(this._creator.id);
        }
        /** The project that the link is associated with. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** Creates a new project link. */
        create(input) {
            return new CreateProjectLinkMutation(this._request).fetch(input);
        }
        /** Deletes a project link. */
        delete() {
            return new DeleteProjectLinkMutation(this._request).fetch(this.id);
        }
        /** Updates a project link. */
        update(input) {
            return new UpdateProjectLinkMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * ProjectLinkConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectLinkConnection model
     * @param data - ProjectLinkConnection response data
     */
    class ProjectLinkConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ProjectLink(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * ProjectLinkPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectLinkPayloadFragment response data
     */
    class ProjectLinkPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._projectLink = data.projectLink;
        }
        /** The project that was created or updated. */
        get projectLink() {
            return new ProjectLinkQuery(this._request).fetch(this._projectLink.id);
        }
    }
    /**
     * A milestone for a project.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectMilestoneFragment response data
     */
    class ProjectMilestone extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.name = data.name;
            this.sortOrder = data.sortOrder;
            this.targetDate = (_d = data.targetDate) !== null && _d !== void 0 ? _d : undefined;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this.documentContent = data.documentContent ? new DocumentContent(request, data.documentContent) : undefined;
            this._project = data.project;
        }
        /** The project of the milestone. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** Issues associated with the project milestone. */
        issues(variables) {
            return new ProjectMilestone_IssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Creates a new project milestone. */
        create(input) {
            return new CreateProjectMilestoneMutation(this._request).fetch(input);
        }
        /** Deletes a project milestone. */
        delete() {
            return new DeleteProjectMilestoneMutation(this._request).fetch(this.id);
        }
        /** Updates a project milestone. */
        update(input) {
            return new UpdateProjectMilestoneMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * ProjectMilestoneConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectMilestoneConnection model
     * @param data - ProjectMilestoneConnection response data
     */
    class ProjectMilestoneConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ProjectMilestone(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * ProjectMilestoneMoveIssueToTeam model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectMilestoneMoveIssueToTeamFragment response data
     */
    class ProjectMilestoneMoveIssueToTeam extends Request {
        constructor(request, data) {
            super(request);
            this.issueId = data.issueId;
            this.teamId = data.teamId;
        }
    }
    /**
     * ProjectMilestoneMovePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectMilestoneMovePayloadFragment response data
     */
    class ProjectMilestoneMovePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.previousProjectTeamIds = data.previousProjectTeamIds
                ? new ProjectMilestoneMoveProjectTeams(request, data.previousProjectTeamIds)
                : undefined;
            this.previousIssueTeamIds = data.previousIssueTeamIds
                ? data.previousIssueTeamIds.map(node => new ProjectMilestoneMoveIssueToTeam(request, node))
                : undefined;
            this._projectMilestone = data.projectMilestone;
        }
        /** The project milestone that was created or updated. */
        get projectMilestone() {
            return new ProjectMilestoneQuery(this._request).fetch(this._projectMilestone.id);
        }
    }
    /**
     * ProjectMilestoneMoveProjectTeams model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectMilestoneMoveProjectTeamsFragment response data
     */
    class ProjectMilestoneMoveProjectTeams extends Request {
        constructor(request, data) {
            super(request);
            this.projectId = data.projectId;
            this.teamIds = data.teamIds;
        }
    }
    /**
     * ProjectMilestonePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectMilestonePayloadFragment response data
     */
    class ProjectMilestonePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._projectMilestone = data.projectMilestone;
        }
        /** The project milestone that was created or updated. */
        get projectMilestone() {
            return new ProjectMilestoneQuery(this._request).fetch(this._projectMilestone.id);
        }
    }
    /**
     * A project related notification.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectNotificationFragment response data
     */
    class ProjectNotification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.commentId = (_b = data.commentId) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.emailedAt = (_d = parseDate(data.emailedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.parentCommentId = (_e = data.parentCommentId) !== null && _e !== void 0 ? _e : undefined;
            this.projectId = data.projectId;
            this.projectMilestoneId = (_f = data.projectMilestoneId) !== null && _f !== void 0 ? _f : undefined;
            this.projectUpdateId = (_g = data.projectUpdateId) !== null && _g !== void 0 ? _g : undefined;
            this.reactionEmoji = (_h = data.reactionEmoji) !== null && _h !== void 0 ? _h : undefined;
            this.readAt = (_j = parseDate(data.readAt)) !== null && _j !== void 0 ? _j : undefined;
            this.snoozedUntilAt = (_k = parseDate(data.snoozedUntilAt)) !== null && _k !== void 0 ? _k : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_l = parseDate(data.unsnoozedAt)) !== null && _l !== void 0 ? _l : undefined;
            this.updatedAt = (_m = parseDate(data.updatedAt)) !== null && _m !== void 0 ? _m : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this._actor = (_o = data.actor) !== null && _o !== void 0 ? _o : undefined;
            this._comment = (_p = data.comment) !== null && _p !== void 0 ? _p : undefined;
            this._externalUserActor = (_q = data.externalUserActor) !== null && _q !== void 0 ? _q : undefined;
            this._parentComment = (_r = data.parentComment) !== null && _r !== void 0 ? _r : undefined;
            this._project = data.project;
            this._projectUpdate = (_s = data.projectUpdate) !== null && _s !== void 0 ? _s : undefined;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The comment related to the notification. */
        get comment() {
            var _a, _b;
            return ((_a = this._comment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._comment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The parent comment related to the notification, if a notification is a reply comment notification. */
        get parentComment() {
            var _a, _b;
            return ((_a = this._parentComment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._parentComment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The project related to the notification. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** The project update related to the notification. */
        get projectUpdate() {
            var _a, _b;
            return ((_a = this._projectUpdate) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectUpdateQuery(this._request).fetch((_b = this._projectUpdate) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
    }
    /**
     * A project notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectNotificationSubscriptionFragment response data
     */
    class ProjectNotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.notificationSubscriptionTypes = data.notificationSubscriptionTypes;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = (_f = data.customView) !== null && _f !== void 0 ? _f : undefined;
            this._cycle = (_g = data.cycle) !== null && _g !== void 0 ? _g : undefined;
            this._initiative = (_h = data.initiative) !== null && _h !== void 0 ? _h : undefined;
            this._label = (_j = data.label) !== null && _j !== void 0 ? _j : undefined;
            this._project = data.project;
            this._subscriber = data.subscriber;
            this._team = (_k = data.team) !== null && _k !== void 0 ? _k : undefined;
            this._user = (_l = data.user) !== null && _l !== void 0 ? _l : undefined;
        }
        /** The contextual custom view associated with the notification subscription. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual cycle view associated with the notification subscription. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual initiative view associated with the notification subscription. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual label view associated with the notification subscription. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The project subscribed to. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The team associated with the notification subscription. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user view associated with the notification subscription. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * ProjectPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectPayloadFragment response data
     */
    class ProjectPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._project = (_a = data.project) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The project that was created or updated. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * A relation between two projects.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectRelationFragment response data
     */
    class ProjectRelation extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.anchorType = data.anchorType;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.relatedAnchorType = data.relatedAnchorType;
            this.type = data.type;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._project = data.project;
            this._projectMilestone = (_d = data.projectMilestone) !== null && _d !== void 0 ? _d : undefined;
            this._relatedProject = data.relatedProject;
            this._relatedProjectMilestone = (_e = data.relatedProjectMilestone) !== null && _e !== void 0 ? _e : undefined;
            this._user = (_f = data.user) !== null && _f !== void 0 ? _f : undefined;
        }
        /** The project whose relationship is being described. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** The milestone within the project whose relationship is being described. */
        get projectMilestone() {
            var _a, _b;
            return ((_a = this._projectMilestone) === null || _a === void 0 ? void 0 : _a.id)
                ? new ProjectMilestoneQuery(this._request).fetch((_b = this._projectMilestone) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The related project. */
        get relatedProject() {
            return new ProjectQuery(this._request).fetch(this._relatedProject.id);
        }
        /** The milestone within the related project whose relationship is being described. */
        get relatedProjectMilestone() {
            var _a, _b;
            return ((_a = this._relatedProjectMilestone) === null || _a === void 0 ? void 0 : _a.id)
                ? new ProjectMilestoneQuery(this._request).fetch((_b = this._relatedProjectMilestone) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The last user who created or modified the relation. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * ProjectRelationConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectRelationConnection model
     * @param data - ProjectRelationConnection response data
     */
    class ProjectRelationConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ProjectRelation(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * ProjectRelationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectRelationPayloadFragment response data
     */
    class ProjectRelationPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._projectRelation = data.projectRelation;
        }
        /** The project relation that was created or updated. */
        get projectRelation() {
            return new ProjectRelationQuery(this._request).fetch(this._projectRelation.id);
        }
    }
    /**
     * ProjectSearchPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectSearchPayloadFragment response data
     */
    class ProjectSearchPayload extends Request {
        constructor(request, data) {
            super(request);
            this.totalCount = data.totalCount;
            this.archivePayload = new ArchiveResponse(request, data.archivePayload);
            this.pageInfo = new PageInfo(request, data.pageInfo);
            this.nodes = data.nodes.map(node => new ProjectSearchResult(request, node));
        }
    }
    /**
     * ProjectSearchResult model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectSearchResultFragment response data
     */
    class ProjectSearchResult extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.autoArchivedAt = (_b = parseDate(data.autoArchivedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.canceledAt = (_c = parseDate(data.canceledAt)) !== null && _c !== void 0 ? _c : undefined;
            this.color = data.color;
            this.completedAt = (_d = parseDate(data.completedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.completedIssueCountHistory = data.completedIssueCountHistory;
            this.completedScopeHistory = data.completedScopeHistory;
            this.content = (_e = data.content) !== null && _e !== void 0 ? _e : undefined;
            this.createdAt = (_f = parseDate(data.createdAt)) !== null && _f !== void 0 ? _f : new Date();
            this.description = data.description;
            this.healthUpdatedAt = (_g = parseDate(data.healthUpdatedAt)) !== null && _g !== void 0 ? _g : undefined;
            this.icon = (_h = data.icon) !== null && _h !== void 0 ? _h : undefined;
            this.id = data.id;
            this.inProgressScopeHistory = data.inProgressScopeHistory;
            this.issueCountHistory = data.issueCountHistory;
            this.metadata = data.metadata;
            this.name = data.name;
            this.priority = data.priority;
            this.progress = data.progress;
            this.projectUpdateRemindersPausedUntilAt = (_j = parseDate(data.projectUpdateRemindersPausedUntilAt)) !== null && _j !== void 0 ? _j : undefined;
            this.scope = data.scope;
            this.scopeHistory = data.scopeHistory;
            this.slackIssueComments = data.slackIssueComments;
            this.slackIssueStatuses = data.slackIssueStatuses;
            this.slackNewIssue = data.slackNewIssue;
            this.slugId = data.slugId;
            this.sortOrder = data.sortOrder;
            this.startDate = (_k = data.startDate) !== null && _k !== void 0 ? _k : undefined;
            this.startedAt = (_l = parseDate(data.startedAt)) !== null && _l !== void 0 ? _l : undefined;
            this.state = data.state;
            this.targetDate = (_m = data.targetDate) !== null && _m !== void 0 ? _m : undefined;
            this.trashed = (_o = data.trashed) !== null && _o !== void 0 ? _o : undefined;
            this.updatedAt = (_p = parseDate(data.updatedAt)) !== null && _p !== void 0 ? _p : new Date();
            this.url = data.url;
            this.documentContent = data.documentContent ? new DocumentContent(request, data.documentContent) : undefined;
            this.health = (_q = data.health) !== null && _q !== void 0 ? _q : undefined;
            this._convertedFromIssue = (_r = data.convertedFromIssue) !== null && _r !== void 0 ? _r : undefined;
            this._creator = (_s = data.creator) !== null && _s !== void 0 ? _s : undefined;
            this._favorite = (_t = data.favorite) !== null && _t !== void 0 ? _t : undefined;
            this._integrationsSettings = (_u = data.integrationsSettings) !== null && _u !== void 0 ? _u : undefined;
            this._lastAppliedTemplate = (_v = data.lastAppliedTemplate) !== null && _v !== void 0 ? _v : undefined;
            this._lead = (_w = data.lead) !== null && _w !== void 0 ? _w : undefined;
            this._status = data.status;
        }
        /** The project was created based on this issue. */
        get convertedFromIssue() {
            var _a, _b;
            return ((_a = this._convertedFromIssue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._convertedFromIssue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user who created the project. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user's favorite associated with this project. */
        get favorite() {
            var _a, _b;
            return ((_a = this._favorite) === null || _a === void 0 ? void 0 : _a.id) ? new FavoriteQuery(this._request).fetch((_b = this._favorite) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Settings for all integrations associated with that project. */
        get integrationsSettings() {
            var _a, _b;
            return ((_a = this._integrationsSettings) === null || _a === void 0 ? void 0 : _a.id)
                ? new IntegrationsSettingsQuery(this._request).fetch((_b = this._integrationsSettings) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The last template that was applied to this project. */
        get lastAppliedTemplate() {
            var _a, _b;
            return ((_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._lastAppliedTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The project lead. */
        get lead() {
            var _a, _b;
            return ((_a = this._lead) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._lead) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The status that the project is associated with. */
        get status() {
            return new ProjectStatusQuery(this._request).fetch(this._status.id);
        }
    }
    /**
     * ProjectSearchResultConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectSearchResultConnection model
     * @param data - ProjectSearchResultConnection response data
     */
    class ProjectSearchResultConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ProjectSearchResult(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A project status.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectStatusFragment response data
     */
    class ProjectStatus extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = data.color;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.indefinite = data.indefinite;
            this.name = data.name;
            this.position = data.position;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this.type = data.type;
        }
        /** Archives a project status. */
        archive() {
            return new ArchiveProjectStatusMutation(this._request).fetch(this.id);
        }
        /** Creates a new project status. */
        create(input) {
            return new CreateProjectStatusMutation(this._request).fetch(input);
        }
        /** Unarchives a project status. */
        unarchive() {
            return new UnarchiveProjectStatusMutation(this._request).fetch(this.id);
        }
        /** Updates a project status. */
        update(input) {
            return new UpdateProjectStatusMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectStatusArchivePayloadFragment response data
     */
    class ProjectStatusArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectStatusQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * ProjectStatusConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectStatusConnection model
     * @param data - ProjectStatusConnection response data
     */
    class ProjectStatusConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ProjectStatus(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * ProjectStatusCountPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectStatusCountPayloadFragment response data
     */
    class ProjectStatusCountPayload extends Request {
        constructor(request, data) {
            super(request);
            this.count = data.count;
        }
    }
    /**
     * ProjectStatusPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectStatusPayloadFragment response data
     */
    class ProjectStatusPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._status = data.status;
        }
        /** The project status that was created or updated. */
        get status() {
            return new ProjectStatusQuery(this._request).fetch(this._status.id);
        }
    }
    /**
     * An update associated with a project.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectUpdateFragment response data
     */
    class ProjectUpdate extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.body = data.body;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.diff = (_c = data.diff) !== null && _c !== void 0 ? _c : undefined;
            this.diffMarkdown = (_d = data.diffMarkdown) !== null && _d !== void 0 ? _d : undefined;
            this.editedAt = (_e = parseDate(data.editedAt)) !== null && _e !== void 0 ? _e : undefined;
            this.id = data.id;
            this.isDiffHidden = data.isDiffHidden;
            this.reactionData = data.reactionData;
            this.slugId = data.slugId;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
            this.url = data.url;
            this.reactions = data.reactions.map(node => new Reaction(request, node));
            this.health = data.health;
            this._project = data.project;
            this._user = data.user;
        }
        /** The project that the update is associated with. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** The user who wrote the update. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** Comments associated with the project update. */
        comments(variables) {
            return new ProjectUpdate_CommentsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Creates a new project update. */
        create(input) {
            return new CreateProjectUpdateMutation(this._request).fetch(input);
        }
        /** Deletes a project update. */
        delete() {
            return new DeleteProjectUpdateMutation(this._request).fetch(this.id);
        }
        /** Updates a project update. */
        update(input) {
            return new UpdateProjectUpdateMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * ProjectUpdateConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectUpdateConnection model
     * @param data - ProjectUpdateConnection response data
     */
    class ProjectUpdateConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ProjectUpdate(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * Holds information about when a user has interacted with a project update.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectUpdateInteractionFragment response data
     */
    class ProjectUpdateInteraction extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.readAt = (_c = parseDate(data.readAt)) !== null && _c !== void 0 ? _c : new Date();
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this._projectUpdate = data.projectUpdate;
            this._user = data.user;
        }
        /** The project update that has been interacted with. */
        get projectUpdate() {
            return new ProjectUpdateQuery(this._request).fetch(this._projectUpdate.id);
        }
        /** The user that has interacted with the project update. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** Creates a new interaction on a project update. */
        create(input) {
            return new CreateProjectUpdateInteractionMutation(this._request).fetch(input);
        }
    }
    /**
     * ProjectUpdateInteractionConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectUpdateInteractionConnection model
     * @param data - ProjectUpdateInteractionConnection response data
     */
    class ProjectUpdateInteractionConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ProjectUpdateInteraction(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * ProjectUpdateInteractionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectUpdateInteractionPayloadFragment response data
     */
    class ProjectUpdateInteractionPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._projectUpdateInteraction = data.projectUpdateInteraction;
        }
        /** The project update interaction that was created or updated. */
        get projectUpdateInteraction() {
            return new ProjectUpdateInteractionQuery(this._request).fetch(this._projectUpdateInteraction.id);
        }
    }
    /**
     * ProjectUpdatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectUpdatePayloadFragment response data
     */
    class ProjectUpdatePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._projectUpdate = data.projectUpdate;
        }
        /** The project update that was created or updated. */
        get projectUpdate() {
            return new ProjectUpdateQuery(this._request).fetch(this._projectUpdate.id);
        }
    }
    /**
     * ProjectUpdateReminderPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectUpdateReminderPayloadFragment response data
     */
    class ProjectUpdateReminderPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * ProjectUpdateWithInteractionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectUpdateWithInteractionPayloadFragment response data
     */
    class ProjectUpdateWithInteractionPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._interaction = data.interaction;
            this._projectUpdate = data.projectUpdate;
        }
        /** The project update that was created or updated. */
        get interaction() {
            return new ProjectUpdateInteractionQuery(this._request).fetch(this._interaction.id);
        }
        /** The project update that was created or updated. */
        get projectUpdate() {
            return new ProjectUpdateQuery(this._request).fetch(this._projectUpdate.id);
        }
    }
    /**
     * A user's web or mobile push notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.PushSubscriptionFragment response data
     */
    class PushSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
        }
        /** Creates a push subscription. */
        create(input) {
            return new CreatePushSubscriptionMutation(this._request).fetch(input);
        }
        /** Deletes a push subscription. */
        delete() {
            return new DeletePushSubscriptionMutation(this._request).fetch(this.id);
        }
    }
    /**
     * PushSubscriptionConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this PushSubscriptionConnection model
     * @param data - PushSubscriptionConnection response data
     */
    class PushSubscriptionConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new PushSubscription(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * PushSubscriptionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.PushSubscriptionPayloadFragment response data
     */
    class PushSubscriptionPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.entity = new PushSubscription(request, data.entity);
        }
    }
    /**
     * PushSubscriptionTestPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.PushSubscriptionTestPayloadFragment response data
     */
    class PushSubscriptionTestPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * RateLimitPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.RateLimitPayloadFragment response data
     */
    class RateLimitPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.identifier = (_a = data.identifier) !== null && _a !== void 0 ? _a : undefined;
            this.kind = data.kind;
            this.limits = data.limits.map(node => new RateLimitResultPayload(request, node));
        }
    }
    /**
     * RateLimitResultPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.RateLimitResultPayloadFragment response data
     */
    class RateLimitResultPayload extends Request {
        constructor(request, data) {
            super(request);
            this.allowedAmount = data.allowedAmount;
            this.period = data.period;
            this.remainingAmount = data.remainingAmount;
            this.requestedAmount = data.requestedAmount;
            this.reset = data.reset;
            this.type = data.type;
        }
    }
    /**
     * A reaction associated with a comment or a project update.
     *
     * @param request - function to call the graphql client
     * @param data - L.ReactionFragment response data
     */
    class Reaction extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.emoji = data.emoji;
            this.id = data.id;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._comment = (_d = data.comment) !== null && _d !== void 0 ? _d : undefined;
            this._externalUser = (_e = data.externalUser) !== null && _e !== void 0 ? _e : undefined;
            this._issue = (_f = data.issue) !== null && _f !== void 0 ? _f : undefined;
            this._projectUpdate = (_g = data.projectUpdate) !== null && _g !== void 0 ? _g : undefined;
            this._user = (_h = data.user) !== null && _h !== void 0 ? _h : undefined;
        }
        /** The comment that the reaction is associated with. */
        get comment() {
            var _a, _b;
            return ((_a = this._comment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._comment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The external user that created the reaction. */
        get externalUser() {
            var _a, _b;
            return ((_a = this._externalUser) === null || _a === void 0 ? void 0 : _a.id) ? new ExternalUserQuery(this._request).fetch((_b = this._externalUser) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The issue that the reaction is associated with. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The project update that the reaction is associated with. */
        get projectUpdate() {
            var _a, _b;
            return ((_a = this._projectUpdate) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectUpdateQuery(this._request).fetch((_b = this._projectUpdate) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user that created the reaction. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Creates a new reaction. */
        create(input) {
            return new CreateReactionMutation(this._request).fetch(input);
        }
        /** Deletes a reaction. */
        delete() {
            return new DeleteReactionMutation(this._request).fetch(this.id);
        }
    }
    /**
     * ReactionConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ReactionConnection model
     * @param data - ReactionConnection response data
     */
    class ReactionConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Reaction(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * ReactionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ReactionPayloadFragment response data
     */
    class ReactionPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.reaction = new Reaction(request, data.reaction);
        }
    }
    /**
     * A reminder that can be attached to different entities.
     *
     * @param request - function to call the graphql client
     * @param data - L.ReminderFragment response data
     */
    class Reminder extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.comment = (_b = data.comment) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.id = data.id;
            this.remindAt = (_d = parseDate(data.remindAt)) !== null && _d !== void 0 ? _d : undefined;
            this.schedule = (_e = data.schedule) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
            this._documentId = (_g = data.documentId) !== null && _g !== void 0 ? _g : undefined;
            this._issueId = (_h = data.issueId) !== null && _h !== void 0 ? _h : undefined;
            this._projectId = (_j = data.projectId) !== null && _j !== void 0 ? _j : undefined;
            this._user = data.user;
        }
        /** The document that the reminder is associated with. */
        get documentId() {
            var _a, _b;
            return ((_a = this._documentId) === null || _a === void 0 ? void 0 : _a.id) ? new DocumentQuery(this._request).fetch((_b = this._documentId) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The issue that the reminder is associated with. */
        get issueId() {
            var _a, _b;
            return ((_a = this._issueId) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issueId) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The project that the reminder is associated with. */
        get projectId() {
            var _a, _b;
            return ((_a = this._projectId) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._projectId) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user that created a reminder. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
    }
    /**
     * A roadmap for projects.
     *
     * @param request - function to call the graphql client
     * @param data - L.RoadmapFragment response data
     */
    class Roadmap extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.description = (_d = data.description) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.name = data.name;
            this.slugId = data.slugId;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this.url = data.url;
            this._creator = data.creator;
            this._owner = (_f = data.owner) !== null && _f !== void 0 ? _f : undefined;
        }
        /** The user who created the roadmap. */
        get creator() {
            return new UserQuery(this._request).fetch(this._creator.id);
        }
        /** The organization of the roadmap. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The user who owns the roadmap. */
        get owner() {
            var _a, _b;
            return ((_a = this._owner) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._owner) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Projects associated with the roadmap. */
        projects(variables) {
            return new Roadmap_ProjectsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Archives a roadmap. */
        archive() {
            return new ArchiveRoadmapMutation(this._request).fetch(this.id);
        }
        /** Creates a new roadmap. */
        create(input) {
            return new CreateRoadmapMutation(this._request).fetch(input);
        }
        /** Deletes a roadmap. */
        delete() {
            return new DeleteRoadmapMutation(this._request).fetch(this.id);
        }
        /** Unarchives a roadmap. */
        unarchive() {
            return new UnarchiveRoadmapMutation(this._request).fetch(this.id);
        }
        /** Updates a roadmap. */
        update(input) {
            return new UpdateRoadmapMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.RoadmapArchivePayloadFragment response data
     */
    class RoadmapArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new RoadmapQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * RoadmapConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this RoadmapConnection model
     * @param data - RoadmapConnection response data
     */
    class RoadmapConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Roadmap(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * RoadmapPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.RoadmapPayloadFragment response data
     */
    class RoadmapPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._roadmap = data.roadmap;
        }
        /** The roadmap that was created or updated. */
        get roadmap() {
            return new RoadmapQuery(this._request).fetch(this._roadmap.id);
        }
    }
    /**
     * Join table between projects and roadmaps.
     *
     * @param request - function to call the graphql client
     * @param data - L.RoadmapToProjectFragment response data
     */
    class RoadmapToProject extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._project = data.project;
            this._roadmap = data.roadmap;
        }
        /** The project that the roadmap is associated with. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** The roadmap that the project is associated with. */
        get roadmap() {
            return new RoadmapQuery(this._request).fetch(this._roadmap.id);
        }
        /** Creates a new roadmapToProject join. */
        create(input) {
            return new CreateRoadmapToProjectMutation(this._request).fetch(input);
        }
        /** Deletes a roadmapToProject. */
        delete() {
            return new DeleteRoadmapToProjectMutation(this._request).fetch(this.id);
        }
        /** Updates a roadmapToProject. */
        update(input) {
            return new UpdateRoadmapToProjectMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * RoadmapToProjectConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this RoadmapToProjectConnection model
     * @param data - RoadmapToProjectConnection response data
     */
    class RoadmapToProjectConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new RoadmapToProject(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * RoadmapToProjectPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.RoadmapToProjectPayloadFragment response data
     */
    class RoadmapToProjectPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._roadmapToProject = data.roadmapToProject;
        }
        /** The roadmapToProject that was created or updated. */
        get roadmapToProject() {
            return new RoadmapToProjectQuery(this._request).fetch(this._roadmapToProject.id);
        }
    }
    /**
     * Sentry specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.SentrySettingsFragment response data
     */
    class SentrySettings extends Request {
        constructor(request, data) {
            super(request);
            this.organizationSlug = data.organizationSlug;
        }
    }
    /**
     * Shared Slack integration settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.SharedSlackSettingsFragment response data
     */
    class SharedSlackSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.enterpriseId = (_a = data.enterpriseId) !== null && _a !== void 0 ? _a : undefined;
            this.enterpriseName = (_b = data.enterpriseName) !== null && _b !== void 0 ? _b : undefined;
            this.shouldUnfurl = (_c = data.shouldUnfurl) !== null && _c !== void 0 ? _c : undefined;
            this.teamId = (_d = data.teamId) !== null && _d !== void 0 ? _d : undefined;
            this.teamName = (_e = data.teamName) !== null && _e !== void 0 ? _e : undefined;
        }
    }
    /**
     * Slack Asks specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.SlackAsksSettingsFragment response data
     */
    class SlackAsksSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.enterpriseId = (_a = data.enterpriseId) !== null && _a !== void 0 ? _a : undefined;
            this.enterpriseName = (_b = data.enterpriseName) !== null && _b !== void 0 ? _b : undefined;
            this.shouldUnfurl = (_c = data.shouldUnfurl) !== null && _c !== void 0 ? _c : undefined;
            this.teamId = (_d = data.teamId) !== null && _d !== void 0 ? _d : undefined;
            this.teamName = (_e = data.teamName) !== null && _e !== void 0 ? _e : undefined;
            this.slackChannelMapping = data.slackChannelMapping
                ? data.slackChannelMapping.map(node => new SlackChannelNameMapping(request, node))
                : undefined;
            this.canAdministrate = data.canAdministrate;
        }
    }
    /**
     * Tuple for mapping Slack channel IDs to names.
     *
     * @param request - function to call the graphql client
     * @param data - L.SlackAsksTeamSettingsFragment response data
     */
    class SlackAsksTeamSettings extends Request {
        constructor(request, data) {
            super(request);
            this.hasDefaultAsk = data.hasDefaultAsk;
            this.id = data.id;
        }
    }
    /**
     * SlackChannelConnectPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.SlackChannelConnectPayloadFragment response data
     */
    class SlackChannelConnectPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.addBot = data.addBot;
            this.lastSyncId = data.lastSyncId;
            this.nudgeToConnectMainSlackIntegration = (_a = data.nudgeToConnectMainSlackIntegration) !== null && _a !== void 0 ? _a : undefined;
            this.nudgeToUpdateMainSlackIntegration = (_b = data.nudgeToUpdateMainSlackIntegration) !== null && _b !== void 0 ? _b : undefined;
            this.success = data.success;
            this._integration = (_c = data.integration) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The integration that was created or updated. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * Object for mapping Slack channel IDs to names and other settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.SlackChannelNameMappingFragment response data
     */
    class SlackChannelNameMapping extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.aiTitles = (_a = data.aiTitles) !== null && _a !== void 0 ? _a : undefined;
            this.autoCreateOnBotMention = (_b = data.autoCreateOnBotMention) !== null && _b !== void 0 ? _b : undefined;
            this.autoCreateOnEmoji = (_c = data.autoCreateOnEmoji) !== null && _c !== void 0 ? _c : undefined;
            this.autoCreateOnMessage = (_d = data.autoCreateOnMessage) !== null && _d !== void 0 ? _d : undefined;
            this.autoCreateTemplateId = (_e = data.autoCreateTemplateId) !== null && _e !== void 0 ? _e : undefined;
            this.botAdded = (_f = data.botAdded) !== null && _f !== void 0 ? _f : undefined;
            this.id = data.id;
            this.isPrivate = (_g = data.isPrivate) !== null && _g !== void 0 ? _g : undefined;
            this.isShared = (_h = data.isShared) !== null && _h !== void 0 ? _h : undefined;
            this.name = data.name;
            this.postAcceptedFromTriageUpdates = (_j = data.postAcceptedFromTriageUpdates) !== null && _j !== void 0 ? _j : undefined;
            this.postCancellationUpdates = (_k = data.postCancellationUpdates) !== null && _k !== void 0 ? _k : undefined;
            this.postCompletionUpdates = (_l = data.postCompletionUpdates) !== null && _l !== void 0 ? _l : undefined;
            this.teams = data.teams.map(node => new SlackAsksTeamSettings(request, node));
        }
    }
    /**
     * Slack notification specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.SlackPostSettingsFragment response data
     */
    class SlackPostSettings extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.channel = data.channel;
            this.channelId = data.channelId;
            this.configurationUrl = data.configurationUrl;
            this.channelType = (_a = data.channelType) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * Settings for the regular Slack integration.
     *
     * @param request - function to call the graphql client
     * @param data - L.SlackSettingsFragment response data
     */
    class SlackSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.enterpriseId = (_a = data.enterpriseId) !== null && _a !== void 0 ? _a : undefined;
            this.enterpriseName = (_b = data.enterpriseName) !== null && _b !== void 0 ? _b : undefined;
            this.linkOnIssueIdMention = data.linkOnIssueIdMention;
            this.shouldUnfurl = (_c = data.shouldUnfurl) !== null && _c !== void 0 ? _c : undefined;
            this.teamId = (_d = data.teamId) !== null && _d !== void 0 ? _d : undefined;
            this.teamName = (_e = data.teamName) !== null && _e !== void 0 ? _e : undefined;
        }
    }
    /**
     * SsoUrlFromEmailResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.SsoUrlFromEmailResponseFragment response data
     */
    class SsoUrlFromEmailResponse extends Request {
        constructor(request, data) {
            super(request);
            this.samlSsoUrl = data.samlSsoUrl;
            this.success = data.success;
        }
    }
    /**
     * SuccessPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.SuccessPayloadFragment response data
     */
    class SuccessPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * SummaryPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.SummaryPayloadFragment response data
     */
    class SummaryPayload extends Request {
        constructor(request, data) {
            super(request);
            this.summary = data.summary;
        }
    }
    /**
     * SynchronizedPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.SynchronizedPayloadFragment response data
     */
    class SynchronizedPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
        }
    }
    /**
     * An organizational unit that contains issues.
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamFragment response data
     */
    class Team extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.autoArchivePeriod = data.autoArchivePeriod;
            this.autoCloseChildIssues = (_b = data.autoCloseChildIssues) !== null && _b !== void 0 ? _b : undefined;
            this.autoCloseParentIssues = (_c = data.autoCloseParentIssues) !== null && _c !== void 0 ? _c : undefined;
            this.autoClosePeriod = (_d = data.autoClosePeriod) !== null && _d !== void 0 ? _d : undefined;
            this.autoCloseStateId = (_e = data.autoCloseStateId) !== null && _e !== void 0 ? _e : undefined;
            this.color = (_f = data.color) !== null && _f !== void 0 ? _f : undefined;
            this.createdAt = (_g = parseDate(data.createdAt)) !== null && _g !== void 0 ? _g : new Date();
            this.cycleCalenderUrl = data.cycleCalenderUrl;
            this.cycleCooldownTime = data.cycleCooldownTime;
            this.cycleDuration = data.cycleDuration;
            this.cycleIssueAutoAssignCompleted = data.cycleIssueAutoAssignCompleted;
            this.cycleIssueAutoAssignStarted = data.cycleIssueAutoAssignStarted;
            this.cycleLockToActive = data.cycleLockToActive;
            this.cycleStartDay = data.cycleStartDay;
            this.cyclesEnabled = data.cyclesEnabled;
            this.defaultIssueEstimate = data.defaultIssueEstimate;
            this.defaultTemplateForMembersId = (_h = data.defaultTemplateForMembersId) !== null && _h !== void 0 ? _h : undefined;
            this.defaultTemplateForNonMembersId = (_j = data.defaultTemplateForNonMembersId) !== null && _j !== void 0 ? _j : undefined;
            this.description = (_k = data.description) !== null && _k !== void 0 ? _k : undefined;
            this.groupIssueHistory = data.groupIssueHistory;
            this.icon = (_l = data.icon) !== null && _l !== void 0 ? _l : undefined;
            this.id = data.id;
            this.inviteHash = data.inviteHash;
            this.issueCount = data.issueCount;
            this.issueEstimationAllowZero = data.issueEstimationAllowZero;
            this.issueEstimationExtended = data.issueEstimationExtended;
            this.issueEstimationType = data.issueEstimationType;
            this.issueOrderingNoPriorityFirst = data.issueOrderingNoPriorityFirst;
            this.issueSortOrderDefaultToBottom = data.issueSortOrderDefaultToBottom;
            this.key = data.key;
            this.name = data.name;
            this.private = data.private;
            this.requirePriorityToLeaveTriage = data.requirePriorityToLeaveTriage;
            this.scimGroupName = (_m = data.scimGroupName) !== null && _m !== void 0 ? _m : undefined;
            this.scimManaged = data.scimManaged;
            this.setIssueSortOrderOnStateChange = data.setIssueSortOrderOnStateChange;
            this.slackIssueComments = data.slackIssueComments;
            this.slackIssueStatuses = data.slackIssueStatuses;
            this.slackNewIssue = data.slackNewIssue;
            this.timezone = data.timezone;
            this.triageEnabled = data.triageEnabled;
            this.upcomingCycleCount = data.upcomingCycleCount;
            this.updatedAt = (_o = parseDate(data.updatedAt)) !== null && _o !== void 0 ? _o : new Date();
            this._activeCycle = (_p = data.activeCycle) !== null && _p !== void 0 ? _p : undefined;
            this._defaultIssueState = (_q = data.defaultIssueState) !== null && _q !== void 0 ? _q : undefined;
            this._defaultProjectTemplate = (_r = data.defaultProjectTemplate) !== null && _r !== void 0 ? _r : undefined;
            this._defaultTemplateForMembers = (_s = data.defaultTemplateForMembers) !== null && _s !== void 0 ? _s : undefined;
            this._defaultTemplateForNonMembers = (_t = data.defaultTemplateForNonMembers) !== null && _t !== void 0 ? _t : undefined;
            this._draftWorkflowState = (_u = data.draftWorkflowState) !== null && _u !== void 0 ? _u : undefined;
            this._integrationsSettings = (_v = data.integrationsSettings) !== null && _v !== void 0 ? _v : undefined;
            this._markedAsDuplicateWorkflowState = (_w = data.markedAsDuplicateWorkflowState) !== null && _w !== void 0 ? _w : undefined;
            this._mergeWorkflowState = (_x = data.mergeWorkflowState) !== null && _x !== void 0 ? _x : undefined;
            this._mergeableWorkflowState = (_y = data.mergeableWorkflowState) !== null && _y !== void 0 ? _y : undefined;
            this._reviewWorkflowState = (_z = data.reviewWorkflowState) !== null && _z !== void 0 ? _z : undefined;
            this._startWorkflowState = (_0 = data.startWorkflowState) !== null && _0 !== void 0 ? _0 : undefined;
            this._triageIssueState = (_1 = data.triageIssueState) !== null && _1 !== void 0 ? _1 : undefined;
            this._triageResponsibility = (_2 = data.triageResponsibility) !== null && _2 !== void 0 ? _2 : undefined;
        }
        /** Team's currently active cycle. */
        get activeCycle() {
            var _a, _b;
            return ((_a = this._activeCycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._activeCycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The default workflow state into which issues are set when they are opened by team members. */
        get defaultIssueState() {
            var _a, _b;
            return ((_a = this._defaultIssueState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._defaultIssueState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The default template to use for new projects created for the team. */
        get defaultProjectTemplate() {
            var _a, _b;
            return ((_a = this._defaultProjectTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._defaultProjectTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The default template to use for new issues created by members of the team. */
        get defaultTemplateForMembers() {
            var _a, _b;
            return ((_a = this._defaultTemplateForMembers) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._defaultTemplateForMembers) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The default template to use for new issues created by non-members of the team. */
        get defaultTemplateForNonMembers() {
            var _a, _b;
            return ((_a = this._defaultTemplateForNonMembers) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._defaultTemplateForNonMembers) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The workflow state into which issues are moved when a PR has been opened as draft. */
        get draftWorkflowState() {
            var _a, _b;
            return ((_a = this._draftWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._draftWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** Settings for all integrations associated with that team. */
        get integrationsSettings() {
            var _a, _b;
            return ((_a = this._integrationsSettings) === null || _a === void 0 ? void 0 : _a.id)
                ? new IntegrationsSettingsQuery(this._request).fetch((_b = this._integrationsSettings) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The workflow state into which issues are moved when they are marked as a duplicate of another issue. Defaults to the first canceled state. */
        get markedAsDuplicateWorkflowState() {
            var _a, _b;
            return ((_a = this._markedAsDuplicateWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._markedAsDuplicateWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The workflow state into which issues are moved when a PR has been merged. */
        get mergeWorkflowState() {
            var _a, _b;
            return ((_a = this._mergeWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._mergeWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The workflow state into which issues are moved when a PR is ready to be merged. */
        get mergeableWorkflowState() {
            var _a, _b;
            return ((_a = this._mergeableWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._mergeableWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The organization that the team is associated with. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The workflow state into which issues are moved when a review has been requested for the PR. */
        get reviewWorkflowState() {
            var _a, _b;
            return ((_a = this._reviewWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._reviewWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The workflow state into which issues are moved when a PR has been opened. */
        get startWorkflowState() {
            var _a, _b;
            return ((_a = this._startWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._startWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The workflow state into which issues are set when they are opened by non-team members or integrations if triage is enabled. */
        get triageIssueState() {
            var _a, _b;
            return ((_a = this._triageIssueState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._triageIssueState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** Team's triage responsibility. */
        get triageResponsibility() {
            var _a, _b;
            return ((_a = this._triageResponsibility) === null || _a === void 0 ? void 0 : _a.id)
                ? new TriageResponsibilityQuery(this._request).fetch((_b = this._triageResponsibility) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** Cycles associated with the team. */
        cycles(variables) {
            return new Team_CyclesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** The Git automation states for the team. */
        gitAutomationStates(variables) {
            return new Team_GitAutomationStatesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Issues associated with the team. */
        issues(variables) {
            return new Team_IssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Labels associated with the team. */
        labels(variables) {
            return new Team_LabelsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Users who are members of this team. */
        members(variables) {
            return new Team_MembersQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Memberships associated with the team. For easier access of the same data, use `members` query. */
        memberships(variables) {
            return new Team_MembershipsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Projects associated with the team. */
        projects(variables) {
            return new Team_ProjectsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** The states that define the workflow associated with the team. */
        states(variables) {
            return new Team_StatesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Templates associated with the team. */
        templates(variables) {
            return new Team_TemplatesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Webhooks associated with the team. */
        webhooks(variables) {
            return new Team_WebhooksQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Creates a new team. The user who creates the team will automatically be added as a member to the newly created team. */
        create(input, variables) {
            return new CreateTeamMutation(this._request).fetch(input, variables);
        }
        /** Deletes a team. */
        delete() {
            return new DeleteTeamMutation(this._request).fetch(this.id);
        }
        /** Unarchives a team and cancels deletion. */
        unarchive() {
            return new UnarchiveTeamMutation(this._request).fetch(this.id);
        }
        /** Updates a team. */
        update(input) {
            return new UpdateTeamMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamArchivePayloadFragment response data
     */
    class TeamArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * TeamConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this TeamConnection model
     * @param data - TeamConnection response data
     */
    class TeamConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Team(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * Defines the membership of a user to a team.
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamMembershipFragment response data
     */
    class TeamMembership extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.owner = data.owner;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._team = data.team;
            this._user = data.user;
        }
        /** The team that the membership is associated with. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** The user that the membership is associated with. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** Creates a new team membership. */
        create(input) {
            return new CreateTeamMembershipMutation(this._request).fetch(input);
        }
        /** Deletes a team membership. */
        delete() {
            return new DeleteTeamMembershipMutation(this._request).fetch(this.id);
        }
        /** Updates a team membership. */
        update(input) {
            return new UpdateTeamMembershipMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * TeamMembershipConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this TeamMembershipConnection model
     * @param data - TeamMembershipConnection response data
     */
    class TeamMembershipConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new TeamMembership(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * TeamMembershipPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamMembershipPayloadFragment response data
     */
    class TeamMembershipPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._teamMembership = (_a = data.teamMembership) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The team membership that was created or updated. */
        get teamMembership() {
            var _a, _b;
            return ((_a = this._teamMembership) === null || _a === void 0 ? void 0 : _a.id)
                ? new TeamMembershipQuery(this._request).fetch((_b = this._teamMembership) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
    }
    /**
     * A team notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamNotificationSubscriptionFragment response data
     */
    class TeamNotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.notificationSubscriptionTypes = data.notificationSubscriptionTypes;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = (_f = data.customView) !== null && _f !== void 0 ? _f : undefined;
            this._cycle = (_g = data.cycle) !== null && _g !== void 0 ? _g : undefined;
            this._initiative = (_h = data.initiative) !== null && _h !== void 0 ? _h : undefined;
            this._label = (_j = data.label) !== null && _j !== void 0 ? _j : undefined;
            this._project = (_k = data.project) !== null && _k !== void 0 ? _k : undefined;
            this._subscriber = data.subscriber;
            this._team = data.team;
            this._user = (_l = data.user) !== null && _l !== void 0 ? _l : undefined;
        }
        /** The contextual custom view associated with the notification subscription. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual cycle view associated with the notification subscription. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual initiative view associated with the notification subscription. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual label view associated with the notification subscription. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual project view associated with the notification subscription. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The team subscribed to. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** The user view associated with the notification subscription. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * TeamPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamPayloadFragment response data
     */
    class TeamPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._team = (_a = data.team) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The team that was created or updated. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * A template object used for creating entities faster.
     *
     * @param request - function to call the graphql client
     * @param data - L.TemplateFragment response data
     */
    class Template extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.name = data.name;
            this.sortOrder = data.sortOrder;
            this.templateData = (_d = parseJson(data.templateData)) !== null && _d !== void 0 ? _d : {};
            this.type = data.type;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this._creator = (_f = data.creator) !== null && _f !== void 0 ? _f : undefined;
            this._lastUpdatedBy = (_g = data.lastUpdatedBy) !== null && _g !== void 0 ? _g : undefined;
            this._team = (_h = data.team) !== null && _h !== void 0 ? _h : undefined;
        }
        /** The user who created the template. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user who last updated the template. */
        get lastUpdatedBy() {
            var _a, _b;
            return ((_a = this._lastUpdatedBy) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._lastUpdatedBy) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The organization that the template is associated with. If null, the template is associated with a particular team. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The team that the template is associated with. If null, the template is global to the workspace. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Creates a new template. */
        create(input) {
            return new CreateTemplateMutation(this._request).fetch(input);
        }
        /** Deletes a template. */
        delete() {
            return new DeleteTemplateMutation(this._request).fetch(this.id);
        }
        /** Updates an existing template. */
        update(input) {
            return new UpdateTemplateMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * TemplateConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this TemplateConnection model
     * @param data - TemplateConnection response data
     */
    class TemplateConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Template(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * TemplatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.TemplatePayloadFragment response data
     */
    class TemplatePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._template = data.template;
        }
        /** The template that was created or updated. */
        get template() {
            return new TemplateQuery(this._request).fetch(this._template.id);
        }
    }
    /**
     * A time schedule.
     *
     * @param request - function to call the graphql client
     * @param data - L.TimeScheduleFragment response data
     */
    class TimeSchedule extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.externalId = (_c = data.externalId) !== null && _c !== void 0 ? _c : undefined;
            this.externalUrl = (_d = data.externalUrl) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.name = data.name;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this.entries = data.entries ? data.entries.map(node => new TimeScheduleEntry(request, node)) : undefined;
            this._integration = (_f = data.integration) !== null && _f !== void 0 ? _f : undefined;
        }
        /** The identifier of the Linear integration populating the schedule. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The organization of the schedule. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** Creates a new time schedule. */
        create(input) {
            return new CreateTimeScheduleMutation(this._request).fetch(input);
        }
        /** Deletes a time schedule. */
        delete() {
            return new DeleteTimeScheduleMutation(this._request).fetch(this.id);
        }
        /** Updates a time schedule. */
        update(input) {
            return new UpdateTimeScheduleMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * TimeScheduleConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this TimeScheduleConnection model
     * @param data - TimeScheduleConnection response data
     */
    class TimeScheduleConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new TimeSchedule(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * TimeScheduleEntry model
     *
     * @param request - function to call the graphql client
     * @param data - L.TimeScheduleEntryFragment response data
     */
    class TimeScheduleEntry extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.endsAt = (_a = parseDate(data.endsAt)) !== null && _a !== void 0 ? _a : new Date();
            this.startsAt = (_b = parseDate(data.startsAt)) !== null && _b !== void 0 ? _b : new Date();
            this.userEmail = (_c = data.userEmail) !== null && _c !== void 0 ? _c : undefined;
            this.userId = (_d = data.userId) !== null && _d !== void 0 ? _d : undefined;
        }
    }
    /**
     * TimeSchedulePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.TimeSchedulePayloadFragment response data
     */
    class TimeSchedulePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._timeSchedule = data.timeSchedule;
        }
        get timeSchedule() {
            return new TimeScheduleQuery(this._request).fetch(this._timeSchedule.id);
        }
    }
    /**
     * A team's triage responsibility.
     *
     * @param request - function to call the graphql client
     * @param data - L.TriageResponsibilityFragment response data
     */
    class TriageResponsibility extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.manualSelection = data.manualSelection
                ? new TriageResponsibilityManualSelection(request, data.manualSelection)
                : undefined;
            this.action = data.action;
            this._currentUser = (_d = data.currentUser) !== null && _d !== void 0 ? _d : undefined;
            this._team = data.team;
            this._timeSchedule = (_e = data.timeSchedule) !== null && _e !== void 0 ? _e : undefined;
        }
        /** The user currently responsible for triage. */
        get currentUser() {
            var _a, _b;
            return ((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._currentUser) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team to which the triage responsibility belongs to. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** The time schedule used for scheduling. */
        get timeSchedule() {
            var _a, _b;
            return ((_a = this._timeSchedule) === null || _a === void 0 ? void 0 : _a.id) ? new TimeScheduleQuery(this._request).fetch((_b = this._timeSchedule) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Creates a new triage responsibility. */
        create(input) {
            return new CreateTriageResponsibilityMutation(this._request).fetch(input);
        }
        /** Deletes a triage responsibility. */
        delete() {
            return new DeleteTriageResponsibilityMutation(this._request).fetch(this.id);
        }
        /** Updates an existing triage responsibility. */
        update(input) {
            return new UpdateTriageResponsibilityMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * TriageResponsibilityConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this TriageResponsibilityConnection model
     * @param data - TriageResponsibilityConnection response data
     */
    class TriageResponsibilityConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new TriageResponsibility(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * TriageResponsibilityManualSelection model
     *
     * @param request - function to call the graphql client
     * @param data - L.TriageResponsibilityManualSelectionFragment response data
     */
    class TriageResponsibilityManualSelection extends Request {
        constructor(request, data) {
            super(request);
            this.userIds = data.userIds;
        }
    }
    /**
     * TriageResponsibilityPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.TriageResponsibilityPayloadFragment response data
     */
    class TriageResponsibilityPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._triageResponsibility = data.triageResponsibility;
        }
        get triageResponsibility() {
            return new TriageResponsibilityQuery(this._request).fetch(this._triageResponsibility.id);
        }
    }
    /**
     * Object representing Google Cloud upload policy, plus additional data.
     *
     * @param request - function to call the graphql client
     * @param data - L.UploadFileFragment response data
     */
    class UploadFile extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.assetUrl = data.assetUrl;
            this.contentType = data.contentType;
            this.filename = data.filename;
            this.metaData = (_a = data.metaData) !== null && _a !== void 0 ? _a : undefined;
            this.size = data.size;
            this.uploadUrl = data.uploadUrl;
            this.headers = data.headers.map(node => new UploadFileHeader(request, node));
        }
    }
    /**
     * UploadFileHeader model
     *
     * @param request - function to call the graphql client
     * @param data - L.UploadFileHeaderFragment response data
     */
    class UploadFileHeader extends Request {
        constructor(request, data) {
            super(request);
            this.key = data.key;
            this.value = data.value;
        }
    }
    /**
     * UploadPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UploadPayloadFragment response data
     */
    class UploadPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.uploadFile = data.uploadFile ? new UploadFile(request, data.uploadFile) : undefined;
        }
    }
    /**
     * A user that has access to the the resources of an organization.
     *
     * @param request - function to call the graphql client
     * @param data - L.UserFragment response data
     */
    class User extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.active = data.active;
            this.admin = data.admin;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.avatarBackgroundColor = data.avatarBackgroundColor;
            this.avatarUrl = (_b = data.avatarUrl) !== null && _b !== void 0 ? _b : undefined;
            this.calendarHash = (_c = data.calendarHash) !== null && _c !== void 0 ? _c : undefined;
            this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
            this.createdIssueCount = data.createdIssueCount;
            this.description = (_e = data.description) !== null && _e !== void 0 ? _e : undefined;
            this.disableReason = (_f = data.disableReason) !== null && _f !== void 0 ? _f : undefined;
            this.displayName = data.displayName;
            this.email = data.email;
            this.guest = data.guest;
            this.id = data.id;
            this.initials = data.initials;
            this.inviteHash = data.inviteHash;
            this.isMe = data.isMe;
            this.lastSeen = (_g = parseDate(data.lastSeen)) !== null && _g !== void 0 ? _g : undefined;
            this.name = data.name;
            this.statusEmoji = (_h = data.statusEmoji) !== null && _h !== void 0 ? _h : undefined;
            this.statusLabel = (_j = data.statusLabel) !== null && _j !== void 0 ? _j : undefined;
            this.statusUntilAt = (_k = parseDate(data.statusUntilAt)) !== null && _k !== void 0 ? _k : undefined;
            this.timezone = (_l = data.timezone) !== null && _l !== void 0 ? _l : undefined;
            this.updatedAt = (_m = parseDate(data.updatedAt)) !== null && _m !== void 0 ? _m : new Date();
            this.url = data.url;
        }
        /** Organization the user belongs to. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** Issues assigned to the user. */
        assignedIssues(variables) {
            return new User_AssignedIssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Issues created by the user. */
        createdIssues(variables) {
            return new User_CreatedIssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Memberships associated with the user. For easier access of the same data, use `teams` query. */
        teamMemberships(variables) {
            return new User_TeamMembershipsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Teams the user is part of. */
        teams(variables) {
            return new User_TeamsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Suspends a user. Can only be called by an admin. */
        suspend() {
            return new SuspendUserMutation(this._request).fetch(this.id);
        }
        /** Un-suspends a user. Can only be called by an admin. */
        unsuspend() {
            return new UnsuspendUserMutation(this._request).fetch(this.id);
        }
        /** Updates a user. Only available to organization admins and the user themselves. */
        update(input) {
            return new UpdateUserMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A user account.
     *
     * @param request - function to call the graphql client
     * @param data - L.UserAccountFragment response data
     */
    class UserAccount extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.authTokenLinkDisabled = data.authTokenLinkDisabled;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.email = data.email;
            this.id = data.id;
            this.name = (_c = data.name) !== null && _c !== void 0 ? _c : undefined;
            this.service = data.service;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
        }
    }
    /**
     * UserAdminPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserAdminPayloadFragment response data
     */
    class UserAdminPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * Public information of the OAuth application, plus whether the application has been authorized for the given scopes.
     *
     * @param request - function to call the graphql client
     * @param data - L.UserAuthorizedApplicationFragment response data
     */
    class UserAuthorizedApplication extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.approvalErrorCode = (_a = data.approvalErrorCode) !== null && _a !== void 0 ? _a : undefined;
            this.clientId = data.clientId;
            this.createdByLinear = data.createdByLinear;
            this.description = (_b = data.description) !== null && _b !== void 0 ? _b : undefined;
            this.developer = data.developer;
            this.developerUrl = data.developerUrl;
            this.id = data.id;
            this.imageUrl = (_c = data.imageUrl) !== null && _c !== void 0 ? _c : undefined;
            this.isAuthorized = data.isAuthorized;
            this.name = data.name;
            this.webhooksEnabled = data.webhooksEnabled;
        }
    }
    /**
     * UserConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this UserConnection model
     * @param data - UserConnection response data
     */
    class UserConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new User(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A user notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.UserNotificationSubscriptionFragment response data
     */
    class UserNotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.notificationSubscriptionTypes = data.notificationSubscriptionTypes;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = (_f = data.customView) !== null && _f !== void 0 ? _f : undefined;
            this._cycle = (_g = data.cycle) !== null && _g !== void 0 ? _g : undefined;
            this._initiative = (_h = data.initiative) !== null && _h !== void 0 ? _h : undefined;
            this._label = (_j = data.label) !== null && _j !== void 0 ? _j : undefined;
            this._project = (_k = data.project) !== null && _k !== void 0 ? _k : undefined;
            this._subscriber = data.subscriber;
            this._team = (_l = data.team) !== null && _l !== void 0 ? _l : undefined;
            this._user = data.user;
        }
        /** The contextual custom view associated with the notification subscription. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual cycle view associated with the notification subscription. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual initiative view associated with the notification subscription. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual label view associated with the notification subscription. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual project view associated with the notification subscription. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The team associated with the notification subscription. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user subscribed to. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
    }
    /**
     * UserPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserPayloadFragment response data
     */
    class UserPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._user = (_a = data.user) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The user that was created or updated. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * The settings of a user as a JSON object.
     *
     * @param request - function to call the graphql client
     * @param data - L.UserSettingsFragment response data
     */
    class UserSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.calendarHash = (_b = data.calendarHash) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.id = data.id;
            this.notificationPreferences = data.notificationPreferences;
            this.showFullUserNames = data.showFullUserNames;
            this.subscribedToChangelog = data.subscribedToChangelog;
            this.subscribedToDPA = data.subscribedToDPA;
            this.subscribedToInviteAccepted = data.subscribedToInviteAccepted;
            this.subscribedToPrivacyLegalUpdates = data.subscribedToPrivacyLegalUpdates;
            this.subscribedToUnreadNotificationsReminder = data.subscribedToUnreadNotificationsReminder;
            this.unsubscribedFrom = data.unsubscribedFrom;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this.notificationDeliveryPreferences = new NotificationDeliveryPreferences(request, data.notificationDeliveryPreferences);
            this._user = data.user;
        }
        /** The user associated with these settings. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** Updates the user's settings. */
        update(input) {
            return new UpdateUserSettingsMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * UserSettingsFlagPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserSettingsFlagPayloadFragment response data
     */
    class UserSettingsFlagPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.flag = (_a = data.flag) !== null && _a !== void 0 ? _a : undefined;
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.value = (_b = data.value) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * UserSettingsFlagsResetPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserSettingsFlagsResetPayloadFragment response data
     */
    class UserSettingsFlagsResetPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * UserSettingsPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserSettingsPayloadFragment response data
     */
    class UserSettingsPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
        /** The user's settings. */
        get userSettings() {
            return new UserSettingsQuery(this._request).fetch();
        }
    }
    /**
     * View preferences.
     *
     * @param request - function to call the graphql client
     * @param data - L.ViewPreferencesFragment response data
     */
    class ViewPreferences extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.type = data.type;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.viewType = data.viewType;
            this.preferences = new ViewPreferencesValues(request, data.preferences);
        }
        /** Creates a new ViewPreferences object. */
        create(input) {
            return new CreateViewPreferencesMutation(this._request).fetch(input);
        }
        /** Deletes a ViewPreferences. */
        delete() {
            return new DeleteViewPreferencesMutation(this._request).fetch(this.id);
        }
        /** Updates an existing ViewPreferences object. */
        update(input) {
            return new UpdateViewPreferencesMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * ViewPreferencesPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ViewPreferencesPayloadFragment response data
     */
    class ViewPreferencesPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.viewPreferences = new ViewPreferences(request, data.viewPreferences);
        }
    }
    /**
     * ViewPreferencesValues model
     *
     * @param request - function to call the graphql client
     * @param data - L.ViewPreferencesValuesFragment response data
     */
    class ViewPreferencesValues extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.issueGrouping = (_a = data.issueGrouping) !== null && _a !== void 0 ? _a : undefined;
            this.showCompletedIssues = (_b = data.showCompletedIssues) !== null && _b !== void 0 ? _b : undefined;
            this.viewOrdering = (_c = data.viewOrdering) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    /**
     * A webhook used to send HTTP notifications over data updates.
     *
     * @param request - function to call the graphql client
     * @param data - L.WebhookFragment response data
     */
    class Webhook extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            super(request);
            this.allPublicTeams = data.allPublicTeams;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.enabled = data.enabled;
            this.id = data.id;
            this.label = (_c = data.label) !== null && _c !== void 0 ? _c : undefined;
            this.resourceTypes = data.resourceTypes;
            this.secret = (_d = data.secret) !== null && _d !== void 0 ? _d : undefined;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this.url = (_f = data.url) !== null && _f !== void 0 ? _f : undefined;
            this._creator = (_g = data.creator) !== null && _g !== void 0 ? _g : undefined;
            this._team = (_h = data.team) !== null && _h !== void 0 ? _h : undefined;
        }
        /** The user who created the webhook. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team that the webhook is associated with. If null, the webhook is associated with all public teams of the organization. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** Creates a new webhook. */
        create(input) {
            return new CreateWebhookMutation(this._request).fetch(input);
        }
        /** Deletes a Webhook. */
        delete() {
            return new DeleteWebhookMutation(this._request).fetch(this.id);
        }
        /** Updates an existing Webhook. */
        update(input) {
            return new UpdateWebhookMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * WebhookConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this WebhookConnection model
     * @param data - WebhookConnection response data
     */
    class WebhookConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Webhook(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * Entity representing a webhook execution failure.
     *
     * @param request - function to call the graphql client
     * @param data - L.WebhookFailureEventFragment response data
     */
    class WebhookFailureEvent extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
            this.executionId = data.executionId;
            this.httpStatus = (_b = data.httpStatus) !== null && _b !== void 0 ? _b : undefined;
            this.id = data.id;
            this.responseOrError = (_c = data.responseOrError) !== null && _c !== void 0 ? _c : undefined;
            this.url = data.url;
            this._webhook = data.webhook;
        }
        /** The webhook that this failure event is associated with. */
        get webhook() {
            return new WebhookQuery(this._request).fetch(this._webhook.id);
        }
    }
    /**
     * WebhookPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.WebhookPayloadFragment response data
     */
    class WebhookPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._webhook = data.webhook;
        }
        /** The webhook entity being mutated. */
        get webhook() {
            return new WebhookQuery(this._request).fetch(this._webhook.id);
        }
    }
    /**
     * WorkflowCronJobDefinition model
     *
     * @param request - function to call the graphql client
     * @param data - L.WorkflowCronJobDefinitionFragment response data
     */
    class WorkflowCronJobDefinition extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.activities = data.activities;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.enabled = data.enabled;
            this.id = data.id;
            this.name = data.name;
            this.schedule = data.schedule;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this._creator = data.creator;
            this._team = data.team;
        }
        /** The user who created the workflow cron job. */
        get creator() {
            return new UserQuery(this._request).fetch(this._creator.id);
        }
        /** The team associated with the workflow cron job. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
    }
    /**
     * WorkflowCronJobDefinitionConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this WorkflowCronJobDefinitionConnection model
     * @param data - WorkflowCronJobDefinitionConnection response data
     */
    class WorkflowCronJobDefinitionConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new WorkflowCronJobDefinition(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * WorkflowDefinition model
     *
     * @param request - function to call the graphql client
     * @param data - L.WorkflowDefinitionFragment response data
     */
    class WorkflowDefinition extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
            super(request);
            this.activities = data.activities;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.conditions = (_b = data.conditions) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.description = (_d = data.description) !== null && _d !== void 0 ? _d : undefined;
            this.enabled = data.enabled;
            this.groupName = (_e = data.groupName) !== null && _e !== void 0 ? _e : undefined;
            this.id = data.id;
            this.name = data.name;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
            this.contextViewType = (_g = data.contextViewType) !== null && _g !== void 0 ? _g : undefined;
            this.trigger = data.trigger;
            this.triggerType = data.triggerType;
            this.type = data.type;
            this.userContextViewType = (_h = data.userContextViewType) !== null && _h !== void 0 ? _h : undefined;
            this._creator = data.creator;
            this._customView = (_j = data.customView) !== null && _j !== void 0 ? _j : undefined;
            this._cycle = (_k = data.cycle) !== null && _k !== void 0 ? _k : undefined;
            this._initiative = (_l = data.initiative) !== null && _l !== void 0 ? _l : undefined;
            this._label = (_m = data.label) !== null && _m !== void 0 ? _m : undefined;
            this._project = (_o = data.project) !== null && _o !== void 0 ? _o : undefined;
            this._team = (_p = data.team) !== null && _p !== void 0 ? _p : undefined;
            this._user = (_q = data.user) !== null && _q !== void 0 ? _q : undefined;
        }
        /** The user who created the workflow. */
        get creator() {
            return new UserQuery(this._request).fetch(this._creator.id);
        }
        /** The context custom view associated with the workflow. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual cycle view associated with the workflow. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual initiative view associated with the workflow. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual label view associated with the workflow. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual project view associated with the workflow. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team associated with the workflow. If not set, the workflow is associated with the entire organization. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The contextual user view associated with the workflow. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * WorkflowDefinitionConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this WorkflowDefinitionConnection model
     * @param data - WorkflowDefinitionConnection response data
     */
    class WorkflowDefinitionConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new WorkflowDefinition(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A state in a team workflow.
     *
     * @param request - function to call the graphql client
     * @param data - L.WorkflowStateFragment response data
     */
    class WorkflowState extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = data.color;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.name = data.name;
            this.position = data.position;
            this.type = data.type;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this._team = data.team;
        }
        /** The team to which this state belongs to. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** Issues belonging in this state. */
        issues(variables) {
            return new WorkflowState_IssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Archives a state. Only states with issues that have all been archived can be archived. */
        archive() {
            return new ArchiveWorkflowStateMutation(this._request).fetch(this.id);
        }
        /** Creates a new state, adding it to the workflow of a team. */
        create(input) {
            return new CreateWorkflowStateMutation(this._request).fetch(input);
        }
        /** Updates a state. */
        update(input) {
            return new UpdateWorkflowStateMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.WorkflowStateArchivePayloadFragment response data
     */
    class WorkflowStateArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * WorkflowStateConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this WorkflowStateConnection model
     * @param data - WorkflowStateConnection response data
     */
    class WorkflowStateConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new WorkflowState(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * WorkflowStatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.WorkflowStatePayloadFragment response data
     */
    class WorkflowStatePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._workflowState = data.workflowState;
        }
        /** The state that was created or updated. */
        get workflowState() {
            return new WorkflowStateQuery(this._request).fetch(this._workflowState.id);
        }
    }
    /**
     * Zendesk specific settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.ZendeskSettingsFragment response data
     */
    class ZendeskSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.automateTicketReopeningOnCancellation = (_a = data.automateTicketReopeningOnCancellation) !== null && _a !== void 0 ? _a : undefined;
            this.automateTicketReopeningOnComment = (_b = data.automateTicketReopeningOnComment) !== null && _b !== void 0 ? _b : undefined;
            this.automateTicketReopeningOnCompletion = (_c = data.automateTicketReopeningOnCompletion) !== null && _c !== void 0 ? _c : undefined;
            this.botUserId = (_d = data.botUserId) !== null && _d !== void 0 ? _d : undefined;
            this.sendNoteOnComment = (_e = data.sendNoteOnComment) !== null && _e !== void 0 ? _e : undefined;
            this.sendNoteOnStatusChange = (_f = data.sendNoteOnStatusChange) !== null && _f !== void 0 ? _f : undefined;
            this.subdomain = data.subdomain;
            this.url = data.url;
        }
    }
    /**
     * A fetchable AdministrableTeams Query
     *
     * @param request - function to call the graphql client
     */
    class AdministrableTeamsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AdministrableTeams query and return a TeamConnection
         *
         * @param variables - variables to pass into the AdministrableTeamsQuery
         * @returns parsed response from AdministrableTeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AdministrableTeamsDocument, variables);
                const data = response.administrableTeams;
                return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ApiKeys Query
     *
     * @param request - function to call the graphql client
     */
    class ApiKeysQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ApiKeys query and return a ApiKeyConnection
         *
         * @param variables - variables to pass into the ApiKeysQuery
         * @returns parsed response from ApiKeysQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ApiKeysDocument, variables);
                const data = response.apiKeys;
                return new ApiKeyConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ApplicationInfo Query
     *
     * @param request - function to call the graphql client
     */
    class ApplicationInfoQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ApplicationInfo query and return a Application
         *
         * @param clientId - required clientId to pass to applicationInfo
         * @returns parsed response from ApplicationInfoQuery
         */
        fetch(clientId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ApplicationInfoDocument, {
                    clientId,
                });
                const data = response.applicationInfo;
                return new Application(this._request, data);
            });
        }
    }
    /**
     * A fetchable ApplicationWithAuthorization Query
     *
     * @param request - function to call the graphql client
     */
    class ApplicationWithAuthorizationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ApplicationWithAuthorization query and return a UserAuthorizedApplication
         *
         * @param clientId - required clientId to pass to applicationWithAuthorization
         * @param scope - required scope to pass to applicationWithAuthorization
         * @param variables - variables without 'clientId', 'scope' to pass into the ApplicationWithAuthorizationQuery
         * @returns parsed response from ApplicationWithAuthorizationQuery
         */
        fetch(clientId, scope, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ApplicationWithAuthorizationDocument, Object.assign({ clientId,
                    scope }, variables));
                const data = response.applicationWithAuthorization;
                return new UserAuthorizedApplication(this._request, data);
            });
        }
    }
    /**
     * A fetchable Attachment Query
     *
     * @param request - function to call the graphql client
     */
    class AttachmentQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Attachment query and return a Attachment
         *
         * @param id - required id to pass to attachment
         * @returns parsed response from AttachmentQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentDocument, {
                    id,
                });
                const data = response.attachment;
                return new Attachment(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue Query
     *
     * @param request - function to call the graphql client
     */
    class AttachmentIssueQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentIssue query and return a Issue
         *
         * @param id - required id to pass to attachmentIssue
         * @returns parsed response from AttachmentIssueQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssueDocument, {
                    id,
                });
                const data = response.attachmentIssue;
                return new Issue(this._request, data);
            });
        }
    }
    /**
     * A fetchable Attachments Query
     *
     * @param request - function to call the graphql client
     */
    class AttachmentsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Attachments query and return a AttachmentConnection
         *
         * @param variables - variables to pass into the AttachmentsQuery
         * @returns parsed response from AttachmentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentsDocument, variables);
                const data = response.attachments;
                return new AttachmentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentsForUrl Query
     *
     * @param request - function to call the graphql client
     */
    class AttachmentsForUrlQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentsForUrl query and return a AttachmentConnection
         *
         * @param url - required url to pass to attachmentsForURL
         * @param variables - variables without 'url' to pass into the AttachmentsForUrlQuery
         * @returns parsed response from AttachmentsForUrlQuery
         */
        fetch(url, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentsForUrlDocument, Object.assign({ url }, variables));
                const data = response.attachmentsForURL;
                return new AttachmentConnection(this._request, connection => this.fetch(url, defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AuditEntries Query
     *
     * @param request - function to call the graphql client
     */
    class AuditEntriesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AuditEntries query and return a AuditEntryConnection
         *
         * @param variables - variables to pass into the AuditEntriesQuery
         * @returns parsed response from AuditEntriesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AuditEntriesDocument, variables);
                const data = response.auditEntries;
                return new AuditEntryConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AuditEntryTypes Query
     *
     * @param request - function to call the graphql client
     */
    class AuditEntryTypesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AuditEntryTypes query and return a AuditEntryType list
         *
         * @returns parsed response from AuditEntryTypesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AuditEntryTypesDocument, {});
                const data = response.auditEntryTypes;
                return data.map(node => {
                    return new AuditEntryType(this._request, node);
                });
            });
        }
    }
    /**
     * A fetchable AuthenticationSessions Query
     *
     * @param request - function to call the graphql client
     */
    class AuthenticationSessionsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AuthenticationSessions query and return a AuthenticationSessionResponse list
         *
         * @returns parsed response from AuthenticationSessionsQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AuthenticationSessionsDocument, {});
                const data = response.authenticationSessions;
                return data.map(node => {
                    return new AuthenticationSessionResponse(this._request, node);
                });
            });
        }
    }
    /**
     * A fetchable AvailableUsers Query
     *
     * @param request - function to call the graphql client
     */
    class AvailableUsersQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AvailableUsers query and return a AuthResolverResponse
         *
         * @returns parsed response from AvailableUsersQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AvailableUsersDocument, {});
                const data = response.availableUsers;
                return new AuthResolverResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable Comment Query
     *
     * @param request - function to call the graphql client
     */
    class CommentQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Comment query and return a Comment
         *
         * @param variables - variables to pass into the CommentQuery
         * @returns parsed response from CommentQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CommentDocument, variables);
                const data = response.comment;
                return new Comment(this._request, data);
            });
        }
    }
    /**
     * A fetchable Comments Query
     *
     * @param request - function to call the graphql client
     */
    class CommentsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Comments query and return a CommentConnection
         *
         * @param variables - variables to pass into the CommentsQuery
         * @returns parsed response from CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CommentsDocument, variables);
                const data = response.comments;
                return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable CustomView Query
     *
     * @param request - function to call the graphql client
     */
    class CustomViewQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomView query and return a CustomView
         *
         * @param id - required id to pass to customView
         * @returns parsed response from CustomViewQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomViewDocument, {
                    id,
                });
                const data = response.customView;
                return new CustomView(this._request, data);
            });
        }
    }
    /**
     * A fetchable CustomViewHasSubscribers Query
     *
     * @param request - function to call the graphql client
     */
    class CustomViewHasSubscribersQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomViewHasSubscribers query and return a CustomViewHasSubscribersPayload
         *
         * @param id - required id to pass to customViewHasSubscribers
         * @returns parsed response from CustomViewHasSubscribersQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomViewHasSubscribersDocument, {
                    id,
                });
                const data = response.customViewHasSubscribers;
                return new CustomViewHasSubscribersPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CustomViews Query
     *
     * @param request - function to call the graphql client
     */
    class CustomViewsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomViews query and return a CustomViewConnection
         *
         * @param variables - variables to pass into the CustomViewsQuery
         * @returns parsed response from CustomViewsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomViewsDocument, variables);
                const data = response.customViews;
                return new CustomViewConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Cycle Query
     *
     * @param request - function to call the graphql client
     */
    class CycleQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Cycle query and return a Cycle
         *
         * @param id - required id to pass to cycle
         * @returns parsed response from CycleQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CycleDocument, {
                    id,
                });
                const data = response.cycle;
                return new Cycle(this._request, data);
            });
        }
    }
    /**
     * A fetchable Cycles Query
     *
     * @param request - function to call the graphql client
     */
    class CyclesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Cycles query and return a CycleConnection
         *
         * @param variables - variables to pass into the CyclesQuery
         * @returns parsed response from CyclesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CyclesDocument, variables);
                const data = response.cycles;
                return new CycleConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Document Query
     *
     * @param request - function to call the graphql client
     */
    class DocumentQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Document query and return a Document
         *
         * @param id - required id to pass to document
         * @returns parsed response from DocumentQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DocumentDocument, {
                    id,
                });
                const data = response.document;
                return new Document(this._request, data);
            });
        }
    }
    /**
     * A fetchable DocumentContentHistory Query
     *
     * @param request - function to call the graphql client
     */
    class DocumentContentHistoryQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DocumentContentHistory query and return a DocumentContentHistoryPayload
         *
         * @param id - required id to pass to documentContentHistory
         * @returns parsed response from DocumentContentHistoryQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DocumentContentHistoryDocument, {
                    id,
                });
                const data = response.documentContentHistory;
                return new DocumentContentHistoryPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable Documents Query
     *
     * @param request - function to call the graphql client
     */
    class DocumentsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Documents query and return a DocumentConnection
         *
         * @param variables - variables to pass into the DocumentsQuery
         * @returns parsed response from DocumentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DocumentsDocument, variables);
                const data = response.documents;
                return new DocumentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Emoji Query
     *
     * @param request - function to call the graphql client
     */
    class EmojiQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Emoji query and return a Emoji
         *
         * @param id - required id to pass to emoji
         * @returns parsed response from EmojiQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EmojiDocument, {
                    id,
                });
                const data = response.emoji;
                return new Emoji(this._request, data);
            });
        }
    }
    /**
     * A fetchable Emojis Query
     *
     * @param request - function to call the graphql client
     */
    class EmojisQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Emojis query and return a EmojiConnection
         *
         * @param variables - variables to pass into the EmojisQuery
         * @returns parsed response from EmojisQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EmojisDocument, variables);
                const data = response.emojis;
                return new EmojiConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable EntityExternalLink Query
     *
     * @param request - function to call the graphql client
     */
    class EntityExternalLinkQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EntityExternalLink query and return a EntityExternalLink
         *
         * @param id - required id to pass to entityExternalLink
         * @returns parsed response from EntityExternalLinkQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EntityExternalLinkDocument, {
                    id,
                });
                const data = response.entityExternalLink;
                return new EntityExternalLink(this._request, data);
            });
        }
    }
    /**
     * A fetchable ExternalUser Query
     *
     * @param request - function to call the graphql client
     */
    class ExternalUserQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ExternalUser query and return a ExternalUser
         *
         * @param id - required id to pass to externalUser
         * @returns parsed response from ExternalUserQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ExternalUserDocument, {
                    id,
                });
                const data = response.externalUser;
                return new ExternalUser(this._request, data);
            });
        }
    }
    /**
     * A fetchable ExternalUsers Query
     *
     * @param request - function to call the graphql client
     */
    class ExternalUsersQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ExternalUsers query and return a ExternalUserConnection
         *
         * @param variables - variables to pass into the ExternalUsersQuery
         * @returns parsed response from ExternalUsersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ExternalUsersDocument, variables);
                const data = response.externalUsers;
                return new ExternalUserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Favorite Query
     *
     * @param request - function to call the graphql client
     */
    class FavoriteQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Favorite query and return a Favorite
         *
         * @param id - required id to pass to favorite
         * @returns parsed response from FavoriteQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(FavoriteDocument, {
                    id,
                });
                const data = response.favorite;
                return new Favorite(this._request, data);
            });
        }
    }
    /**
     * A fetchable Favorites Query
     *
     * @param request - function to call the graphql client
     */
    class FavoritesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Favorites query and return a FavoriteConnection
         *
         * @param variables - variables to pass into the FavoritesQuery
         * @returns parsed response from FavoritesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(FavoritesDocument, variables);
                const data = response.favorites;
                return new FavoriteConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Initiative Query
     *
     * @param request - function to call the graphql client
     */
    class InitiativeQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Initiative query and return a Initiative
         *
         * @param id - required id to pass to initiative
         * @returns parsed response from InitiativeQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(InitiativeDocument, {
                    id,
                });
                const data = response.initiative;
                return new Initiative(this._request, data);
            });
        }
    }
    /**
     * A fetchable InitiativeToProject Query
     *
     * @param request - function to call the graphql client
     */
    class InitiativeToProjectQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the InitiativeToProject query and return a InitiativeToProject
         *
         * @param id - required id to pass to initiativeToProject
         * @returns parsed response from InitiativeToProjectQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(InitiativeToProjectDocument, {
                    id,
                });
                const data = response.initiativeToProject;
                return new InitiativeToProject(this._request, data);
            });
        }
    }
    /**
     * A fetchable InitiativeToProjects Query
     *
     * @param request - function to call the graphql client
     */
    class InitiativeToProjectsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the InitiativeToProjects query and return a InitiativeToProjectConnection
         *
         * @param variables - variables to pass into the InitiativeToProjectsQuery
         * @returns parsed response from InitiativeToProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(InitiativeToProjectsDocument, variables);
                const data = response.initiativeToProjects;
                return new InitiativeToProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Initiatives Query
     *
     * @param request - function to call the graphql client
     */
    class InitiativesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Initiatives query and return a InitiativeConnection
         *
         * @param variables - variables to pass into the InitiativesQuery
         * @returns parsed response from InitiativesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(InitiativesDocument, variables);
                const data = response.initiatives;
                return new InitiativeConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Integration Query
     *
     * @param request - function to call the graphql client
     */
    class IntegrationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Integration query and return a Integration
         *
         * @param id - required id to pass to integration
         * @returns parsed response from IntegrationQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationDocument, {
                    id,
                });
                const data = response.integration;
                return new Integration(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationHasScopes Query
     *
     * @param request - function to call the graphql client
     */
    class IntegrationHasScopesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationHasScopes query and return a IntegrationHasScopesPayload
         *
         * @param integrationId - required integrationId to pass to integrationHasScopes
         * @param scopes - required scopes to pass to integrationHasScopes
         * @returns parsed response from IntegrationHasScopesQuery
         */
        fetch(integrationId, scopes) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationHasScopesDocument, {
                    integrationId,
                    scopes,
                });
                const data = response.integrationHasScopes;
                return new IntegrationHasScopesPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationTemplate Query
     *
     * @param request - function to call the graphql client
     */
    class IntegrationTemplateQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationTemplate query and return a IntegrationTemplate
         *
         * @param id - required id to pass to integrationTemplate
         * @returns parsed response from IntegrationTemplateQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationTemplateDocument, {
                    id,
                });
                const data = response.integrationTemplate;
                return new IntegrationTemplate(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationTemplates Query
     *
     * @param request - function to call the graphql client
     */
    class IntegrationTemplatesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationTemplates query and return a IntegrationTemplateConnection
         *
         * @param variables - variables to pass into the IntegrationTemplatesQuery
         * @returns parsed response from IntegrationTemplatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationTemplatesDocument, variables);
                const data = response.integrationTemplates;
                return new IntegrationTemplateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Integrations Query
     *
     * @param request - function to call the graphql client
     */
    class IntegrationsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Integrations query and return a IntegrationConnection
         *
         * @param variables - variables to pass into the IntegrationsQuery
         * @returns parsed response from IntegrationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationsDocument, variables);
                const data = response.integrations;
                return new IntegrationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IntegrationsSettings Query
     *
     * @param request - function to call the graphql client
     */
    class IntegrationsSettingsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationsSettings query and return a IntegrationsSettings
         *
         * @param id - required id to pass to integrationsSettings
         * @returns parsed response from IntegrationsSettingsQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationsSettingsDocument, {
                    id,
                });
                const data = response.integrationsSettings;
                return new IntegrationsSettings(this._request, data);
            });
        }
    }
    /**
     * A fetchable Issue Query
     *
     * @param request - function to call the graphql client
     */
    class IssueQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Issue query and return a Issue
         *
         * @param id - required id to pass to issue
         * @returns parsed response from IssueQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueDocument, {
                    id,
                });
                const data = response.issue;
                return new Issue(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueFigmaFileKeySearch Query
     *
     * @param request - function to call the graphql client
     */
    class IssueFigmaFileKeySearchQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueFigmaFileKeySearch query and return a IssueConnection
         *
         * @param fileKey - required fileKey to pass to issueFigmaFileKeySearch
         * @param variables - variables without 'fileKey' to pass into the IssueFigmaFileKeySearchQuery
         * @returns parsed response from IssueFigmaFileKeySearchQuery
         */
        fetch(fileKey, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueFigmaFileKeySearchDocument, Object.assign({ fileKey }, variables));
                const data = response.issueFigmaFileKeySearch;
                return new IssueConnection(this._request, connection => this.fetch(fileKey, defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IssueFilterSuggestion Query
     *
     * @param request - function to call the graphql client
     */
    class IssueFilterSuggestionQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueFilterSuggestion query and return a IssueFilterSuggestionPayload
         *
         * @param prompt - required prompt to pass to issueFilterSuggestion
         * @param variables - variables without 'prompt' to pass into the IssueFilterSuggestionQuery
         * @returns parsed response from IssueFilterSuggestionQuery
         */
        fetch(prompt, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueFilterSuggestionDocument, Object.assign({ prompt }, variables));
                const data = response.issueFilterSuggestion;
                return new IssueFilterSuggestionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportCheckCsv Query
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCheckCsvQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCheckCsv query and return a IssueImportCheckPayload
         *
         * @param csvUrl - required csvUrl to pass to issueImportCheckCSV
         * @param service - required service to pass to issueImportCheckCSV
         * @returns parsed response from IssueImportCheckCsvQuery
         */
        fetch(csvUrl, service) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportCheckCsvDocument, {
                    csvUrl,
                    service,
                });
                const data = response.issueImportCheckCSV;
                return new IssueImportCheckPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportCheckSync Query
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCheckSyncQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCheckSync query and return a IssueImportSyncCheckPayload
         *
         * @param issueImportId - required issueImportId to pass to issueImportCheckSync
         * @returns parsed response from IssueImportCheckSyncQuery
         */
        fetch(issueImportId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportCheckSyncDocument, {
                    issueImportId,
                });
                const data = response.issueImportCheckSync;
                return new IssueImportSyncCheckPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportJqlCheck Query
     *
     * @param request - function to call the graphql client
     */
    class IssueImportJqlCheckQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportJqlCheck query and return a IssueImportJqlCheckPayload
         *
         * @param jiraEmail - required jiraEmail to pass to issueImportJqlCheck
         * @param jiraHostname - required jiraHostname to pass to issueImportJqlCheck
         * @param jiraProject - required jiraProject to pass to issueImportJqlCheck
         * @param jiraToken - required jiraToken to pass to issueImportJqlCheck
         * @param jql - required jql to pass to issueImportJqlCheck
         * @returns parsed response from IssueImportJqlCheckQuery
         */
        fetch(jiraEmail, jiraHostname, jiraProject, jiraToken, jql) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportJqlCheckDocument, {
                    jiraEmail,
                    jiraHostname,
                    jiraProject,
                    jiraToken,
                    jql,
                });
                const data = response.issueImportJqlCheck;
                return new IssueImportJqlCheckPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueLabel Query
     *
     * @param request - function to call the graphql client
     */
    class IssueLabelQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueLabel query and return a IssueLabel
         *
         * @param id - required id to pass to issueLabel
         * @returns parsed response from IssueLabelQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueLabelDocument, {
                    id,
                });
                const data = response.issueLabel;
                return new IssueLabel(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueLabels Query
     *
     * @param request - function to call the graphql client
     */
    class IssueLabelsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueLabels query and return a IssueLabelConnection
         *
         * @param variables - variables to pass into the IssueLabelsQuery
         * @returns parsed response from IssueLabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueLabelsDocument, variables);
                const data = response.issueLabels;
                return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IssuePriorityValues Query
     *
     * @param request - function to call the graphql client
     */
    class IssuePriorityValuesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssuePriorityValues query and return a IssuePriorityValue list
         *
         * @returns parsed response from IssuePriorityValuesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssuePriorityValuesDocument, {});
                const data = response.issuePriorityValues;
                return data.map(node => {
                    return new IssuePriorityValue(this._request, node);
                });
            });
        }
    }
    /**
     * A fetchable IssueRelation Query
     *
     * @param request - function to call the graphql client
     */
    class IssueRelationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueRelation query and return a IssueRelation
         *
         * @param id - required id to pass to issueRelation
         * @returns parsed response from IssueRelationQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueRelationDocument, {
                    id,
                });
                const data = response.issueRelation;
                return new IssueRelation(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueRelations Query
     *
     * @param request - function to call the graphql client
     */
    class IssueRelationsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueRelations query and return a IssueRelationConnection
         *
         * @param variables - variables to pass into the IssueRelationsQuery
         * @returns parsed response from IssueRelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueRelationsDocument, variables);
                const data = response.issueRelations;
                return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IssueSearch Query
     *
     * @param request - function to call the graphql client
     */
    class IssueSearchQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueSearch query and return a IssueConnection
         *
         * @param variables - variables to pass into the IssueSearchQuery
         * @returns parsed response from IssueSearchQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueSearchDocument, variables);
                const data = response.issueSearch;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch Query
     *
     * @param request - function to call the graphql client
     */
    class IssueVcsBranchSearchQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueVcsBranchSearch query and return a Issue
         *
         * @param branchName - required branchName to pass to issueVcsBranchSearch
         * @returns parsed response from IssueVcsBranchSearchQuery
         */
        fetch(branchName) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearchDocument, {
                    branchName,
                });
                const data = response.issueVcsBranchSearch;
                return data ? new Issue(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Issues Query
     *
     * @param request - function to call the graphql client
     */
    class IssuesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Issues query and return a IssueConnection
         *
         * @param variables - variables to pass into the IssuesQuery
         * @returns parsed response from IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssuesDocument, variables);
                const data = response.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Notification Query
     *
     * @param request - function to call the graphql client
     */
    class NotificationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Notification query and return a Notification
         *
         * @param id - required id to pass to notification
         * @returns parsed response from NotificationQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationDocument, {
                    id,
                });
                const data = response.notification;
                switch (data.__typename) {
                    case "DocumentNotification":
                        return new DocumentNotification(this._request, data);
                    case "InitiativeNotification":
                        return new InitiativeNotification(this._request, data);
                    case "IssueNotification":
                        return new IssueNotification(this._request, data);
                    case "OauthClientApprovalNotification":
                        return new OauthClientApprovalNotification(this._request, data);
                    case "ProjectNotification":
                        return new ProjectNotification(this._request, data);
                    default:
                        return new Notification(this._request, data);
                }
            });
        }
    }
    /**
     * A fetchable NotificationSubscription Query
     *
     * @param request - function to call the graphql client
     */
    class NotificationSubscriptionQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationSubscription query and return a NotificationSubscription
         *
         * @param id - required id to pass to notificationSubscription
         * @returns parsed response from NotificationSubscriptionQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationSubscriptionDocument, {
                    id,
                });
                const data = response.notificationSubscription;
                switch (data.__typename) {
                    case "CustomViewNotificationSubscription":
                        return new CustomViewNotificationSubscription(this._request, data);
                    case "CycleNotificationSubscription":
                        return new CycleNotificationSubscription(this._request, data);
                    case "InitiativeNotificationSubscription":
                        return new InitiativeNotificationSubscription(this._request, data);
                    case "LabelNotificationSubscription":
                        return new LabelNotificationSubscription(this._request, data);
                    case "ProjectNotificationSubscription":
                        return new ProjectNotificationSubscription(this._request, data);
                    case "TeamNotificationSubscription":
                        return new TeamNotificationSubscription(this._request, data);
                    case "UserNotificationSubscription":
                        return new UserNotificationSubscription(this._request, data);
                    default:
                        return new NotificationSubscription(this._request, data);
                }
            });
        }
    }
    /**
     * A fetchable NotificationSubscriptions Query
     *
     * @param request - function to call the graphql client
     */
    class NotificationSubscriptionsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationSubscriptions query and return a NotificationSubscriptionConnection
         *
         * @param variables - variables to pass into the NotificationSubscriptionsQuery
         * @returns parsed response from NotificationSubscriptionsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationSubscriptionsDocument, variables);
                const data = response.notificationSubscriptions;
                return new NotificationSubscriptionConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Notifications Query
     *
     * @param request - function to call the graphql client
     */
    class NotificationsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Notifications query and return a NotificationConnection
         *
         * @param variables - variables to pass into the NotificationsQuery
         * @returns parsed response from NotificationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationsDocument, variables);
                const data = response.notifications;
                return new NotificationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Organization Query
     *
     * @param request - function to call the graphql client
     */
    class OrganizationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Organization query and return a Organization
         *
         * @returns parsed response from OrganizationQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(OrganizationDocument, {});
                const data = response.organization;
                return new Organization(this._request, data);
            });
        }
    }
    /**
     * A fetchable OrganizationExists Query
     *
     * @param request - function to call the graphql client
     */
    class OrganizationExistsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationExists query and return a OrganizationExistsPayload
         *
         * @param urlKey - required urlKey to pass to organizationExists
         * @returns parsed response from OrganizationExistsQuery
         */
        fetch(urlKey) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(OrganizationExistsDocument, {
                    urlKey,
                });
                const data = response.organizationExists;
                return new OrganizationExistsPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable OrganizationInvite Query
     *
     * @param request - function to call the graphql client
     */
    class OrganizationInviteQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationInvite query and return a OrganizationInvite
         *
         * @param id - required id to pass to organizationInvite
         * @returns parsed response from OrganizationInviteQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(OrganizationInviteDocument, {
                    id,
                });
                const data = response.organizationInvite;
                return new OrganizationInvite(this._request, data);
            });
        }
    }
    /**
     * A fetchable OrganizationInvites Query
     *
     * @param request - function to call the graphql client
     */
    class OrganizationInvitesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationInvites query and return a OrganizationInviteConnection
         *
         * @param variables - variables to pass into the OrganizationInvitesQuery
         * @returns parsed response from OrganizationInvitesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(OrganizationInvitesDocument, variables);
                const data = response.organizationInvites;
                return new OrganizationInviteConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Project query and return a Project
         *
         * @param id - required id to pass to project
         * @returns parsed response from ProjectQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectDocument, {
                    id,
                });
                const data = response.project;
                return new Project(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectFilterSuggestion Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectFilterSuggestionQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectFilterSuggestion query and return a ProjectFilterSuggestionPayload
         *
         * @param prompt - required prompt to pass to projectFilterSuggestion
         * @returns parsed response from ProjectFilterSuggestionQuery
         */
        fetch(prompt) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectFilterSuggestionDocument, {
                    prompt,
                });
                const data = response.projectFilterSuggestion;
                return new ProjectFilterSuggestionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectLink Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectLinkQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectLink query and return a ProjectLink
         *
         * @param id - required id to pass to projectLink
         * @returns parsed response from ProjectLinkQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectLinkDocument, {
                    id,
                });
                const data = response.projectLink;
                return new ProjectLink(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectLinks Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectLinksQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectLinks query and return a ProjectLinkConnection
         *
         * @param variables - variables to pass into the ProjectLinksQuery
         * @returns parsed response from ProjectLinksQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectLinksDocument, variables);
                const data = response.projectLinks;
                return new ProjectLinkConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ProjectMilestone Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectMilestoneQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectMilestone query and return a ProjectMilestone
         *
         * @param id - required id to pass to projectMilestone
         * @returns parsed response from ProjectMilestoneQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectMilestoneDocument, {
                    id,
                });
                const data = response.projectMilestone;
                return new ProjectMilestone(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectMilestones Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectMilestonesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectMilestones query and return a ProjectMilestoneConnection
         *
         * @param variables - variables to pass into the ProjectMilestonesQuery
         * @returns parsed response from ProjectMilestonesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectMilestonesDocument, variables);
                const data = response.projectMilestones;
                return new ProjectMilestoneConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ProjectRelation Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectRelationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectRelation query and return a ProjectRelation
         *
         * @param id - required id to pass to projectRelation
         * @returns parsed response from ProjectRelationQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectRelationDocument, {
                    id,
                });
                const data = response.projectRelation;
                return new ProjectRelation(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectRelations Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectRelationsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectRelations query and return a ProjectRelationConnection
         *
         * @param variables - variables to pass into the ProjectRelationsQuery
         * @returns parsed response from ProjectRelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectRelationsDocument, variables);
                const data = response.projectRelations;
                return new ProjectRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ProjectStatus Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectStatusQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectStatus query and return a ProjectStatus
         *
         * @param id - required id to pass to projectStatus
         * @returns parsed response from ProjectStatusQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectStatusDocument, {
                    id,
                });
                const data = response.projectStatus;
                return new ProjectStatus(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectStatuses Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectStatusesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectStatuses query and return a ProjectStatusConnection
         *
         * @param variables - variables to pass into the ProjectStatusesQuery
         * @returns parsed response from ProjectStatusesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectStatusesDocument, variables);
                const data = response.projectStatuses;
                return new ProjectStatusConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ProjectUpdate Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectUpdateQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectUpdate query and return a ProjectUpdate
         *
         * @param id - required id to pass to projectUpdate
         * @returns parsed response from ProjectUpdateQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectUpdateDocument, {
                    id,
                });
                const data = response.projectUpdate;
                return new ProjectUpdate(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectUpdateInteraction Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectUpdateInteractionQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectUpdateInteraction query and return a ProjectUpdateInteraction
         *
         * @param id - required id to pass to projectUpdateInteraction
         * @returns parsed response from ProjectUpdateInteractionQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectUpdateInteractionDocument, {
                    id,
                });
                const data = response.projectUpdateInteraction;
                return new ProjectUpdateInteraction(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectUpdateInteractions Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectUpdateInteractionsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectUpdateInteractions query and return a ProjectUpdateInteractionConnection
         *
         * @param variables - variables to pass into the ProjectUpdateInteractionsQuery
         * @returns parsed response from ProjectUpdateInteractionsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectUpdateInteractionsDocument, variables);
                const data = response.projectUpdateInteractions;
                return new ProjectUpdateInteractionConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ProjectUpdates Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectUpdatesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectUpdates query and return a ProjectUpdateConnection
         *
         * @param variables - variables to pass into the ProjectUpdatesQuery
         * @returns parsed response from ProjectUpdatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectUpdatesDocument, variables);
                const data = response.projectUpdates;
                return new ProjectUpdateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Projects Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Projects query and return a ProjectConnection
         *
         * @param variables - variables to pass into the ProjectsQuery
         * @returns parsed response from ProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectsDocument, variables);
                const data = response.projects;
                return new ProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable PushSubscriptionTest Query
     *
     * @param request - function to call the graphql client
     */
    class PushSubscriptionTestQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the PushSubscriptionTest query and return a PushSubscriptionTestPayload
         *
         * @param variables - variables to pass into the PushSubscriptionTestQuery
         * @returns parsed response from PushSubscriptionTestQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(PushSubscriptionTestDocument, variables);
                const data = response.pushSubscriptionTest;
                return new PushSubscriptionTestPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable RateLimitStatus Query
     *
     * @param request - function to call the graphql client
     */
    class RateLimitStatusQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the RateLimitStatus query and return a RateLimitPayload
         *
         * @returns parsed response from RateLimitStatusQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(RateLimitStatusDocument, {});
                const data = response.rateLimitStatus;
                return new RateLimitPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable Roadmap Query
     *
     * @param request - function to call the graphql client
     */
    class RoadmapQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Roadmap query and return a Roadmap
         *
         * @param id - required id to pass to roadmap
         * @returns parsed response from RoadmapQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(RoadmapDocument, {
                    id,
                });
                const data = response.roadmap;
                return new Roadmap(this._request, data);
            });
        }
    }
    /**
     * A fetchable RoadmapToProject Query
     *
     * @param request - function to call the graphql client
     */
    class RoadmapToProjectQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the RoadmapToProject query and return a RoadmapToProject
         *
         * @param id - required id to pass to roadmapToProject
         * @returns parsed response from RoadmapToProjectQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(RoadmapToProjectDocument, {
                    id,
                });
                const data = response.roadmapToProject;
                return new RoadmapToProject(this._request, data);
            });
        }
    }
    /**
     * A fetchable RoadmapToProjects Query
     *
     * @param request - function to call the graphql client
     */
    class RoadmapToProjectsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the RoadmapToProjects query and return a RoadmapToProjectConnection
         *
         * @param variables - variables to pass into the RoadmapToProjectsQuery
         * @returns parsed response from RoadmapToProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(RoadmapToProjectsDocument, variables);
                const data = response.roadmapToProjects;
                return new RoadmapToProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Roadmaps Query
     *
     * @param request - function to call the graphql client
     */
    class RoadmapsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Roadmaps query and return a RoadmapConnection
         *
         * @param variables - variables to pass into the RoadmapsQuery
         * @returns parsed response from RoadmapsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(RoadmapsDocument, variables);
                const data = response.roadmaps;
                return new RoadmapConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable SearchDocuments Query
     *
     * @param request - function to call the graphql client
     */
    class SearchDocumentsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SearchDocuments query and return a DocumentSearchPayload
         *
         * @param term - required term to pass to searchDocuments
         * @param variables - variables without 'term' to pass into the SearchDocumentsQuery
         * @returns parsed response from SearchDocumentsQuery
         */
        fetch(term, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SearchDocumentsDocument, Object.assign({ term }, variables));
                const data = response.searchDocuments;
                return new DocumentSearchPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable SearchIssues Query
     *
     * @param request - function to call the graphql client
     */
    class SearchIssuesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SearchIssues query and return a IssueSearchPayload
         *
         * @param term - required term to pass to searchIssues
         * @param variables - variables without 'term' to pass into the SearchIssuesQuery
         * @returns parsed response from SearchIssuesQuery
         */
        fetch(term, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SearchIssuesDocument, Object.assign({ term }, variables));
                const data = response.searchIssues;
                return new IssueSearchPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable SearchProjects Query
     *
     * @param request - function to call the graphql client
     */
    class SearchProjectsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SearchProjects query and return a ProjectSearchPayload
         *
         * @param term - required term to pass to searchProjects
         * @param variables - variables without 'term' to pass into the SearchProjectsQuery
         * @returns parsed response from SearchProjectsQuery
         */
        fetch(term, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SearchProjectsDocument, Object.assign({ term }, variables));
                const data = response.searchProjects;
                return new ProjectSearchPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable SsoUrlFromEmail Query
     *
     * @param request - function to call the graphql client
     */
    class SsoUrlFromEmailQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SsoUrlFromEmail query and return a SsoUrlFromEmailResponse
         *
         * @param email - required email to pass to ssoUrlFromEmail
         * @param variables - variables without 'email' to pass into the SsoUrlFromEmailQuery
         * @returns parsed response from SsoUrlFromEmailQuery
         */
        fetch(email, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SsoUrlFromEmailDocument, Object.assign({ email }, variables));
                const data = response.ssoUrlFromEmail;
                return new SsoUrlFromEmailResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable Team Query
     *
     * @param request - function to call the graphql client
     */
    class TeamQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Team query and return a Team
         *
         * @param id - required id to pass to team
         * @returns parsed response from TeamQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TeamDocument, {
                    id,
                });
                const data = response.team;
                return new Team(this._request, data);
            });
        }
    }
    /**
     * A fetchable TeamMembership Query
     *
     * @param request - function to call the graphql client
     */
    class TeamMembershipQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TeamMembership query and return a TeamMembership
         *
         * @param id - required id to pass to teamMembership
         * @returns parsed response from TeamMembershipQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TeamMembershipDocument, {
                    id,
                });
                const data = response.teamMembership;
                return new TeamMembership(this._request, data);
            });
        }
    }
    /**
     * A fetchable TeamMemberships Query
     *
     * @param request - function to call the graphql client
     */
    class TeamMembershipsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TeamMemberships query and return a TeamMembershipConnection
         *
         * @param variables - variables to pass into the TeamMembershipsQuery
         * @returns parsed response from TeamMembershipsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TeamMembershipsDocument, variables);
                const data = response.teamMemberships;
                return new TeamMembershipConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Teams Query
     *
     * @param request - function to call the graphql client
     */
    class TeamsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Teams query and return a TeamConnection
         *
         * @param variables - variables to pass into the TeamsQuery
         * @returns parsed response from TeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TeamsDocument, variables);
                const data = response.teams;
                return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Template Query
     *
     * @param request - function to call the graphql client
     */
    class TemplateQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Template query and return a Template
         *
         * @param id - required id to pass to template
         * @returns parsed response from TemplateQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TemplateDocument, {
                    id,
                });
                const data = response.template;
                return new Template(this._request, data);
            });
        }
    }
    /**
     * A fetchable Templates Query
     *
     * @param request - function to call the graphql client
     */
    class TemplatesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Templates query and return a Template list
         *
         * @returns parsed response from TemplatesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TemplatesDocument, {});
                const data = response.templates;
                return data.map(node => {
                    return new Template(this._request, node);
                });
            });
        }
    }
    /**
     * A fetchable TemplatesForIntegration Query
     *
     * @param request - function to call the graphql client
     */
    class TemplatesForIntegrationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TemplatesForIntegration query and return a Template list
         *
         * @param integrationType - required integrationType to pass to templatesForIntegration
         * @returns parsed response from TemplatesForIntegrationQuery
         */
        fetch(integrationType) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TemplatesForIntegrationDocument, {
                    integrationType,
                });
                const data = response.templatesForIntegration;
                return data.map(node => {
                    return new Template(this._request, node);
                });
            });
        }
    }
    /**
     * A fetchable TimeSchedule Query
     *
     * @param request - function to call the graphql client
     */
    class TimeScheduleQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TimeSchedule query and return a TimeSchedule
         *
         * @param id - required id to pass to timeSchedule
         * @returns parsed response from TimeScheduleQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TimeScheduleDocument, {
                    id,
                });
                const data = response.timeSchedule;
                return new TimeSchedule(this._request, data);
            });
        }
    }
    /**
     * A fetchable TimeSchedules Query
     *
     * @param request - function to call the graphql client
     */
    class TimeSchedulesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TimeSchedules query and return a TimeScheduleConnection
         *
         * @param variables - variables to pass into the TimeSchedulesQuery
         * @returns parsed response from TimeSchedulesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TimeSchedulesDocument, variables);
                const data = response.timeSchedules;
                return new TimeScheduleConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable TriageResponsibilities Query
     *
     * @param request - function to call the graphql client
     */
    class TriageResponsibilitiesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TriageResponsibilities query and return a TriageResponsibilityConnection
         *
         * @param variables - variables to pass into the TriageResponsibilitiesQuery
         * @returns parsed response from TriageResponsibilitiesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TriageResponsibilitiesDocument, variables);
                const data = response.triageResponsibilities;
                return new TriageResponsibilityConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable TriageResponsibility Query
     *
     * @param request - function to call the graphql client
     */
    class TriageResponsibilityQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TriageResponsibility query and return a TriageResponsibility
         *
         * @param id - required id to pass to triageResponsibility
         * @returns parsed response from TriageResponsibilityQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TriageResponsibilityDocument, {
                    id,
                });
                const data = response.triageResponsibility;
                return new TriageResponsibility(this._request, data);
            });
        }
    }
    /**
     * A fetchable User Query
     *
     * @param request - function to call the graphql client
     */
    class UserQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the User query and return a User
         *
         * @param id - required id to pass to user
         * @returns parsed response from UserQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserDocument, {
                    id,
                });
                const data = response.user;
                return new User(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettingsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings query and return a UserSettings
         *
         * @returns parsed response from UserSettingsQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettingsDocument, {});
                const data = response.userSettings;
                return new UserSettings(this._request, data);
            });
        }
    }
    /**
     * A fetchable Users Query
     *
     * @param request - function to call the graphql client
     */
    class UsersQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Users query and return a UserConnection
         *
         * @param variables - variables to pass into the UsersQuery
         * @returns parsed response from UsersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UsersDocument, variables);
                const data = response.users;
                return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable VerifyGitHubEnterpriseServerInstallation Query
     *
     * @param request - function to call the graphql client
     */
    class VerifyGitHubEnterpriseServerInstallationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the VerifyGitHubEnterpriseServerInstallation query and return a GitHubEnterpriseServerInstallVerificationPayload
         *
         * @returns parsed response from VerifyGitHubEnterpriseServerInstallationQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(VerifyGitHubEnterpriseServerInstallationDocument, {});
                const data = response.verifyGitHubEnterpriseServerInstallation;
                return new GitHubEnterpriseServerInstallVerificationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable Viewer Query
     *
     * @param request - function to call the graphql client
     */
    class ViewerQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Viewer query and return a User
         *
         * @returns parsed response from ViewerQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ViewerDocument, {});
                const data = response.viewer;
                return new User(this._request, data);
            });
        }
    }
    /**
     * A fetchable Webhook Query
     *
     * @param request - function to call the graphql client
     */
    class WebhookQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Webhook query and return a Webhook
         *
         * @param id - required id to pass to webhook
         * @returns parsed response from WebhookQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(WebhookDocument, {
                    id,
                });
                const data = response.webhook;
                return new Webhook(this._request, data);
            });
        }
    }
    /**
     * A fetchable Webhooks Query
     *
     * @param request - function to call the graphql client
     */
    class WebhooksQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Webhooks query and return a WebhookConnection
         *
         * @param variables - variables to pass into the WebhooksQuery
         * @returns parsed response from WebhooksQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(WebhooksDocument, variables);
                const data = response.webhooks;
                return new WebhookConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable WorkflowState Query
     *
     * @param request - function to call the graphql client
     */
    class WorkflowStateQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the WorkflowState query and return a WorkflowState
         *
         * @param id - required id to pass to workflowState
         * @returns parsed response from WorkflowStateQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(WorkflowStateDocument, {
                    id,
                });
                const data = response.workflowState;
                return new WorkflowState(this._request, data);
            });
        }
    }
    /**
     * A fetchable WorkflowStates Query
     *
     * @param request - function to call the graphql client
     */
    class WorkflowStatesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the WorkflowStates query and return a WorkflowStateConnection
         *
         * @param variables - variables to pass into the WorkflowStatesQuery
         * @returns parsed response from WorkflowStatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(WorkflowStatesDocument, variables);
                const data = response.workflowStates;
                return new WorkflowStateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AirbyteIntegrationConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class AirbyteIntegrationConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AirbyteIntegrationConnect mutation and return a IntegrationPayload
         *
         * @param input - required input to pass to airbyteIntegrationConnect
         * @returns parsed response from AirbyteIntegrationConnectMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AirbyteIntegrationConnectDocument, {
                    input,
                });
                const data = response.airbyteIntegrationConnect;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveAttachment Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveAttachmentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveAttachment mutation and return a AttachmentArchivePayload
         *
         * @param id - required id to pass to archiveAttachment
         * @returns parsed response from ArchiveAttachmentMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveAttachmentDocument, {
                    id,
                });
                const data = response.attachmentArchive;
                return new AttachmentArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateAttachment Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateAttachmentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateAttachment mutation and return a AttachmentPayload
         *
         * @param input - required input to pass to createAttachment
         * @returns parsed response from CreateAttachmentMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateAttachmentDocument, {
                    input,
                });
                const data = response.attachmentCreate;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteAttachment Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteAttachmentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteAttachment mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteAttachment
         * @returns parsed response from DeleteAttachmentMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteAttachmentDocument, {
                    id,
                });
                const data = response.attachmentDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkDiscord Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkDiscordMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkDiscord mutation and return a AttachmentPayload
         *
         * @param channelId - required channelId to pass to attachmentLinkDiscord
         * @param issueId - required issueId to pass to attachmentLinkDiscord
         * @param messageId - required messageId to pass to attachmentLinkDiscord
         * @param url - required url to pass to attachmentLinkDiscord
         * @param variables - variables without 'channelId', 'issueId', 'messageId', 'url' to pass into the AttachmentLinkDiscordMutation
         * @returns parsed response from AttachmentLinkDiscordMutation
         */
        fetch(channelId, issueId, messageId, url, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkDiscordDocument, Object.assign({ channelId,
                    issueId,
                    messageId,
                    url }, variables));
                const data = response.attachmentLinkDiscord;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkFront Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkFrontMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkFront mutation and return a FrontAttachmentPayload
         *
         * @param conversationId - required conversationId to pass to attachmentLinkFront
         * @param issueId - required issueId to pass to attachmentLinkFront
         * @param variables - variables without 'conversationId', 'issueId' to pass into the AttachmentLinkFrontMutation
         * @returns parsed response from AttachmentLinkFrontMutation
         */
        fetch(conversationId, issueId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkFrontDocument, Object.assign({ conversationId,
                    issueId }, variables));
                const data = response.attachmentLinkFront;
                return new FrontAttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkGitHubIssue Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkGitHubIssueMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkGitHubIssue mutation and return a AttachmentPayload
         *
         * @param issueId - required issueId to pass to attachmentLinkGitHubIssue
         * @param url - required url to pass to attachmentLinkGitHubIssue
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkGitHubIssueMutation
         * @returns parsed response from AttachmentLinkGitHubIssueMutation
         */
        fetch(issueId, url, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkGitHubIssueDocument, Object.assign({ issueId,
                    url }, variables));
                const data = response.attachmentLinkGitHubIssue;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkGitHubPr Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkGitHubPrMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkGitHubPr mutation and return a AttachmentPayload
         *
         * @param issueId - required issueId to pass to attachmentLinkGitHubPR
         * @param url - required url to pass to attachmentLinkGitHubPR
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkGitHubPrMutation
         * @returns parsed response from AttachmentLinkGitHubPrMutation
         */
        fetch(issueId, url, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkGitHubPrDocument, Object.assign({ issueId,
                    url }, variables));
                const data = response.attachmentLinkGitHubPR;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkGitLabMr Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkGitLabMrMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkGitLabMr mutation and return a AttachmentPayload
         *
         * @param issueId - required issueId to pass to attachmentLinkGitLabMR
         * @param number - required number to pass to attachmentLinkGitLabMR
         * @param projectPathWithNamespace - required projectPathWithNamespace to pass to attachmentLinkGitLabMR
         * @param url - required url to pass to attachmentLinkGitLabMR
         * @param variables - variables without 'issueId', 'number', 'projectPathWithNamespace', 'url' to pass into the AttachmentLinkGitLabMrMutation
         * @returns parsed response from AttachmentLinkGitLabMrMutation
         */
        fetch(issueId, number, projectPathWithNamespace, url, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkGitLabMrDocument, Object.assign({ issueId,
                    number,
                    projectPathWithNamespace,
                    url }, variables));
                const data = response.attachmentLinkGitLabMR;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkIntercom Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkIntercomMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkIntercom mutation and return a AttachmentPayload
         *
         * @param conversationId - required conversationId to pass to attachmentLinkIntercom
         * @param issueId - required issueId to pass to attachmentLinkIntercom
         * @param variables - variables without 'conversationId', 'issueId' to pass into the AttachmentLinkIntercomMutation
         * @returns parsed response from AttachmentLinkIntercomMutation
         */
        fetch(conversationId, issueId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkIntercomDocument, Object.assign({ conversationId,
                    issueId }, variables));
                const data = response.attachmentLinkIntercom;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkJiraIssue Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkJiraIssueMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkJiraIssue mutation and return a AttachmentPayload
         *
         * @param issueId - required issueId to pass to attachmentLinkJiraIssue
         * @param jiraIssueId - required jiraIssueId to pass to attachmentLinkJiraIssue
         * @param variables - variables without 'issueId', 'jiraIssueId' to pass into the AttachmentLinkJiraIssueMutation
         * @returns parsed response from AttachmentLinkJiraIssueMutation
         */
        fetch(issueId, jiraIssueId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkJiraIssueDocument, Object.assign({ issueId,
                    jiraIssueId }, variables));
                const data = response.attachmentLinkJiraIssue;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkSlack Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkSlackMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkSlack mutation and return a AttachmentPayload
         *
         * @param issueId - required issueId to pass to attachmentLinkSlack
         * @param url - required url to pass to attachmentLinkSlack
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkSlackMutation
         * @returns parsed response from AttachmentLinkSlackMutation
         */
        fetch(issueId, url, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkSlackDocument, Object.assign({ issueId,
                    url }, variables));
                const data = response.attachmentLinkSlack;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkUrl Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkUrlMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkUrl mutation and return a AttachmentPayload
         *
         * @param issueId - required issueId to pass to attachmentLinkURL
         * @param url - required url to pass to attachmentLinkURL
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkUrlMutation
         * @returns parsed response from AttachmentLinkUrlMutation
         */
        fetch(issueId, url, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkUrlDocument, Object.assign({ issueId,
                    url }, variables));
                const data = response.attachmentLinkURL;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkZendesk Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkZendeskMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkZendesk mutation and return a AttachmentPayload
         *
         * @param issueId - required issueId to pass to attachmentLinkZendesk
         * @param ticketId - required ticketId to pass to attachmentLinkZendesk
         * @param variables - variables without 'issueId', 'ticketId' to pass into the AttachmentLinkZendeskMutation
         * @returns parsed response from AttachmentLinkZendeskMutation
         */
        fetch(issueId, ticketId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkZendeskDocument, Object.assign({ issueId,
                    ticketId }, variables));
                const data = response.attachmentLinkZendesk;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentSyncToSlack Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentSyncToSlackMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentSyncToSlack mutation and return a AttachmentPayload
         *
         * @param id - required id to pass to attachmentSyncToSlack
         * @returns parsed response from AttachmentSyncToSlackMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentSyncToSlackDocument, {
                    id,
                });
                const data = response.attachmentSyncToSlack;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateAttachment Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateAttachmentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateAttachment mutation and return a AttachmentPayload
         *
         * @param id - required id to pass to updateAttachment
         * @param input - required input to pass to updateAttachment
         * @returns parsed response from UpdateAttachmentMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateAttachmentDocument, {
                    id,
                    input,
                });
                const data = response.attachmentUpdate;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateComment Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateCommentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateComment mutation and return a CommentPayload
         *
         * @param input - required input to pass to createComment
         * @returns parsed response from CreateCommentMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateCommentDocument, {
                    input,
                });
                const data = response.commentCreate;
                return new CommentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteComment Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteCommentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteComment mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteComment
         * @returns parsed response from DeleteCommentMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteCommentDocument, {
                    id,
                });
                const data = response.commentDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CommentResolve Mutation
     *
     * @param request - function to call the graphql client
     */
    class CommentResolveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CommentResolve mutation and return a CommentPayload
         *
         * @param id - required id to pass to commentResolve
         * @param variables - variables without 'id' to pass into the CommentResolveMutation
         * @returns parsed response from CommentResolveMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CommentResolveDocument, Object.assign({ id }, variables));
                const data = response.commentResolve;
                return new CommentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CommentUnresolve Mutation
     *
     * @param request - function to call the graphql client
     */
    class CommentUnresolveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CommentUnresolve mutation and return a CommentPayload
         *
         * @param id - required id to pass to commentUnresolve
         * @returns parsed response from CommentUnresolveMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CommentUnresolveDocument, {
                    id,
                });
                const data = response.commentUnresolve;
                return new CommentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateComment Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateCommentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateComment mutation and return a CommentPayload
         *
         * @param id - required id to pass to updateComment
         * @param input - required input to pass to updateComment
         * @returns parsed response from UpdateCommentMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateCommentDocument, {
                    id,
                    input,
                });
                const data = response.commentUpdate;
                return new CommentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateContact Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateContactMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateContact mutation and return a ContactPayload
         *
         * @param input - required input to pass to createContact
         * @returns parsed response from CreateContactMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateContactDocument, {
                    input,
                });
                const data = response.contactCreate;
                return new ContactPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateCsvExportReport Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateCsvExportReportMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateCsvExportReport mutation and return a CreateCsvExportReportPayload
         *
         * @param variables - variables to pass into the CreateCsvExportReportMutation
         * @returns parsed response from CreateCsvExportReportMutation
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateCsvExportReportDocument, variables);
                const data = response.createCsvExportReport;
                return new CreateCsvExportReportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateOrganizationFromOnboarding Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateOrganizationFromOnboardingMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateOrganizationFromOnboarding mutation and return a CreateOrJoinOrganizationResponse
         *
         * @param input - required input to pass to createOrganizationFromOnboarding
         * @param variables - variables without 'input' to pass into the CreateOrganizationFromOnboardingMutation
         * @returns parsed response from CreateOrganizationFromOnboardingMutation
         */
        fetch(input, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateOrganizationFromOnboardingDocument, Object.assign({ input }, variables));
                const data = response.createOrganizationFromOnboarding;
                return new CreateOrJoinOrganizationResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateProjectUpdateReminder Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateProjectUpdateReminderMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateProjectUpdateReminder mutation and return a ProjectUpdateReminderPayload
         *
         * @param projectId - required projectId to pass to createProjectUpdateReminder
         * @param variables - variables without 'projectId' to pass into the CreateProjectUpdateReminderMutation
         * @returns parsed response from CreateProjectUpdateReminderMutation
         */
        fetch(projectId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateProjectUpdateReminderDocument, Object.assign({ projectId }, variables));
                const data = response.createProjectUpdateReminder;
                return new ProjectUpdateReminderPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateCustomView Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateCustomViewMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateCustomView mutation and return a CustomViewPayload
         *
         * @param input - required input to pass to createCustomView
         * @returns parsed response from CreateCustomViewMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateCustomViewDocument, {
                    input,
                });
                const data = response.customViewCreate;
                return new CustomViewPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteCustomView Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteCustomViewMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteCustomView mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteCustomView
         * @returns parsed response from DeleteCustomViewMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteCustomViewDocument, {
                    id,
                });
                const data = response.customViewDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateCustomView Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateCustomViewMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateCustomView mutation and return a CustomViewPayload
         *
         * @param id - required id to pass to updateCustomView
         * @param input - required input to pass to updateCustomView
         * @returns parsed response from UpdateCustomViewMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateCustomViewDocument, {
                    id,
                    input,
                });
                const data = response.customViewUpdate;
                return new CustomViewPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveCycle Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveCycleMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveCycle mutation and return a CycleArchivePayload
         *
         * @param id - required id to pass to archiveCycle
         * @returns parsed response from ArchiveCycleMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveCycleDocument, {
                    id,
                });
                const data = response.cycleArchive;
                return new CycleArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateCycle Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateCycleMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateCycle mutation and return a CyclePayload
         *
         * @param input - required input to pass to createCycle
         * @returns parsed response from CreateCycleMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateCycleDocument, {
                    input,
                });
                const data = response.cycleCreate;
                return new CyclePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CycleShiftAll Mutation
     *
     * @param request - function to call the graphql client
     */
    class CycleShiftAllMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CycleShiftAll mutation and return a CyclePayload
         *
         * @param input - required input to pass to cycleShiftAll
         * @returns parsed response from CycleShiftAllMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CycleShiftAllDocument, {
                    input,
                });
                const data = response.cycleShiftAll;
                return new CyclePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CycleStartUpcomingCycleToday Mutation
     *
     * @param request - function to call the graphql client
     */
    class CycleStartUpcomingCycleTodayMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CycleStartUpcomingCycleToday mutation and return a CyclePayload
         *
         * @param id - required id to pass to cycleStartUpcomingCycleToday
         * @returns parsed response from CycleStartUpcomingCycleTodayMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CycleStartUpcomingCycleTodayDocument, {
                    id,
                });
                const data = response.cycleStartUpcomingCycleToday;
                return new CyclePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateCycle Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateCycleMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateCycle mutation and return a CyclePayload
         *
         * @param id - required id to pass to updateCycle
         * @param input - required input to pass to updateCycle
         * @returns parsed response from UpdateCycleMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateCycleDocument, {
                    id,
                    input,
                });
                const data = response.cycleUpdate;
                return new CyclePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateDocument Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateDocumentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateDocument mutation and return a DocumentPayload
         *
         * @param input - required input to pass to createDocument
         * @returns parsed response from CreateDocumentMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateDocumentDocument, {
                    input,
                });
                const data = response.documentCreate;
                return new DocumentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteDocument Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteDocumentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteDocument mutation and return a DocumentArchivePayload
         *
         * @param id - required id to pass to deleteDocument
         * @returns parsed response from DeleteDocumentMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteDocumentDocument, {
                    id,
                });
                const data = response.documentDelete;
                return new DocumentArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveDocument Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveDocumentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveDocument mutation and return a DocumentArchivePayload
         *
         * @param id - required id to pass to unarchiveDocument
         * @returns parsed response from UnarchiveDocumentMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveDocumentDocument, {
                    id,
                });
                const data = response.documentUnarchive;
                return new DocumentArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateDocument Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateDocumentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateDocument mutation and return a DocumentPayload
         *
         * @param id - required id to pass to updateDocument
         * @param input - required input to pass to updateDocument
         * @returns parsed response from UpdateDocumentMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateDocumentDocument, {
                    id,
                    input,
                });
                const data = response.documentUpdate;
                return new DocumentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateEmailIntakeAddress Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateEmailIntakeAddressMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateEmailIntakeAddress mutation and return a EmailIntakeAddressPayload
         *
         * @param input - required input to pass to createEmailIntakeAddress
         * @returns parsed response from CreateEmailIntakeAddressMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateEmailIntakeAddressDocument, {
                    input,
                });
                const data = response.emailIntakeAddressCreate;
                return new EmailIntakeAddressPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteEmailIntakeAddress Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteEmailIntakeAddressMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteEmailIntakeAddress mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteEmailIntakeAddress
         * @returns parsed response from DeleteEmailIntakeAddressMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteEmailIntakeAddressDocument, {
                    id,
                });
                const data = response.emailIntakeAddressDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable EmailIntakeAddressRotate Mutation
     *
     * @param request - function to call the graphql client
     */
    class EmailIntakeAddressRotateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EmailIntakeAddressRotate mutation and return a EmailIntakeAddressPayload
         *
         * @param id - required id to pass to emailIntakeAddressRotate
         * @returns parsed response from EmailIntakeAddressRotateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EmailIntakeAddressRotateDocument, {
                    id,
                });
                const data = response.emailIntakeAddressRotate;
                return new EmailIntakeAddressPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateEmailIntakeAddress Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateEmailIntakeAddressMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateEmailIntakeAddress mutation and return a EmailIntakeAddressPayload
         *
         * @param id - required id to pass to updateEmailIntakeAddress
         * @param input - required input to pass to updateEmailIntakeAddress
         * @returns parsed response from UpdateEmailIntakeAddressMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateEmailIntakeAddressDocument, {
                    id,
                    input,
                });
                const data = response.emailIntakeAddressUpdate;
                return new EmailIntakeAddressPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable EmailTokenUserAccountAuth Mutation
     *
     * @param request - function to call the graphql client
     */
    class EmailTokenUserAccountAuthMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EmailTokenUserAccountAuth mutation and return a AuthResolverResponse
         *
         * @param input - required input to pass to emailTokenUserAccountAuth
         * @returns parsed response from EmailTokenUserAccountAuthMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EmailTokenUserAccountAuthDocument, {
                    input,
                });
                const data = response.emailTokenUserAccountAuth;
                return new AuthResolverResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable EmailUnsubscribe Mutation
     *
     * @param request - function to call the graphql client
     */
    class EmailUnsubscribeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EmailUnsubscribe mutation and return a EmailUnsubscribePayload
         *
         * @param input - required input to pass to emailUnsubscribe
         * @returns parsed response from EmailUnsubscribeMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EmailUnsubscribeDocument, {
                    input,
                });
                const data = response.emailUnsubscribe;
                return new EmailUnsubscribePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable EmailUserAccountAuthChallenge Mutation
     *
     * @param request - function to call the graphql client
     */
    class EmailUserAccountAuthChallengeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EmailUserAccountAuthChallenge mutation and return a EmailUserAccountAuthChallengeResponse
         *
         * @param input - required input to pass to emailUserAccountAuthChallenge
         * @returns parsed response from EmailUserAccountAuthChallengeMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EmailUserAccountAuthChallengeDocument, {
                    input,
                });
                const data = response.emailUserAccountAuthChallenge;
                return new EmailUserAccountAuthChallengeResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateEmoji Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateEmojiMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateEmoji mutation and return a EmojiPayload
         *
         * @param input - required input to pass to createEmoji
         * @returns parsed response from CreateEmojiMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateEmojiDocument, {
                    input,
                });
                const data = response.emojiCreate;
                return new EmojiPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteEmoji Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteEmojiMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteEmoji mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteEmoji
         * @returns parsed response from DeleteEmojiMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteEmojiDocument, {
                    id,
                });
                const data = response.emojiDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateEntityExternalLink Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateEntityExternalLinkMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateEntityExternalLink mutation and return a EntityExternalLinkPayload
         *
         * @param input - required input to pass to createEntityExternalLink
         * @returns parsed response from CreateEntityExternalLinkMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateEntityExternalLinkDocument, {
                    input,
                });
                const data = response.entityExternalLinkCreate;
                return new EntityExternalLinkPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteEntityExternalLink Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteEntityExternalLinkMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteEntityExternalLink mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteEntityExternalLink
         * @returns parsed response from DeleteEntityExternalLinkMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteEntityExternalLinkDocument, {
                    id,
                });
                const data = response.entityExternalLinkDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateEntityExternalLink Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateEntityExternalLinkMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateEntityExternalLink mutation and return a EntityExternalLinkPayload
         *
         * @param id - required id to pass to updateEntityExternalLink
         * @param input - required input to pass to updateEntityExternalLink
         * @returns parsed response from UpdateEntityExternalLinkMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateEntityExternalLinkDocument, {
                    id,
                    input,
                });
                const data = response.entityExternalLinkUpdate;
                return new EntityExternalLinkPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateFavorite Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateFavoriteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateFavorite mutation and return a FavoritePayload
         *
         * @param input - required input to pass to createFavorite
         * @returns parsed response from CreateFavoriteMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateFavoriteDocument, {
                    input,
                });
                const data = response.favoriteCreate;
                return new FavoritePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteFavorite Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteFavoriteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteFavorite mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteFavorite
         * @returns parsed response from DeleteFavoriteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteFavoriteDocument, {
                    id,
                });
                const data = response.favoriteDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateFavorite Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateFavoriteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateFavorite mutation and return a FavoritePayload
         *
         * @param id - required id to pass to updateFavorite
         * @param input - required input to pass to updateFavorite
         * @returns parsed response from UpdateFavoriteMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateFavoriteDocument, {
                    id,
                    input,
                });
                const data = response.favoriteUpdate;
                return new FavoritePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable FileUpload Mutation
     *
     * @param request - function to call the graphql client
     */
    class FileUploadMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the FileUpload mutation and return a UploadPayload
         *
         * @param contentType - required contentType to pass to fileUpload
         * @param filename - required filename to pass to fileUpload
         * @param size - required size to pass to fileUpload
         * @param variables - variables without 'contentType', 'filename', 'size' to pass into the FileUploadMutation
         * @returns parsed response from FileUploadMutation
         */
        fetch(contentType, filename, size, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(FileUploadDocument, Object.assign({ contentType,
                    filename,
                    size }, variables));
                const data = response.fileUpload;
                return new UploadPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateGitAutomationState Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateGitAutomationStateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateGitAutomationState mutation and return a GitAutomationStatePayload
         *
         * @param input - required input to pass to createGitAutomationState
         * @returns parsed response from CreateGitAutomationStateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateGitAutomationStateDocument, {
                    input,
                });
                const data = response.gitAutomationStateCreate;
                return new GitAutomationStatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteGitAutomationState Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteGitAutomationStateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteGitAutomationState mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteGitAutomationState
         * @returns parsed response from DeleteGitAutomationStateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteGitAutomationStateDocument, {
                    id,
                });
                const data = response.gitAutomationStateDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateGitAutomationState Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateGitAutomationStateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateGitAutomationState mutation and return a GitAutomationStatePayload
         *
         * @param id - required id to pass to updateGitAutomationState
         * @param input - required input to pass to updateGitAutomationState
         * @returns parsed response from UpdateGitAutomationStateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateGitAutomationStateDocument, {
                    id,
                    input,
                });
                const data = response.gitAutomationStateUpdate;
                return new GitAutomationStatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateGitAutomationTargetBranch Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateGitAutomationTargetBranchMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateGitAutomationTargetBranch mutation and return a GitAutomationTargetBranchPayload
         *
         * @param input - required input to pass to createGitAutomationTargetBranch
         * @returns parsed response from CreateGitAutomationTargetBranchMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateGitAutomationTargetBranchDocument, {
                    input,
                });
                const data = response.gitAutomationTargetBranchCreate;
                return new GitAutomationTargetBranchPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteGitAutomationTargetBranch Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteGitAutomationTargetBranchMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteGitAutomationTargetBranch mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteGitAutomationTargetBranch
         * @returns parsed response from DeleteGitAutomationTargetBranchMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteGitAutomationTargetBranchDocument, {
                    id,
                });
                const data = response.gitAutomationTargetBranchDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateGitAutomationTargetBranch Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateGitAutomationTargetBranchMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateGitAutomationTargetBranch mutation and return a GitAutomationTargetBranchPayload
         *
         * @param id - required id to pass to updateGitAutomationTargetBranch
         * @param input - required input to pass to updateGitAutomationTargetBranch
         * @returns parsed response from UpdateGitAutomationTargetBranchMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateGitAutomationTargetBranchDocument, {
                    id,
                    input,
                });
                const data = response.gitAutomationTargetBranchUpdate;
                return new GitAutomationTargetBranchPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable GoogleUserAccountAuth Mutation
     *
     * @param request - function to call the graphql client
     */
    class GoogleUserAccountAuthMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the GoogleUserAccountAuth mutation and return a AuthResolverResponse
         *
         * @param input - required input to pass to googleUserAccountAuth
         * @returns parsed response from GoogleUserAccountAuthMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(GoogleUserAccountAuthDocument, {
                    input,
                });
                const data = response.googleUserAccountAuth;
                return new AuthResolverResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable ImageUploadFromUrl Mutation
     *
     * @param request - function to call the graphql client
     */
    class ImageUploadFromUrlMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ImageUploadFromUrl mutation and return a ImageUploadFromUrlPayload
         *
         * @param url - required url to pass to imageUploadFromUrl
         * @returns parsed response from ImageUploadFromUrlMutation
         */
        fetch(url) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ImageUploadFromUrlDocument, {
                    url,
                });
                const data = response.imageUploadFromUrl;
                return new ImageUploadFromUrlPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ImportFileUpload Mutation
     *
     * @param request - function to call the graphql client
     */
    class ImportFileUploadMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ImportFileUpload mutation and return a UploadPayload
         *
         * @param contentType - required contentType to pass to importFileUpload
         * @param filename - required filename to pass to importFileUpload
         * @param size - required size to pass to importFileUpload
         * @param variables - variables without 'contentType', 'filename', 'size' to pass into the ImportFileUploadMutation
         * @returns parsed response from ImportFileUploadMutation
         */
        fetch(contentType, filename, size, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ImportFileUploadDocument, Object.assign({ contentType,
                    filename,
                    size }, variables));
                const data = response.importFileUpload;
                return new UploadPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveInitiative Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveInitiativeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveInitiative mutation and return a InitiativeArchivePayload
         *
         * @param id - required id to pass to archiveInitiative
         * @returns parsed response from ArchiveInitiativeMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveInitiativeDocument, {
                    id,
                });
                const data = response.initiativeArchive;
                return new InitiativeArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateInitiative Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateInitiativeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateInitiative mutation and return a InitiativePayload
         *
         * @param input - required input to pass to createInitiative
         * @returns parsed response from CreateInitiativeMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateInitiativeDocument, {
                    input,
                });
                const data = response.initiativeCreate;
                return new InitiativePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteInitiative Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteInitiativeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteInitiative mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteInitiative
         * @returns parsed response from DeleteInitiativeMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteInitiativeDocument, {
                    id,
                });
                const data = response.initiativeDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateInitiativeToProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateInitiativeToProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateInitiativeToProject mutation and return a InitiativeToProjectPayload
         *
         * @param input - required input to pass to createInitiativeToProject
         * @returns parsed response from CreateInitiativeToProjectMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateInitiativeToProjectDocument, {
                    input,
                });
                const data = response.initiativeToProjectCreate;
                return new InitiativeToProjectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteInitiativeToProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteInitiativeToProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteInitiativeToProject mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteInitiativeToProject
         * @returns parsed response from DeleteInitiativeToProjectMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteInitiativeToProjectDocument, {
                    id,
                });
                const data = response.initiativeToProjectDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateInitiativeToProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateInitiativeToProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateInitiativeToProject mutation and return a InitiativeToProjectPayload
         *
         * @param id - required id to pass to updateInitiativeToProject
         * @param input - required input to pass to updateInitiativeToProject
         * @returns parsed response from UpdateInitiativeToProjectMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateInitiativeToProjectDocument, {
                    id,
                    input,
                });
                const data = response.initiativeToProjectUpdate;
                return new InitiativeToProjectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveInitiative Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveInitiativeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveInitiative mutation and return a InitiativeArchivePayload
         *
         * @param id - required id to pass to unarchiveInitiative
         * @returns parsed response from UnarchiveInitiativeMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveInitiativeDocument, {
                    id,
                });
                const data = response.initiativeUnarchive;
                return new InitiativeArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateInitiative Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateInitiativeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateInitiative mutation and return a InitiativePayload
         *
         * @param id - required id to pass to updateInitiative
         * @param input - required input to pass to updateInitiative
         * @returns parsed response from UpdateInitiativeMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateInitiativeDocument, {
                    id,
                    input,
                });
                const data = response.initiativeUpdate;
                return new InitiativePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveIntegration Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveIntegrationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveIntegration mutation and return a DeletePayload
         *
         * @param id - required id to pass to archiveIntegration
         * @returns parsed response from ArchiveIntegrationMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveIntegrationDocument, {
                    id,
                });
                const data = response.integrationArchive;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationAsksConnectChannel Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationAsksConnectChannelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationAsksConnectChannel mutation and return a AsksChannelConnectPayload
         *
         * @param code - required code to pass to integrationAsksConnectChannel
         * @param redirectUri - required redirectUri to pass to integrationAsksConnectChannel
         * @returns parsed response from IntegrationAsksConnectChannelMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationAsksConnectChannelDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationAsksConnectChannel;
                return new AsksChannelConnectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteIntegration Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteIntegrationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteIntegration mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteIntegration
         * @returns parsed response from DeleteIntegrationMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteIntegrationDocument, {
                    id,
                });
                const data = response.integrationDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationDiscord Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationDiscordMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationDiscord mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationDiscord
         * @param redirectUri - required redirectUri to pass to integrationDiscord
         * @returns parsed response from IntegrationDiscordMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationDiscordDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationDiscord;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationFigma Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationFigmaMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationFigma mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationFigma
         * @param redirectUri - required redirectUri to pass to integrationFigma
         * @returns parsed response from IntegrationFigmaMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationFigmaDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationFigma;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationFront Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationFrontMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationFront mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationFront
         * @param redirectUri - required redirectUri to pass to integrationFront
         * @returns parsed response from IntegrationFrontMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationFrontDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationFront;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationGitHubEnterpriseServerConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGitHubEnterpriseServerConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGitHubEnterpriseServerConnect mutation and return a GitHubEnterpriseServerPayload
         *
         * @param githubUrl - required githubUrl to pass to integrationGitHubEnterpriseServerConnect
         * @param variables - variables without 'githubUrl' to pass into the IntegrationGitHubEnterpriseServerConnectMutation
         * @returns parsed response from IntegrationGitHubEnterpriseServerConnectMutation
         */
        fetch(githubUrl, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationGitHubEnterpriseServerConnectDocument, Object.assign({ githubUrl }, variables));
                const data = response.integrationGitHubEnterpriseServerConnect;
                return new GitHubEnterpriseServerPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationGitHubPersonal Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGitHubPersonalMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGitHubPersonal mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationGitHubPersonal
         * @returns parsed response from IntegrationGitHubPersonalMutation
         */
        fetch(code) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationGitHubPersonalDocument, {
                    code,
                });
                const data = response.integrationGitHubPersonal;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateIntegrationGithubCommit Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateIntegrationGithubCommitMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateIntegrationGithubCommit mutation and return a GitHubCommitIntegrationPayload
         *
         * @returns parsed response from CreateIntegrationGithubCommitMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateIntegrationGithubCommitDocument, {});
                const data = response.integrationGithubCommitCreate;
                return new GitHubCommitIntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationGithubConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGithubConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGithubConnect mutation and return a IntegrationPayload
         *
         * @param installationId - required installationId to pass to integrationGithubConnect
         * @returns parsed response from IntegrationGithubConnectMutation
         */
        fetch(installationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationGithubConnectDocument, {
                    installationId,
                });
                const data = response.integrationGithubConnect;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationGithubImportConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGithubImportConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGithubImportConnect mutation and return a IntegrationPayload
         *
         * @param installationId - required installationId to pass to integrationGithubImportConnect
         * @returns parsed response from IntegrationGithubImportConnectMutation
         */
        fetch(installationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationGithubImportConnectDocument, {
                    installationId,
                });
                const data = response.integrationGithubImportConnect;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationGitlabConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGitlabConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGitlabConnect mutation and return a GitLabIntegrationCreatePayload
         *
         * @param accessToken - required accessToken to pass to integrationGitlabConnect
         * @param gitlabUrl - required gitlabUrl to pass to integrationGitlabConnect
         * @returns parsed response from IntegrationGitlabConnectMutation
         */
        fetch(accessToken, gitlabUrl) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationGitlabConnectDocument, {
                    accessToken,
                    gitlabUrl,
                });
                const data = response.integrationGitlabConnect;
                return new GitLabIntegrationCreatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationGoogleSheets Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGoogleSheetsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGoogleSheets mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationGoogleSheets
         * @returns parsed response from IntegrationGoogleSheetsMutation
         */
        fetch(code) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationGoogleSheetsDocument, {
                    code,
                });
                const data = response.integrationGoogleSheets;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationIntercom Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationIntercomMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationIntercom mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationIntercom
         * @param redirectUri - required redirectUri to pass to integrationIntercom
         * @param variables - variables without 'code', 'redirectUri' to pass into the IntegrationIntercomMutation
         * @returns parsed response from IntegrationIntercomMutation
         */
        fetch(code, redirectUri, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationIntercomDocument, Object.assign({ code,
                    redirectUri }, variables));
                const data = response.integrationIntercom;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteIntegrationIntercom Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteIntegrationIntercomMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteIntegrationIntercom mutation and return a IntegrationPayload
         *
         * @returns parsed response from DeleteIntegrationIntercomMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteIntegrationIntercomDocument, {});
                const data = response.integrationIntercomDelete;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateIntegrationIntercomSettings Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateIntegrationIntercomSettingsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateIntegrationIntercomSettings mutation and return a IntegrationPayload
         *
         * @param input - required input to pass to updateIntegrationIntercomSettings
         * @returns parsed response from UpdateIntegrationIntercomSettingsMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateIntegrationIntercomSettingsDocument, {
                    input,
                });
                const data = response.integrationIntercomSettingsUpdate;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationJiraPersonal Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationJiraPersonalMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationJiraPersonal mutation and return a IntegrationPayload
         *
         * @param variables - variables to pass into the IntegrationJiraPersonalMutation
         * @returns parsed response from IntegrationJiraPersonalMutation
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationJiraPersonalDocument, variables);
                const data = response.integrationJiraPersonal;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationLoom Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationLoomMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationLoom mutation and return a IntegrationPayload
         *
         * @returns parsed response from IntegrationLoomMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationLoomDocument, {});
                const data = response.integrationLoom;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationRequest Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationRequestMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationRequest mutation and return a IntegrationRequestPayload
         *
         * @param input - required input to pass to integrationRequest
         * @returns parsed response from IntegrationRequestMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationRequestDocument, {
                    input,
                });
                const data = response.integrationRequest;
                return new IntegrationRequestPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSentryConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSentryConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSentryConnect mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSentryConnect
         * @param installationId - required installationId to pass to integrationSentryConnect
         * @param organizationSlug - required organizationSlug to pass to integrationSentryConnect
         * @returns parsed response from IntegrationSentryConnectMutation
         */
        fetch(code, installationId, organizationSlug) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSentryConnectDocument, {
                    code,
                    installationId,
                    organizationSlug,
                });
                const data = response.integrationSentryConnect;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlack Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlack mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSlack
         * @param redirectUri - required redirectUri to pass to integrationSlack
         * @param variables - variables without 'code', 'redirectUri' to pass into the IntegrationSlackMutation
         * @returns parsed response from IntegrationSlackMutation
         */
        fetch(code, redirectUri, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackDocument, Object.assign({ code,
                    redirectUri }, variables));
                const data = response.integrationSlack;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackAsks Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackAsksMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackAsks mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSlackAsks
         * @param redirectUri - required redirectUri to pass to integrationSlackAsks
         * @returns parsed response from IntegrationSlackAsksMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackAsksDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationSlackAsks;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackCustomViewNotifications Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackCustomViewNotificationsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackCustomViewNotifications mutation and return a SlackChannelConnectPayload
         *
         * @param code - required code to pass to integrationSlackCustomViewNotifications
         * @param customViewId - required customViewId to pass to integrationSlackCustomViewNotifications
         * @param redirectUri - required redirectUri to pass to integrationSlackCustomViewNotifications
         * @returns parsed response from IntegrationSlackCustomViewNotificationsMutation
         */
        fetch(code, customViewId, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackCustomViewNotificationsDocument, {
                    code,
                    customViewId,
                    redirectUri,
                });
                const data = response.integrationSlackCustomViewNotifications;
                return new SlackChannelConnectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackImportEmojis Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackImportEmojisMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackImportEmojis mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSlackImportEmojis
         * @param redirectUri - required redirectUri to pass to integrationSlackImportEmojis
         * @returns parsed response from IntegrationSlackImportEmojisMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackImportEmojisDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationSlackImportEmojis;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackOrgProjectUpdatesPost Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackOrgProjectUpdatesPostMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackOrgProjectUpdatesPost mutation and return a SlackChannelConnectPayload
         *
         * @param code - required code to pass to integrationSlackOrgProjectUpdatesPost
         * @param redirectUri - required redirectUri to pass to integrationSlackOrgProjectUpdatesPost
         * @returns parsed response from IntegrationSlackOrgProjectUpdatesPostMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackOrgProjectUpdatesPostDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationSlackOrgProjectUpdatesPost;
                return new SlackChannelConnectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackPersonal Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackPersonalMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackPersonal mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSlackPersonal
         * @param redirectUri - required redirectUri to pass to integrationSlackPersonal
         * @returns parsed response from IntegrationSlackPersonalMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackPersonalDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationSlackPersonal;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackPost Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackPostMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackPost mutation and return a SlackChannelConnectPayload
         *
         * @param code - required code to pass to integrationSlackPost
         * @param redirectUri - required redirectUri to pass to integrationSlackPost
         * @param teamId - required teamId to pass to integrationSlackPost
         * @param variables - variables without 'code', 'redirectUri', 'teamId' to pass into the IntegrationSlackPostMutation
         * @returns parsed response from IntegrationSlackPostMutation
         */
        fetch(code, redirectUri, teamId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackPostDocument, Object.assign({ code,
                    redirectUri,
                    teamId }, variables));
                const data = response.integrationSlackPost;
                return new SlackChannelConnectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackProjectPost Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackProjectPostMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackProjectPost mutation and return a SlackChannelConnectPayload
         *
         * @param code - required code to pass to integrationSlackProjectPost
         * @param projectId - required projectId to pass to integrationSlackProjectPost
         * @param redirectUri - required redirectUri to pass to integrationSlackProjectPost
         * @param service - required service to pass to integrationSlackProjectPost
         * @returns parsed response from IntegrationSlackProjectPostMutation
         */
        fetch(code, projectId, redirectUri, service) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackProjectPostDocument, {
                    code,
                    projectId,
                    redirectUri,
                    service,
                });
                const data = response.integrationSlackProjectPost;
                return new SlackChannelConnectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateIntegrationTemplate Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateIntegrationTemplateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateIntegrationTemplate mutation and return a IntegrationTemplatePayload
         *
         * @param input - required input to pass to createIntegrationTemplate
         * @returns parsed response from CreateIntegrationTemplateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateIntegrationTemplateDocument, {
                    input,
                });
                const data = response.integrationTemplateCreate;
                return new IntegrationTemplatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteIntegrationTemplate Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteIntegrationTemplateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteIntegrationTemplate mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteIntegrationTemplate
         * @returns parsed response from DeleteIntegrationTemplateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteIntegrationTemplateDocument, {
                    id,
                });
                const data = response.integrationTemplateDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationZendesk Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationZendeskMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationZendesk mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationZendesk
         * @param redirectUri - required redirectUri to pass to integrationZendesk
         * @param scope - required scope to pass to integrationZendesk
         * @param subdomain - required subdomain to pass to integrationZendesk
         * @returns parsed response from IntegrationZendeskMutation
         */
        fetch(code, redirectUri, scope, subdomain) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationZendeskDocument, {
                    code,
                    redirectUri,
                    scope,
                    subdomain,
                });
                const data = response.integrationZendesk;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateIntegrationsSettings Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateIntegrationsSettingsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateIntegrationsSettings mutation and return a IntegrationsSettingsPayload
         *
         * @param input - required input to pass to createIntegrationsSettings
         * @returns parsed response from CreateIntegrationsSettingsMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateIntegrationsSettingsDocument, {
                    input,
                });
                const data = response.integrationsSettingsCreate;
                return new IntegrationsSettingsPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateIntegrationsSettings Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateIntegrationsSettingsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateIntegrationsSettings mutation and return a IntegrationsSettingsPayload
         *
         * @param id - required id to pass to updateIntegrationsSettings
         * @param input - required input to pass to updateIntegrationsSettings
         * @returns parsed response from UpdateIntegrationsSettingsMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateIntegrationsSettingsDocument, {
                    id,
                    input,
                });
                const data = response.integrationsSettingsUpdate;
                return new IntegrationsSettingsPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueAddLabel Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueAddLabelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueAddLabel mutation and return a IssuePayload
         *
         * @param id - required id to pass to issueAddLabel
         * @param labelId - required labelId to pass to issueAddLabel
         * @returns parsed response from IssueAddLabelMutation
         */
        fetch(id, labelId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueAddLabelDocument, {
                    id,
                    labelId,
                });
                const data = response.issueAddLabel;
                return new IssuePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveIssue Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveIssueMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveIssue mutation and return a IssueArchivePayload
         *
         * @param id - required id to pass to archiveIssue
         * @param variables - variables without 'id' to pass into the ArchiveIssueMutation
         * @returns parsed response from ArchiveIssueMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveIssueDocument, Object.assign({ id }, variables));
                const data = response.issueArchive;
                return new IssueArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateIssueBatch Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateIssueBatchMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateIssueBatch mutation and return a IssueBatchPayload
         *
         * @param ids - required ids to pass to updateIssueBatch
         * @param input - required input to pass to updateIssueBatch
         * @returns parsed response from UpdateIssueBatchMutation
         */
        fetch(ids, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateIssueBatchDocument, {
                    ids,
                    input,
                });
                const data = response.issueBatchUpdate;
                return new IssueBatchPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateIssue Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateIssueMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateIssue mutation and return a IssuePayload
         *
         * @param input - required input to pass to createIssue
         * @returns parsed response from CreateIssueMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateIssueDocument, {
                    input,
                });
                const data = response.issueCreate;
                return new IssuePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteIssue Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteIssueMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteIssue mutation and return a IssueArchivePayload
         *
         * @param id - required id to pass to deleteIssue
         * @param variables - variables without 'id' to pass into the DeleteIssueMutation
         * @returns parsed response from DeleteIssueMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteIssueDocument, Object.assign({ id }, variables));
                const data = response.issueDelete;
                return new IssueArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveIssueDraft Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveIssueDraftMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveIssueDraft mutation and return a IssueDraftArchivePayload
         *
         * @param id - required id to pass to archiveIssueDraft
         * @returns parsed response from ArchiveIssueDraftMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveIssueDraftDocument, {
                    id,
                });
                const data = response.issueDraftArchive;
                return new IssueDraftArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateIssueDraft Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateIssueDraftMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateIssueDraft mutation and return a IssueDraftPayload
         *
         * @param input - required input to pass to createIssueDraft
         * @returns parsed response from CreateIssueDraftMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateIssueDraftDocument, {
                    input,
                });
                const data = response.issueDraftCreate;
                return new IssueDraftPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteIssueDraft Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteIssueDraftMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteIssueDraft mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteIssueDraft
         * @returns parsed response from DeleteIssueDraftMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteIssueDraftDocument, {
                    id,
                });
                const data = response.issueDraftDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateIssueDraft Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateIssueDraftMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateIssueDraft mutation and return a IssueDraftPayload
         *
         * @param id - required id to pass to updateIssueDraft
         * @param input - required input to pass to updateIssueDraft
         * @returns parsed response from UpdateIssueDraftMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateIssueDraftDocument, {
                    id,
                    input,
                });
                const data = response.issueDraftUpdate;
                return new IssueDraftPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportCreateAsana Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCreateAsanaMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCreateAsana mutation and return a IssueImportPayload
         *
         * @param asanaTeamName - required asanaTeamName to pass to issueImportCreateAsana
         * @param asanaToken - required asanaToken to pass to issueImportCreateAsana
         * @param variables - variables without 'asanaTeamName', 'asanaToken' to pass into the IssueImportCreateAsanaMutation
         * @returns parsed response from IssueImportCreateAsanaMutation
         */
        fetch(asanaTeamName, asanaToken, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportCreateAsanaDocument, Object.assign({ asanaTeamName,
                    asanaToken }, variables));
                const data = response.issueImportCreateAsana;
                return new IssueImportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportCreateCsvJira Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCreateCsvJiraMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCreateCsvJira mutation and return a IssueImportPayload
         *
         * @param csvUrl - required csvUrl to pass to issueImportCreateCSVJira
         * @param variables - variables without 'csvUrl' to pass into the IssueImportCreateCsvJiraMutation
         * @returns parsed response from IssueImportCreateCsvJiraMutation
         */
        fetch(csvUrl, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportCreateCsvJiraDocument, Object.assign({ csvUrl }, variables));
                const data = response.issueImportCreateCSVJira;
                return new IssueImportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportCreateClubhouse Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCreateClubhouseMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCreateClubhouse mutation and return a IssueImportPayload
         *
         * @param clubhouseGroupName - required clubhouseGroupName to pass to issueImportCreateClubhouse
         * @param clubhouseToken - required clubhouseToken to pass to issueImportCreateClubhouse
         * @param variables - variables without 'clubhouseGroupName', 'clubhouseToken' to pass into the IssueImportCreateClubhouseMutation
         * @returns parsed response from IssueImportCreateClubhouseMutation
         */
        fetch(clubhouseGroupName, clubhouseToken, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportCreateClubhouseDocument, Object.assign({ clubhouseGroupName,
                    clubhouseToken }, variables));
                const data = response.issueImportCreateClubhouse;
                return new IssueImportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportCreateGithub Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCreateGithubMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCreateGithub mutation and return a IssueImportPayload
         *
         * @param variables - variables to pass into the IssueImportCreateGithubMutation
         * @returns parsed response from IssueImportCreateGithubMutation
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportCreateGithubDocument, variables);
                const data = response.issueImportCreateGithub;
                return new IssueImportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportCreateJira Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCreateJiraMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCreateJira mutation and return a IssueImportPayload
         *
         * @param jiraEmail - required jiraEmail to pass to issueImportCreateJira
         * @param jiraHostname - required jiraHostname to pass to issueImportCreateJira
         * @param jiraProject - required jiraProject to pass to issueImportCreateJira
         * @param jiraToken - required jiraToken to pass to issueImportCreateJira
         * @param variables - variables without 'jiraEmail', 'jiraHostname', 'jiraProject', 'jiraToken' to pass into the IssueImportCreateJiraMutation
         * @returns parsed response from IssueImportCreateJiraMutation
         */
        fetch(jiraEmail, jiraHostname, jiraProject, jiraToken, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportCreateJiraDocument, Object.assign({ jiraEmail,
                    jiraHostname,
                    jiraProject,
                    jiraToken }, variables));
                const data = response.issueImportCreateJira;
                return new IssueImportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteIssueImport Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteIssueImportMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteIssueImport mutation and return a IssueImportDeletePayload
         *
         * @param issueImportId - required issueImportId to pass to deleteIssueImport
         * @returns parsed response from DeleteIssueImportMutation
         */
        fetch(issueImportId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteIssueImportDocument, {
                    issueImportId,
                });
                const data = response.issueImportDelete;
                return new IssueImportDeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportProcess Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportProcessMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportProcess mutation and return a IssueImportPayload
         *
         * @param issueImportId - required issueImportId to pass to issueImportProcess
         * @param mapping - required mapping to pass to issueImportProcess
         * @returns parsed response from IssueImportProcessMutation
         */
        fetch(issueImportId, mapping) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportProcessDocument, {
                    issueImportId,
                    mapping,
                });
                const data = response.issueImportProcess;
                return new IssueImportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateIssueImport Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateIssueImportMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateIssueImport mutation and return a IssueImportPayload
         *
         * @param id - required id to pass to updateIssueImport
         * @param input - required input to pass to updateIssueImport
         * @returns parsed response from UpdateIssueImportMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateIssueImportDocument, {
                    id,
                    input,
                });
                const data = response.issueImportUpdate;
                return new IssueImportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateIssueLabel Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateIssueLabelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateIssueLabel mutation and return a IssueLabelPayload
         *
         * @param input - required input to pass to createIssueLabel
         * @param variables - variables without 'input' to pass into the CreateIssueLabelMutation
         * @returns parsed response from CreateIssueLabelMutation
         */
        fetch(input, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateIssueLabelDocument, Object.assign({ input }, variables));
                const data = response.issueLabelCreate;
                return new IssueLabelPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteIssueLabel Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteIssueLabelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteIssueLabel mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteIssueLabel
         * @returns parsed response from DeleteIssueLabelMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteIssueLabelDocument, {
                    id,
                });
                const data = response.issueLabelDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateIssueLabel Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateIssueLabelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateIssueLabel mutation and return a IssueLabelPayload
         *
         * @param id - required id to pass to updateIssueLabel
         * @param input - required input to pass to updateIssueLabel
         * @param variables - variables without 'id', 'input' to pass into the UpdateIssueLabelMutation
         * @returns parsed response from UpdateIssueLabelMutation
         */
        fetch(id, input, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateIssueLabelDocument, Object.assign({ id,
                    input }, variables));
                const data = response.issueLabelUpdate;
                return new IssueLabelPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateIssueRelation Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateIssueRelationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateIssueRelation mutation and return a IssueRelationPayload
         *
         * @param input - required input to pass to createIssueRelation
         * @param variables - variables without 'input' to pass into the CreateIssueRelationMutation
         * @returns parsed response from CreateIssueRelationMutation
         */
        fetch(input, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateIssueRelationDocument, Object.assign({ input }, variables));
                const data = response.issueRelationCreate;
                return new IssueRelationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteIssueRelation Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteIssueRelationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteIssueRelation mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteIssueRelation
         * @returns parsed response from DeleteIssueRelationMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteIssueRelationDocument, {
                    id,
                });
                const data = response.issueRelationDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateIssueRelation Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateIssueRelationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateIssueRelation mutation and return a IssueRelationPayload
         *
         * @param id - required id to pass to updateIssueRelation
         * @param input - required input to pass to updateIssueRelation
         * @returns parsed response from UpdateIssueRelationMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateIssueRelationDocument, {
                    id,
                    input,
                });
                const data = response.issueRelationUpdate;
                return new IssueRelationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueReminder Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueReminderMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueReminder mutation and return a IssuePayload
         *
         * @param id - required id to pass to issueReminder
         * @param reminderAt - required reminderAt to pass to issueReminder
         * @returns parsed response from IssueReminderMutation
         */
        fetch(id, reminderAt) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueReminderDocument, {
                    id,
                    reminderAt,
                });
                const data = response.issueReminder;
                return new IssuePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueRemoveLabel Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueRemoveLabelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueRemoveLabel mutation and return a IssuePayload
         *
         * @param id - required id to pass to issueRemoveLabel
         * @param labelId - required labelId to pass to issueRemoveLabel
         * @returns parsed response from IssueRemoveLabelMutation
         */
        fetch(id, labelId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueRemoveLabelDocument, {
                    id,
                    labelId,
                });
                const data = response.issueRemoveLabel;
                return new IssuePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueSubscribe Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueSubscribeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueSubscribe mutation and return a IssuePayload
         *
         * @param id - required id to pass to issueSubscribe
         * @param variables - variables without 'id' to pass into the IssueSubscribeMutation
         * @returns parsed response from IssueSubscribeMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueSubscribeDocument, Object.assign({ id }, variables));
                const data = response.issueSubscribe;
                return new IssuePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveIssue Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveIssueMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveIssue mutation and return a IssueArchivePayload
         *
         * @param id - required id to pass to unarchiveIssue
         * @returns parsed response from UnarchiveIssueMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveIssueDocument, {
                    id,
                });
                const data = response.issueUnarchive;
                return new IssueArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueUnsubscribe Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueUnsubscribeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueUnsubscribe mutation and return a IssuePayload
         *
         * @param id - required id to pass to issueUnsubscribe
         * @param variables - variables without 'id' to pass into the IssueUnsubscribeMutation
         * @returns parsed response from IssueUnsubscribeMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueUnsubscribeDocument, Object.assign({ id }, variables));
                const data = response.issueUnsubscribe;
                return new IssuePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateIssue Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateIssueMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateIssue mutation and return a IssuePayload
         *
         * @param id - required id to pass to updateIssue
         * @param input - required input to pass to updateIssue
         * @returns parsed response from UpdateIssueMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateIssueDocument, {
                    id,
                    input,
                });
                const data = response.issueUpdate;
                return new IssuePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable JoinOrganizationFromOnboarding Mutation
     *
     * @param request - function to call the graphql client
     */
    class JoinOrganizationFromOnboardingMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the JoinOrganizationFromOnboarding mutation and return a CreateOrJoinOrganizationResponse
         *
         * @param input - required input to pass to joinOrganizationFromOnboarding
         * @returns parsed response from JoinOrganizationFromOnboardingMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(JoinOrganizationFromOnboardingDocument, {
                    input,
                });
                const data = response.joinOrganizationFromOnboarding;
                return new CreateOrJoinOrganizationResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable LeaveOrganization Mutation
     *
     * @param request - function to call the graphql client
     */
    class LeaveOrganizationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the LeaveOrganization mutation and return a CreateOrJoinOrganizationResponse
         *
         * @param organizationId - required organizationId to pass to leaveOrganization
         * @returns parsed response from LeaveOrganizationMutation
         */
        fetch(organizationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(LeaveOrganizationDocument, {
                    organizationId,
                });
                const data = response.leaveOrganization;
                return new CreateOrJoinOrganizationResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable Logout Mutation
     *
     * @param request - function to call the graphql client
     */
    class LogoutMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Logout mutation and return a LogoutResponse
         *
         * @returns parsed response from LogoutMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(LogoutDocument, {});
                const data = response.logout;
                return new LogoutResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable LogoutAllSessions Mutation
     *
     * @param request - function to call the graphql client
     */
    class LogoutAllSessionsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the LogoutAllSessions mutation and return a LogoutResponse
         *
         * @returns parsed response from LogoutAllSessionsMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(LogoutAllSessionsDocument, {});
                const data = response.logoutAllSessions;
                return new LogoutResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable LogoutOtherSessions Mutation
     *
     * @param request - function to call the graphql client
     */
    class LogoutOtherSessionsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the LogoutOtherSessions mutation and return a LogoutResponse
         *
         * @returns parsed response from LogoutOtherSessionsMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(LogoutOtherSessionsDocument, {});
                const data = response.logoutOtherSessions;
                return new LogoutResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable LogoutSession Mutation
     *
     * @param request - function to call the graphql client
     */
    class LogoutSessionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the LogoutSession mutation and return a LogoutResponse
         *
         * @param sessionId - required sessionId to pass to logoutSession
         * @returns parsed response from LogoutSessionMutation
         */
        fetch(sessionId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(LogoutSessionDocument, {
                    sessionId,
                });
                const data = response.logoutSession;
                return new LogoutResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveNotification Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveNotificationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveNotification mutation and return a NotificationArchivePayload
         *
         * @param id - required id to pass to archiveNotification
         * @returns parsed response from ArchiveNotificationMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveNotificationDocument, {
                    id,
                });
                const data = response.notificationArchive;
                return new NotificationArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable NotificationArchiveAll Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationArchiveAllMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationArchiveAll mutation and return a NotificationBatchActionPayload
         *
         * @param input - required input to pass to notificationArchiveAll
         * @returns parsed response from NotificationArchiveAllMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationArchiveAllDocument, {
                    input,
                });
                const data = response.notificationArchiveAll;
                return new NotificationBatchActionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable NotificationMarkReadAll Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationMarkReadAllMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationMarkReadAll mutation and return a NotificationBatchActionPayload
         *
         * @param input - required input to pass to notificationMarkReadAll
         * @param readAt - required readAt to pass to notificationMarkReadAll
         * @returns parsed response from NotificationMarkReadAllMutation
         */
        fetch(input, readAt) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationMarkReadAllDocument, {
                    input,
                    readAt,
                });
                const data = response.notificationMarkReadAll;
                return new NotificationBatchActionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable NotificationMarkUnreadAll Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationMarkUnreadAllMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationMarkUnreadAll mutation and return a NotificationBatchActionPayload
         *
         * @param input - required input to pass to notificationMarkUnreadAll
         * @returns parsed response from NotificationMarkUnreadAllMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationMarkUnreadAllDocument, {
                    input,
                });
                const data = response.notificationMarkUnreadAll;
                return new NotificationBatchActionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable NotificationSnoozeAll Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationSnoozeAllMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationSnoozeAll mutation and return a NotificationBatchActionPayload
         *
         * @param input - required input to pass to notificationSnoozeAll
         * @param snoozedUntilAt - required snoozedUntilAt to pass to notificationSnoozeAll
         * @returns parsed response from NotificationSnoozeAllMutation
         */
        fetch(input, snoozedUntilAt) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationSnoozeAllDocument, {
                    input,
                    snoozedUntilAt,
                });
                const data = response.notificationSnoozeAll;
                return new NotificationBatchActionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateNotificationSubscription Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateNotificationSubscriptionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateNotificationSubscription mutation and return a NotificationSubscriptionPayload
         *
         * @param input - required input to pass to createNotificationSubscription
         * @returns parsed response from CreateNotificationSubscriptionMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateNotificationSubscriptionDocument, {
                    input,
                });
                const data = response.notificationSubscriptionCreate;
                return new NotificationSubscriptionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteNotificationSubscription Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteNotificationSubscriptionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteNotificationSubscription mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteNotificationSubscription
         * @returns parsed response from DeleteNotificationSubscriptionMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteNotificationSubscriptionDocument, {
                    id,
                });
                const data = response.notificationSubscriptionDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateNotificationSubscription Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateNotificationSubscriptionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateNotificationSubscription mutation and return a NotificationSubscriptionPayload
         *
         * @param id - required id to pass to updateNotificationSubscription
         * @param input - required input to pass to updateNotificationSubscription
         * @returns parsed response from UpdateNotificationSubscriptionMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateNotificationSubscriptionDocument, {
                    id,
                    input,
                });
                const data = response.notificationSubscriptionUpdate;
                return new NotificationSubscriptionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveNotification Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveNotificationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveNotification mutation and return a NotificationArchivePayload
         *
         * @param id - required id to pass to unarchiveNotification
         * @returns parsed response from UnarchiveNotificationMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveNotificationDocument, {
                    id,
                });
                const data = response.notificationUnarchive;
                return new NotificationArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable NotificationUnsnoozeAll Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationUnsnoozeAllMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationUnsnoozeAll mutation and return a NotificationBatchActionPayload
         *
         * @param input - required input to pass to notificationUnsnoozeAll
         * @param unsnoozedAt - required unsnoozedAt to pass to notificationUnsnoozeAll
         * @returns parsed response from NotificationUnsnoozeAllMutation
         */
        fetch(input, unsnoozedAt) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationUnsnoozeAllDocument, {
                    input,
                    unsnoozedAt,
                });
                const data = response.notificationUnsnoozeAll;
                return new NotificationBatchActionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateNotification Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateNotificationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateNotification mutation and return a NotificationPayload
         *
         * @param id - required id to pass to updateNotification
         * @param input - required input to pass to updateNotification
         * @returns parsed response from UpdateNotificationMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateNotificationDocument, {
                    id,
                    input,
                });
                const data = response.notificationUpdate;
                return new NotificationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteOrganizationCancel Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteOrganizationCancelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteOrganizationCancel mutation and return a OrganizationCancelDeletePayload
         *
         * @returns parsed response from DeleteOrganizationCancelMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteOrganizationCancelDocument, {});
                const data = response.organizationCancelDelete;
                return new OrganizationCancelDeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteOrganization Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteOrganizationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteOrganization mutation and return a OrganizationDeletePayload
         *
         * @param input - required input to pass to deleteOrganization
         * @returns parsed response from DeleteOrganizationMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteOrganizationDocument, {
                    input,
                });
                const data = response.organizationDelete;
                return new OrganizationDeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable OrganizationDeleteChallenge Mutation
     *
     * @param request - function to call the graphql client
     */
    class OrganizationDeleteChallengeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationDeleteChallenge mutation and return a OrganizationDeletePayload
         *
         * @returns parsed response from OrganizationDeleteChallengeMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(OrganizationDeleteChallengeDocument, {});
                const data = response.organizationDeleteChallenge;
                return new OrganizationDeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteOrganizationDomain Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteOrganizationDomainMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteOrganizationDomain mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteOrganizationDomain
         * @returns parsed response from DeleteOrganizationDomainMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteOrganizationDomainDocument, {
                    id,
                });
                const data = response.organizationDomainDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateOrganizationInvite Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateOrganizationInviteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateOrganizationInvite mutation and return a OrganizationInvitePayload
         *
         * @param input - required input to pass to createOrganizationInvite
         * @returns parsed response from CreateOrganizationInviteMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateOrganizationInviteDocument, {
                    input,
                });
                const data = response.organizationInviteCreate;
                return new OrganizationInvitePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteOrganizationInvite Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteOrganizationInviteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteOrganizationInvite mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteOrganizationInvite
         * @returns parsed response from DeleteOrganizationInviteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteOrganizationInviteDocument, {
                    id,
                });
                const data = response.organizationInviteDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateOrganizationInvite Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateOrganizationInviteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateOrganizationInvite mutation and return a OrganizationInvitePayload
         *
         * @param id - required id to pass to updateOrganizationInvite
         * @param input - required input to pass to updateOrganizationInvite
         * @returns parsed response from UpdateOrganizationInviteMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateOrganizationInviteDocument, {
                    id,
                    input,
                });
                const data = response.organizationInviteUpdate;
                return new OrganizationInvitePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable OrganizationStartTrial Mutation
     *
     * @param request - function to call the graphql client
     */
    class OrganizationStartTrialMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationStartTrial mutation and return a OrganizationStartTrialPayload
         *
         * @returns parsed response from OrganizationStartTrialMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(OrganizationStartTrialDocument, {});
                const data = response.organizationStartTrial;
                return new OrganizationStartTrialPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateOrganization Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateOrganizationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateOrganization mutation and return a OrganizationPayload
         *
         * @param input - required input to pass to updateOrganization
         * @returns parsed response from UpdateOrganizationMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateOrganizationDocument, {
                    input,
                });
                const data = response.organizationUpdate;
                return new OrganizationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveProject mutation and return a ProjectArchivePayload
         *
         * @param id - required id to pass to archiveProject
         * @param variables - variables without 'id' to pass into the ArchiveProjectMutation
         * @returns parsed response from ArchiveProjectMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveProjectDocument, Object.assign({ id }, variables));
                const data = response.projectArchive;
                return new ProjectArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateProject mutation and return a ProjectPayload
         *
         * @param input - required input to pass to createProject
         * @param variables - variables without 'input' to pass into the CreateProjectMutation
         * @returns parsed response from CreateProjectMutation
         */
        fetch(input, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateProjectDocument, Object.assign({ input }, variables));
                const data = response.projectCreate;
                return new ProjectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteProject mutation and return a ProjectArchivePayload
         *
         * @param id - required id to pass to deleteProject
         * @returns parsed response from DeleteProjectMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteProjectDocument, {
                    id,
                });
                const data = response.projectDelete;
                return new ProjectArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateProjectLink Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateProjectLinkMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateProjectLink mutation and return a ProjectLinkPayload
         *
         * @param input - required input to pass to createProjectLink
         * @returns parsed response from CreateProjectLinkMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateProjectLinkDocument, {
                    input,
                });
                const data = response.projectLinkCreate;
                return new ProjectLinkPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteProjectLink Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteProjectLinkMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteProjectLink mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteProjectLink
         * @returns parsed response from DeleteProjectLinkMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteProjectLinkDocument, {
                    id,
                });
                const data = response.projectLinkDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateProjectLink Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateProjectLinkMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateProjectLink mutation and return a ProjectLinkPayload
         *
         * @param id - required id to pass to updateProjectLink
         * @param input - required input to pass to updateProjectLink
         * @returns parsed response from UpdateProjectLinkMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateProjectLinkDocument, {
                    id,
                    input,
                });
                const data = response.projectLinkUpdate;
                return new ProjectLinkPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateProjectMilestone Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateProjectMilestoneMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateProjectMilestone mutation and return a ProjectMilestonePayload
         *
         * @param input - required input to pass to createProjectMilestone
         * @returns parsed response from CreateProjectMilestoneMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateProjectMilestoneDocument, {
                    input,
                });
                const data = response.projectMilestoneCreate;
                return new ProjectMilestonePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteProjectMilestone Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteProjectMilestoneMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteProjectMilestone mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteProjectMilestone
         * @returns parsed response from DeleteProjectMilestoneMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteProjectMilestoneDocument, {
                    id,
                });
                const data = response.projectMilestoneDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateProjectMilestone Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateProjectMilestoneMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateProjectMilestone mutation and return a ProjectMilestonePayload
         *
         * @param id - required id to pass to updateProjectMilestone
         * @param input - required input to pass to updateProjectMilestone
         * @returns parsed response from UpdateProjectMilestoneMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateProjectMilestoneDocument, {
                    id,
                    input,
                });
                const data = response.projectMilestoneUpdate;
                return new ProjectMilestonePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveProjectStatus Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveProjectStatusMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveProjectStatus mutation and return a ProjectStatusArchivePayload
         *
         * @param id - required id to pass to archiveProjectStatus
         * @returns parsed response from ArchiveProjectStatusMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveProjectStatusDocument, {
                    id,
                });
                const data = response.projectStatusArchive;
                return new ProjectStatusArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateProjectStatus Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateProjectStatusMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateProjectStatus mutation and return a ProjectStatusPayload
         *
         * @param input - required input to pass to createProjectStatus
         * @returns parsed response from CreateProjectStatusMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateProjectStatusDocument, {
                    input,
                });
                const data = response.projectStatusCreate;
                return new ProjectStatusPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveProjectStatus Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveProjectStatusMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveProjectStatus mutation and return a ProjectStatusArchivePayload
         *
         * @param id - required id to pass to unarchiveProjectStatus
         * @returns parsed response from UnarchiveProjectStatusMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveProjectStatusDocument, {
                    id,
                });
                const data = response.projectStatusUnarchive;
                return new ProjectStatusArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateProjectStatus Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateProjectStatusMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateProjectStatus mutation and return a ProjectStatusPayload
         *
         * @param id - required id to pass to updateProjectStatus
         * @param input - required input to pass to updateProjectStatus
         * @returns parsed response from UpdateProjectStatusMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateProjectStatusDocument, {
                    id,
                    input,
                });
                const data = response.projectStatusUpdate;
                return new ProjectStatusPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveProject mutation and return a ProjectArchivePayload
         *
         * @param id - required id to pass to unarchiveProject
         * @returns parsed response from UnarchiveProjectMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveProjectDocument, {
                    id,
                });
                const data = response.projectUnarchive;
                return new ProjectArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateProject mutation and return a ProjectPayload
         *
         * @param id - required id to pass to updateProject
         * @param input - required input to pass to updateProject
         * @returns parsed response from UpdateProjectMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateProjectDocument, {
                    id,
                    input,
                });
                const data = response.projectUpdate;
                return new ProjectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateProjectUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateProjectUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateProjectUpdate mutation and return a ProjectUpdatePayload
         *
         * @param input - required input to pass to createProjectUpdate
         * @returns parsed response from CreateProjectUpdateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateProjectUpdateDocument, {
                    input,
                });
                const data = response.projectUpdateCreate;
                return new ProjectUpdatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteProjectUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteProjectUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteProjectUpdate mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteProjectUpdate
         * @returns parsed response from DeleteProjectUpdateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteProjectUpdateDocument, {
                    id,
                });
                const data = response.projectUpdateDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateProjectUpdateInteraction Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateProjectUpdateInteractionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateProjectUpdateInteraction mutation and return a ProjectUpdateInteractionPayload
         *
         * @param input - required input to pass to createProjectUpdateInteraction
         * @returns parsed response from CreateProjectUpdateInteractionMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateProjectUpdateInteractionDocument, {
                    input,
                });
                const data = response.projectUpdateInteractionCreate;
                return new ProjectUpdateInteractionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectUpdateMarkAsRead Mutation
     *
     * @param request - function to call the graphql client
     */
    class ProjectUpdateMarkAsReadMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectUpdateMarkAsRead mutation and return a ProjectUpdateWithInteractionPayload
         *
         * @param id - required id to pass to projectUpdateMarkAsRead
         * @returns parsed response from ProjectUpdateMarkAsReadMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectUpdateMarkAsReadDocument, {
                    id,
                });
                const data = response.projectUpdateMarkAsRead;
                return new ProjectUpdateWithInteractionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateProjectUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateProjectUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateProjectUpdate mutation and return a ProjectUpdatePayload
         *
         * @param id - required id to pass to updateProjectUpdate
         * @param input - required input to pass to updateProjectUpdate
         * @returns parsed response from UpdateProjectUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateProjectUpdateDocument, {
                    id,
                    input,
                });
                const data = response.projectUpdateUpdate;
                return new ProjectUpdatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreatePushSubscription Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreatePushSubscriptionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreatePushSubscription mutation and return a PushSubscriptionPayload
         *
         * @param input - required input to pass to createPushSubscription
         * @returns parsed response from CreatePushSubscriptionMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreatePushSubscriptionDocument, {
                    input,
                });
                const data = response.pushSubscriptionCreate;
                return new PushSubscriptionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeletePushSubscription Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeletePushSubscriptionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeletePushSubscription mutation and return a PushSubscriptionPayload
         *
         * @param id - required id to pass to deletePushSubscription
         * @returns parsed response from DeletePushSubscriptionMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeletePushSubscriptionDocument, {
                    id,
                });
                const data = response.pushSubscriptionDelete;
                return new PushSubscriptionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateReaction Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateReactionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateReaction mutation and return a ReactionPayload
         *
         * @param input - required input to pass to createReaction
         * @returns parsed response from CreateReactionMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateReactionDocument, {
                    input,
                });
                const data = response.reactionCreate;
                return new ReactionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteReaction Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteReactionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteReaction mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteReaction
         * @returns parsed response from DeleteReactionMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteReactionDocument, {
                    id,
                });
                const data = response.reactionDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable RefreshGoogleSheetsData Mutation
     *
     * @param request - function to call the graphql client
     */
    class RefreshGoogleSheetsDataMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the RefreshGoogleSheetsData mutation and return a IntegrationPayload
         *
         * @param id - required id to pass to refreshGoogleSheetsData
         * @returns parsed response from RefreshGoogleSheetsDataMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(RefreshGoogleSheetsDataDocument, {
                    id,
                });
                const data = response.refreshGoogleSheetsData;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ResendOrganizationInvite Mutation
     *
     * @param request - function to call the graphql client
     */
    class ResendOrganizationInviteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ResendOrganizationInvite mutation and return a DeletePayload
         *
         * @param id - required id to pass to resendOrganizationInvite
         * @returns parsed response from ResendOrganizationInviteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ResendOrganizationInviteDocument, {
                    id,
                });
                const data = response.resendOrganizationInvite;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveRoadmap Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveRoadmapMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveRoadmap mutation and return a RoadmapArchivePayload
         *
         * @param id - required id to pass to archiveRoadmap
         * @returns parsed response from ArchiveRoadmapMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveRoadmapDocument, {
                    id,
                });
                const data = response.roadmapArchive;
                return new RoadmapArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateRoadmap Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateRoadmapMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateRoadmap mutation and return a RoadmapPayload
         *
         * @param input - required input to pass to createRoadmap
         * @returns parsed response from CreateRoadmapMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateRoadmapDocument, {
                    input,
                });
                const data = response.roadmapCreate;
                return new RoadmapPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteRoadmap Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteRoadmapMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteRoadmap mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteRoadmap
         * @returns parsed response from DeleteRoadmapMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteRoadmapDocument, {
                    id,
                });
                const data = response.roadmapDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateRoadmapToProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateRoadmapToProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateRoadmapToProject mutation and return a RoadmapToProjectPayload
         *
         * @param input - required input to pass to createRoadmapToProject
         * @returns parsed response from CreateRoadmapToProjectMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateRoadmapToProjectDocument, {
                    input,
                });
                const data = response.roadmapToProjectCreate;
                return new RoadmapToProjectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteRoadmapToProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteRoadmapToProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteRoadmapToProject mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteRoadmapToProject
         * @returns parsed response from DeleteRoadmapToProjectMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteRoadmapToProjectDocument, {
                    id,
                });
                const data = response.roadmapToProjectDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateRoadmapToProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateRoadmapToProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateRoadmapToProject mutation and return a RoadmapToProjectPayload
         *
         * @param id - required id to pass to updateRoadmapToProject
         * @param input - required input to pass to updateRoadmapToProject
         * @returns parsed response from UpdateRoadmapToProjectMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateRoadmapToProjectDocument, {
                    id,
                    input,
                });
                const data = response.roadmapToProjectUpdate;
                return new RoadmapToProjectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveRoadmap Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveRoadmapMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveRoadmap mutation and return a RoadmapArchivePayload
         *
         * @param id - required id to pass to unarchiveRoadmap
         * @returns parsed response from UnarchiveRoadmapMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveRoadmapDocument, {
                    id,
                });
                const data = response.roadmapUnarchive;
                return new RoadmapArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateRoadmap Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateRoadmapMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateRoadmap mutation and return a RoadmapPayload
         *
         * @param id - required id to pass to updateRoadmap
         * @param input - required input to pass to updateRoadmap
         * @returns parsed response from UpdateRoadmapMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateRoadmapDocument, {
                    id,
                    input,
                });
                const data = response.roadmapUpdate;
                return new RoadmapPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable SamlTokenUserAccountAuth Mutation
     *
     * @param request - function to call the graphql client
     */
    class SamlTokenUserAccountAuthMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SamlTokenUserAccountAuth mutation and return a AuthResolverResponse
         *
         * @param input - required input to pass to samlTokenUserAccountAuth
         * @returns parsed response from SamlTokenUserAccountAuthMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SamlTokenUserAccountAuthDocument, {
                    input,
                });
                const data = response.samlTokenUserAccountAuth;
                return new AuthResolverResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateTeam Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateTeamMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateTeam mutation and return a TeamPayload
         *
         * @param input - required input to pass to createTeam
         * @param variables - variables without 'input' to pass into the CreateTeamMutation
         * @returns parsed response from CreateTeamMutation
         */
        fetch(input, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateTeamDocument, Object.assign({ input }, variables));
                const data = response.teamCreate;
                return new TeamPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteTeamCycles Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteTeamCyclesMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteTeamCycles mutation and return a TeamPayload
         *
         * @param id - required id to pass to deleteTeamCycles
         * @returns parsed response from DeleteTeamCyclesMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteTeamCyclesDocument, {
                    id,
                });
                const data = response.teamCyclesDelete;
                return new TeamPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteTeam Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteTeamMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteTeam mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteTeam
         * @returns parsed response from DeleteTeamMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteTeamDocument, {
                    id,
                });
                const data = response.teamDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteTeamKey Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteTeamKeyMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteTeamKey mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteTeamKey
         * @returns parsed response from DeleteTeamKeyMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteTeamKeyDocument, {
                    id,
                });
                const data = response.teamKeyDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateTeamMembership Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateTeamMembershipMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateTeamMembership mutation and return a TeamMembershipPayload
         *
         * @param input - required input to pass to createTeamMembership
         * @returns parsed response from CreateTeamMembershipMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateTeamMembershipDocument, {
                    input,
                });
                const data = response.teamMembershipCreate;
                return new TeamMembershipPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteTeamMembership Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteTeamMembershipMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteTeamMembership mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteTeamMembership
         * @returns parsed response from DeleteTeamMembershipMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteTeamMembershipDocument, {
                    id,
                });
                const data = response.teamMembershipDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateTeamMembership Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateTeamMembershipMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateTeamMembership mutation and return a TeamMembershipPayload
         *
         * @param id - required id to pass to updateTeamMembership
         * @param input - required input to pass to updateTeamMembership
         * @returns parsed response from UpdateTeamMembershipMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateTeamMembershipDocument, {
                    id,
                    input,
                });
                const data = response.teamMembershipUpdate;
                return new TeamMembershipPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveTeam Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveTeamMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveTeam mutation and return a TeamArchivePayload
         *
         * @param id - required id to pass to unarchiveTeam
         * @returns parsed response from UnarchiveTeamMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveTeamDocument, {
                    id,
                });
                const data = response.teamUnarchive;
                return new TeamArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateTeam Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateTeamMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateTeam mutation and return a TeamPayload
         *
         * @param id - required id to pass to updateTeam
         * @param input - required input to pass to updateTeam
         * @returns parsed response from UpdateTeamMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateTeamDocument, {
                    id,
                    input,
                });
                const data = response.teamUpdate;
                return new TeamPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateTemplate Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateTemplateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateTemplate mutation and return a TemplatePayload
         *
         * @param input - required input to pass to createTemplate
         * @returns parsed response from CreateTemplateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateTemplateDocument, {
                    input,
                });
                const data = response.templateCreate;
                return new TemplatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteTemplate Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteTemplateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteTemplate mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteTemplate
         * @returns parsed response from DeleteTemplateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteTemplateDocument, {
                    id,
                });
                const data = response.templateDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateTemplate Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateTemplateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateTemplate mutation and return a TemplatePayload
         *
         * @param id - required id to pass to updateTemplate
         * @param input - required input to pass to updateTemplate
         * @returns parsed response from UpdateTemplateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateTemplateDocument, {
                    id,
                    input,
                });
                const data = response.templateUpdate;
                return new TemplatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateTimeSchedule Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateTimeScheduleMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateTimeSchedule mutation and return a TimeSchedulePayload
         *
         * @param input - required input to pass to createTimeSchedule
         * @returns parsed response from CreateTimeScheduleMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateTimeScheduleDocument, {
                    input,
                });
                const data = response.timeScheduleCreate;
                return new TimeSchedulePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteTimeSchedule Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteTimeScheduleMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteTimeSchedule mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteTimeSchedule
         * @returns parsed response from DeleteTimeScheduleMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteTimeScheduleDocument, {
                    id,
                });
                const data = response.timeScheduleDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable TimeScheduleRefreshIntegrationSchedule Mutation
     *
     * @param request - function to call the graphql client
     */
    class TimeScheduleRefreshIntegrationScheduleMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TimeScheduleRefreshIntegrationSchedule mutation and return a TimeSchedulePayload
         *
         * @param id - required id to pass to timeScheduleRefreshIntegrationSchedule
         * @returns parsed response from TimeScheduleRefreshIntegrationScheduleMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TimeScheduleRefreshIntegrationScheduleDocument, {
                    id,
                });
                const data = response.timeScheduleRefreshIntegrationSchedule;
                return new TimeSchedulePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateTimeSchedule Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateTimeScheduleMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateTimeSchedule mutation and return a TimeSchedulePayload
         *
         * @param id - required id to pass to updateTimeSchedule
         * @param input - required input to pass to updateTimeSchedule
         * @returns parsed response from UpdateTimeScheduleMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateTimeScheduleDocument, {
                    id,
                    input,
                });
                const data = response.timeScheduleUpdate;
                return new TimeSchedulePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable TimeScheduleUpsertExternal Mutation
     *
     * @param request - function to call the graphql client
     */
    class TimeScheduleUpsertExternalMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TimeScheduleUpsertExternal mutation and return a TimeSchedulePayload
         *
         * @param externalId - required externalId to pass to timeScheduleUpsertExternal
         * @param input - required input to pass to timeScheduleUpsertExternal
         * @returns parsed response from TimeScheduleUpsertExternalMutation
         */
        fetch(externalId, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TimeScheduleUpsertExternalDocument, {
                    externalId,
                    input,
                });
                const data = response.timeScheduleUpsertExternal;
                return new TimeSchedulePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateTriageResponsibility Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateTriageResponsibilityMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateTriageResponsibility mutation and return a TriageResponsibilityPayload
         *
         * @param input - required input to pass to createTriageResponsibility
         * @returns parsed response from CreateTriageResponsibilityMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateTriageResponsibilityDocument, {
                    input,
                });
                const data = response.triageResponsibilityCreate;
                return new TriageResponsibilityPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteTriageResponsibility Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteTriageResponsibilityMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteTriageResponsibility mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteTriageResponsibility
         * @returns parsed response from DeleteTriageResponsibilityMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteTriageResponsibilityDocument, {
                    id,
                });
                const data = response.triageResponsibilityDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateTriageResponsibility Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateTriageResponsibilityMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateTriageResponsibility mutation and return a TriageResponsibilityPayload
         *
         * @param id - required id to pass to updateTriageResponsibility
         * @param input - required input to pass to updateTriageResponsibility
         * @returns parsed response from UpdateTriageResponsibilityMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateTriageResponsibilityDocument, {
                    id,
                    input,
                });
                const data = response.triageResponsibilityUpdate;
                return new TriageResponsibilityPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserDemoteAdmin Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserDemoteAdminMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserDemoteAdmin mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to userDemoteAdmin
         * @returns parsed response from UserDemoteAdminMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserDemoteAdminDocument, {
                    id,
                });
                const data = response.userDemoteAdmin;
                return new UserAdminPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserDemoteMember Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserDemoteMemberMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserDemoteMember mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to userDemoteMember
         * @returns parsed response from UserDemoteMemberMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserDemoteMemberDocument, {
                    id,
                });
                const data = response.userDemoteMember;
                return new UserAdminPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserDiscordConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserDiscordConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserDiscordConnect mutation and return a UserPayload
         *
         * @param code - required code to pass to userDiscordConnect
         * @param redirectUri - required redirectUri to pass to userDiscordConnect
         * @returns parsed response from UserDiscordConnectMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserDiscordConnectDocument, {
                    code,
                    redirectUri,
                });
                const data = response.userDiscordConnect;
                return new UserPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserExternalUserDisconnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserExternalUserDisconnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserExternalUserDisconnect mutation and return a UserPayload
         *
         * @param service - required service to pass to userExternalUserDisconnect
         * @returns parsed response from UserExternalUserDisconnectMutation
         */
        fetch(service) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserExternalUserDisconnectDocument, {
                    service,
                });
                const data = response.userExternalUserDisconnect;
                return new UserPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateUserFlag Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateUserFlagMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateUserFlag mutation and return a UserSettingsFlagPayload
         *
         * @param flag - required flag to pass to updateUserFlag
         * @param operation - required operation to pass to updateUserFlag
         * @returns parsed response from UpdateUserFlagMutation
         */
        fetch(flag, operation) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateUserFlagDocument, {
                    flag,
                    operation,
                });
                const data = response.userFlagUpdate;
                return new UserSettingsFlagPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserPromoteAdmin Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserPromoteAdminMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserPromoteAdmin mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to userPromoteAdmin
         * @returns parsed response from UserPromoteAdminMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserPromoteAdminDocument, {
                    id,
                });
                const data = response.userPromoteAdmin;
                return new UserAdminPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserPromoteMember Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserPromoteMemberMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserPromoteMember mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to userPromoteMember
         * @returns parsed response from UserPromoteMemberMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserPromoteMemberDocument, {
                    id,
                });
                const data = response.userPromoteMember;
                return new UserAdminPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettingsFlagsReset Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserSettingsFlagsResetMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettingsFlagsReset mutation and return a UserSettingsFlagsResetPayload
         *
         * @param variables - variables to pass into the UserSettingsFlagsResetMutation
         * @returns parsed response from UserSettingsFlagsResetMutation
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettingsFlagsResetDocument, variables);
                const data = response.userSettingsFlagsReset;
                return new UserSettingsFlagsResetPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateUserSettings Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateUserSettingsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateUserSettings mutation and return a UserSettingsPayload
         *
         * @param id - required id to pass to updateUserSettings
         * @param input - required input to pass to updateUserSettings
         * @returns parsed response from UpdateUserSettingsMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateUserSettingsDocument, {
                    id,
                    input,
                });
                const data = response.userSettingsUpdate;
                return new UserSettingsPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable SuspendUser Mutation
     *
     * @param request - function to call the graphql client
     */
    class SuspendUserMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SuspendUser mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to suspendUser
         * @returns parsed response from SuspendUserMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SuspendUserDocument, {
                    id,
                });
                const data = response.userSuspend;
                return new UserAdminPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnsuspendUser Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnsuspendUserMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnsuspendUser mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to unsuspendUser
         * @returns parsed response from UnsuspendUserMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnsuspendUserDocument, {
                    id,
                });
                const data = response.userUnsuspend;
                return new UserAdminPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateUser Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateUserMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateUser mutation and return a UserPayload
         *
         * @param id - required id to pass to updateUser
         * @param input - required input to pass to updateUser
         * @returns parsed response from UpdateUserMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateUserDocument, {
                    id,
                    input,
                });
                const data = response.userUpdate;
                return new UserPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateViewPreferences Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateViewPreferencesMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateViewPreferences mutation and return a ViewPreferencesPayload
         *
         * @param input - required input to pass to createViewPreferences
         * @returns parsed response from CreateViewPreferencesMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateViewPreferencesDocument, {
                    input,
                });
                const data = response.viewPreferencesCreate;
                return new ViewPreferencesPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteViewPreferences Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteViewPreferencesMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteViewPreferences mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteViewPreferences
         * @returns parsed response from DeleteViewPreferencesMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteViewPreferencesDocument, {
                    id,
                });
                const data = response.viewPreferencesDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateViewPreferences Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateViewPreferencesMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateViewPreferences mutation and return a ViewPreferencesPayload
         *
         * @param id - required id to pass to updateViewPreferences
         * @param input - required input to pass to updateViewPreferences
         * @returns parsed response from UpdateViewPreferencesMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateViewPreferencesDocument, {
                    id,
                    input,
                });
                const data = response.viewPreferencesUpdate;
                return new ViewPreferencesPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateWebhook Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateWebhookMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateWebhook mutation and return a WebhookPayload
         *
         * @param input - required input to pass to createWebhook
         * @returns parsed response from CreateWebhookMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateWebhookDocument, {
                    input,
                });
                const data = response.webhookCreate;
                return new WebhookPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteWebhook Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteWebhookMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteWebhook mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteWebhook
         * @returns parsed response from DeleteWebhookMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteWebhookDocument, {
                    id,
                });
                const data = response.webhookDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateWebhook Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateWebhookMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateWebhook mutation and return a WebhookPayload
         *
         * @param id - required id to pass to updateWebhook
         * @param input - required input to pass to updateWebhook
         * @returns parsed response from UpdateWebhookMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateWebhookDocument, {
                    id,
                    input,
                });
                const data = response.webhookUpdate;
                return new WebhookPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveWorkflowState Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveWorkflowStateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveWorkflowState mutation and return a WorkflowStateArchivePayload
         *
         * @param id - required id to pass to archiveWorkflowState
         * @returns parsed response from ArchiveWorkflowStateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveWorkflowStateDocument, {
                    id,
                });
                const data = response.workflowStateArchive;
                return new WorkflowStateArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateWorkflowState Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateWorkflowStateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateWorkflowState mutation and return a WorkflowStatePayload
         *
         * @param input - required input to pass to createWorkflowState
         * @returns parsed response from CreateWorkflowStateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateWorkflowStateDocument, {
                    input,
                });
                const data = response.workflowStateCreate;
                return new WorkflowStatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateWorkflowState Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateWorkflowStateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateWorkflowState mutation and return a WorkflowStatePayload
         *
         * @param id - required id to pass to updateWorkflowState
         * @param input - required input to pass to updateWorkflowState
         * @returns parsed response from UpdateWorkflowStateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateWorkflowStateDocument, {
                    id,
                    input,
                });
                const data = response.workflowStateUpdate;
                return new WorkflowStatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Attachments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_AttachmentsQuery
     */
    class AttachmentIssue_AttachmentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Attachments query and return a AttachmentConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_AttachmentsQuery
         * @returns parsed response from AttachmentIssue_AttachmentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_AttachmentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.attachments;
                return new AttachmentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_BotActor Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     */
    class AttachmentIssue_BotActorQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the AttachmentIssue_BotActor query and return a ActorBot
         *
         * @returns parsed response from AttachmentIssue_BotActorQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_BotActorDocument, {
                    id: this._id,
                });
                const data = response.attachmentIssue.botActor;
                return data ? new ActorBot(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Children Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_ChildrenQuery
     */
    class AttachmentIssue_ChildrenQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Children query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_ChildrenQuery
         * @returns parsed response from AttachmentIssue_ChildrenQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_ChildrenDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.children;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Comments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_CommentsQuery
     */
    class AttachmentIssue_CommentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Comments query and return a CommentConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_CommentsQuery
         * @returns parsed response from AttachmentIssue_CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_CommentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.comments;
                return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_History Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_HistoryQuery
     */
    class AttachmentIssue_HistoryQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_History query and return a IssueHistoryConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_HistoryQuery
         * @returns parsed response from AttachmentIssue_HistoryQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_HistoryDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.history;
                return new IssueHistoryConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_InverseRelations Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_InverseRelationsQuery
     */
    class AttachmentIssue_InverseRelationsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_InverseRelations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_InverseRelationsQuery
         * @returns parsed response from AttachmentIssue_InverseRelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_InverseRelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.inverseRelations;
                return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Labels Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_LabelsQuery
     */
    class AttachmentIssue_LabelsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Labels query and return a IssueLabelConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_LabelsQuery
         * @returns parsed response from AttachmentIssue_LabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_LabelsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.labels;
                return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Relations Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_RelationsQuery
     */
    class AttachmentIssue_RelationsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Relations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_RelationsQuery
         * @returns parsed response from AttachmentIssue_RelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_RelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.relations;
                return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Subscribers Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_SubscribersQuery
     */
    class AttachmentIssue_SubscribersQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Subscribers query and return a UserConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_SubscribersQuery
         * @returns parsed response from AttachmentIssue_SubscribersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_SubscribersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.subscribers;
                return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Comment_BotActor Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Comment_BotActorQuery
     */
    class Comment_BotActorQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Comment_BotActor query and return a ActorBot
         *
         * @param variables - variables to pass into the Comment_BotActorQuery
         * @returns parsed response from Comment_BotActorQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Comment_BotActorDocument, variables);
                const data = response.comment.botActor;
                return data ? new ActorBot(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Comment_Children Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Comment_ChildrenQuery
     */
    class Comment_ChildrenQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Comment_Children query and return a CommentConnection
         *
         * @param variables - variables to pass into the Comment_ChildrenQuery
         * @returns parsed response from Comment_ChildrenQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Comment_ChildrenDocument, variables);
                const data = response.comment.children;
                return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Comment_DocumentContent Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Comment_DocumentContentQuery
     */
    class Comment_DocumentContentQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Comment_DocumentContent query and return a DocumentContent
         *
         * @param variables - variables to pass into the Comment_DocumentContentQuery
         * @returns parsed response from Comment_DocumentContentQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Comment_DocumentContentDocument, variables);
                const data = response.comment.documentContent;
                return data ? new DocumentContent(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable CustomView_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to customView
     * @param variables - variables without 'id' to pass into the CustomView_IssuesQuery
     */
    class CustomView_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the CustomView_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the CustomView_IssuesQuery
         * @returns parsed response from CustomView_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomView_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.customView.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable CustomView_OrganizationViewPreferences Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to customView
     */
    class CustomView_OrganizationViewPreferencesQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the CustomView_OrganizationViewPreferences query and return a ViewPreferences
         *
         * @returns parsed response from CustomView_OrganizationViewPreferencesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomView_OrganizationViewPreferencesDocument, {
                    id: this._id,
                });
                const data = response.customView.organizationViewPreferences;
                return data ? new ViewPreferences(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable CustomView_Projects Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to customView
     * @param variables - variables without 'id' to pass into the CustomView_ProjectsQuery
     */
    class CustomView_ProjectsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the CustomView_Projects query and return a ProjectConnection
         *
         * @param variables - variables without 'id' to pass into the CustomView_ProjectsQuery
         * @returns parsed response from CustomView_ProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomView_ProjectsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.customView.projects;
                return new ProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable CustomView_UserViewPreferences Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to customView
     */
    class CustomView_UserViewPreferencesQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the CustomView_UserViewPreferences query and return a ViewPreferences
         *
         * @returns parsed response from CustomView_UserViewPreferencesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomView_UserViewPreferencesDocument, {
                    id: this._id,
                });
                const data = response.customView.userViewPreferences;
                return data ? new ViewPreferences(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable CustomView_ViewPreferencesValues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to customView
     */
    class CustomView_ViewPreferencesValuesQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the CustomView_ViewPreferencesValues query and return a ViewPreferencesValues
         *
         * @returns parsed response from CustomView_ViewPreferencesValuesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomView_ViewPreferencesValuesDocument, {
                    id: this._id,
                });
                const data = response.customView.viewPreferencesValues;
                return data ? new ViewPreferencesValues(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable CustomView_OrganizationViewPreferences_Preferences Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to customView_organizationViewPreferences
     */
    class CustomView_OrganizationViewPreferences_PreferencesQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the CustomView_OrganizationViewPreferences_Preferences query and return a ViewPreferencesValues
         *
         * @returns parsed response from CustomView_OrganizationViewPreferences_PreferencesQuery
         */
        fetch() {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomView_OrganizationViewPreferences_PreferencesDocument, {
                    id: this._id,
                });
                const data = (_a = response.customView.organizationViewPreferences) === null || _a === void 0 ? void 0 : _a.preferences;
                return data ? new ViewPreferencesValues(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable CustomView_UserViewPreferences_Preferences Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to customView_userViewPreferences
     */
    class CustomView_UserViewPreferences_PreferencesQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the CustomView_UserViewPreferences_Preferences query and return a ViewPreferencesValues
         *
         * @returns parsed response from CustomView_UserViewPreferences_PreferencesQuery
         */
        fetch() {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomView_UserViewPreferences_PreferencesDocument, {
                    id: this._id,
                });
                const data = (_a = response.customView.userViewPreferences) === null || _a === void 0 ? void 0 : _a.preferences;
                return data ? new ViewPreferencesValues(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Cycle_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to cycle
     * @param variables - variables without 'id' to pass into the Cycle_IssuesQuery
     */
    class Cycle_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Cycle_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the Cycle_IssuesQuery
         * @returns parsed response from Cycle_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Cycle_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.cycle.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Cycle_UncompletedIssuesUponClose Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to cycle
     * @param variables - variables without 'id' to pass into the Cycle_UncompletedIssuesUponCloseQuery
     */
    class Cycle_UncompletedIssuesUponCloseQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Cycle_UncompletedIssuesUponClose query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the Cycle_UncompletedIssuesUponCloseQuery
         * @returns parsed response from Cycle_UncompletedIssuesUponCloseQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Cycle_UncompletedIssuesUponCloseDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.cycle.uncompletedIssuesUponClose;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Document_Comments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to document
     * @param variables - variables without 'id' to pass into the Document_CommentsQuery
     */
    class Document_CommentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Document_Comments query and return a CommentConnection
         *
         * @param variables - variables without 'id' to pass into the Document_CommentsQuery
         * @returns parsed response from Document_CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Document_CommentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.document.comments;
                return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Favorite_Children Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to favorite
     * @param variables - variables without 'id' to pass into the Favorite_ChildrenQuery
     */
    class Favorite_ChildrenQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Favorite_Children query and return a FavoriteConnection
         *
         * @param variables - variables without 'id' to pass into the Favorite_ChildrenQuery
         * @returns parsed response from Favorite_ChildrenQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Favorite_ChildrenDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.favorite.children;
                return new FavoriteConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Initiative_Links Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to initiative
     * @param variables - variables without 'id' to pass into the Initiative_LinksQuery
     */
    class Initiative_LinksQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Initiative_Links query and return a EntityExternalLinkConnection
         *
         * @param variables - variables without 'id' to pass into the Initiative_LinksQuery
         * @returns parsed response from Initiative_LinksQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Initiative_LinksDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.initiative.links;
                return new EntityExternalLinkConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Initiative_Projects Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to initiative
     * @param variables - variables without 'id' to pass into the Initiative_ProjectsQuery
     */
    class Initiative_ProjectsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Initiative_Projects query and return a ProjectConnection
         *
         * @param variables - variables without 'id' to pass into the Initiative_ProjectsQuery
         * @returns parsed response from Initiative_ProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Initiative_ProjectsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.initiative.projects;
                return new ProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_Attachments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_AttachmentsQuery
     */
    class Issue_AttachmentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Attachments query and return a AttachmentConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_AttachmentsQuery
         * @returns parsed response from Issue_AttachmentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_AttachmentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.attachments;
                return new AttachmentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_BotActor Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     */
    class Issue_BotActorQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the Issue_BotActor query and return a ActorBot
         *
         * @returns parsed response from Issue_BotActorQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_BotActorDocument, {
                    id: this._id,
                });
                const data = response.issue.botActor;
                return data ? new ActorBot(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Issue_Children Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_ChildrenQuery
     */
    class Issue_ChildrenQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Children query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_ChildrenQuery
         * @returns parsed response from Issue_ChildrenQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_ChildrenDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.children;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_Comments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_CommentsQuery
     */
    class Issue_CommentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Comments query and return a CommentConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_CommentsQuery
         * @returns parsed response from Issue_CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_CommentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.comments;
                return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_History Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_HistoryQuery
     */
    class Issue_HistoryQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_History query and return a IssueHistoryConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_HistoryQuery
         * @returns parsed response from Issue_HistoryQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_HistoryDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.history;
                return new IssueHistoryConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_InverseRelations Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_InverseRelationsQuery
     */
    class Issue_InverseRelationsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_InverseRelations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_InverseRelationsQuery
         * @returns parsed response from Issue_InverseRelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_InverseRelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.inverseRelations;
                return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_Labels Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_LabelsQuery
     */
    class Issue_LabelsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Labels query and return a IssueLabelConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_LabelsQuery
         * @returns parsed response from Issue_LabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_LabelsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.labels;
                return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_Relations Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_RelationsQuery
     */
    class Issue_RelationsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Relations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_RelationsQuery
         * @returns parsed response from Issue_RelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_RelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.relations;
                return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_Subscribers Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_SubscribersQuery
     */
    class Issue_SubscribersQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Subscribers query and return a UserConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_SubscribersQuery
         * @returns parsed response from Issue_SubscribersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_SubscribersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.subscribers;
                return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IssueLabel_Children Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issueLabel
     * @param variables - variables without 'id' to pass into the IssueLabel_ChildrenQuery
     */
    class IssueLabel_ChildrenQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the IssueLabel_Children query and return a IssueLabelConnection
         *
         * @param variables - variables without 'id' to pass into the IssueLabel_ChildrenQuery
         * @returns parsed response from IssueLabel_ChildrenQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueLabel_ChildrenDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issueLabel.children;
                return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IssueLabel_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issueLabel
     * @param variables - variables without 'id' to pass into the IssueLabel_IssuesQuery
     */
    class IssueLabel_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the IssueLabel_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the IssueLabel_IssuesQuery
         * @returns parsed response from IssueLabel_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueLabel_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issueLabel.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_Attachments Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_AttachmentsQuery
     */
    class IssueVcsBranchSearch_AttachmentsQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_Attachments query and return a AttachmentConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_AttachmentsQuery
         * @returns parsed response from IssueVcsBranchSearch_AttachmentsQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_AttachmentsDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.attachments;
                if (data) {
                    return new AttachmentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_BotActor Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     */
    class IssueVcsBranchSearch_BotActorQuery extends Request {
        constructor(request, branchName) {
            super(request);
            this._branchName = branchName;
        }
        /**
         * Call the IssueVcsBranchSearch_BotActor query and return a ActorBot
         *
         * @returns parsed response from IssueVcsBranchSearch_BotActorQuery
         */
        fetch() {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_BotActorDocument, {
                    branchName: this._branchName,
                });
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.botActor;
                return data ? new ActorBot(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_Children Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_ChildrenQuery
     */
    class IssueVcsBranchSearch_ChildrenQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_Children query and return a IssueConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_ChildrenQuery
         * @returns parsed response from IssueVcsBranchSearch_ChildrenQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_ChildrenDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.children;
                if (data) {
                    return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_Comments Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_CommentsQuery
     */
    class IssueVcsBranchSearch_CommentsQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_Comments query and return a CommentConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_CommentsQuery
         * @returns parsed response from IssueVcsBranchSearch_CommentsQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_CommentsDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.comments;
                if (data) {
                    return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_History Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_HistoryQuery
     */
    class IssueVcsBranchSearch_HistoryQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_History query and return a IssueHistoryConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_HistoryQuery
         * @returns parsed response from IssueVcsBranchSearch_HistoryQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_HistoryDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.history;
                if (data) {
                    return new IssueHistoryConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_InverseRelations Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_InverseRelationsQuery
     */
    class IssueVcsBranchSearch_InverseRelationsQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_InverseRelations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_InverseRelationsQuery
         * @returns parsed response from IssueVcsBranchSearch_InverseRelationsQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_InverseRelationsDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.inverseRelations;
                if (data) {
                    return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_Labels Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_LabelsQuery
     */
    class IssueVcsBranchSearch_LabelsQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_Labels query and return a IssueLabelConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_LabelsQuery
         * @returns parsed response from IssueVcsBranchSearch_LabelsQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_LabelsDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.labels;
                if (data) {
                    return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_Relations Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_RelationsQuery
     */
    class IssueVcsBranchSearch_RelationsQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_Relations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_RelationsQuery
         * @returns parsed response from IssueVcsBranchSearch_RelationsQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_RelationsDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.relations;
                if (data) {
                    return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_Subscribers Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_SubscribersQuery
     */
    class IssueVcsBranchSearch_SubscribersQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_Subscribers query and return a UserConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_SubscribersQuery
         * @returns parsed response from IssueVcsBranchSearch_SubscribersQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_SubscribersDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.subscribers;
                if (data) {
                    return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable Organization_Integrations Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Organization_IntegrationsQuery
     */
    class Organization_IntegrationsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Organization_Integrations query and return a IntegrationConnection
         *
         * @param variables - variables to pass into the Organization_IntegrationsQuery
         * @returns parsed response from Organization_IntegrationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Organization_IntegrationsDocument, variables);
                const data = response.organization.integrations;
                return new IntegrationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Organization_Labels Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Organization_LabelsQuery
     */
    class Organization_LabelsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Organization_Labels query and return a IssueLabelConnection
         *
         * @param variables - variables to pass into the Organization_LabelsQuery
         * @returns parsed response from Organization_LabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Organization_LabelsDocument, variables);
                const data = response.organization.labels;
                return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Organization_Subscription Query
     *
     * @param request - function to call the graphql client
     */
    class Organization_SubscriptionQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Organization_Subscription query and return a PaidSubscription
         *
         * @returns parsed response from Organization_SubscriptionQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Organization_SubscriptionDocument, {});
                const data = response.organization.subscription;
                return data ? new PaidSubscription(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Organization_Teams Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Organization_TeamsQuery
     */
    class Organization_TeamsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Organization_Teams query and return a TeamConnection
         *
         * @param variables - variables to pass into the Organization_TeamsQuery
         * @returns parsed response from Organization_TeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Organization_TeamsDocument, variables);
                const data = response.organization.teams;
                return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Organization_Templates Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Organization_TemplatesQuery
     */
    class Organization_TemplatesQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Organization_Templates query and return a TemplateConnection
         *
         * @param variables - variables to pass into the Organization_TemplatesQuery
         * @returns parsed response from Organization_TemplatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Organization_TemplatesDocument, variables);
                const data = response.organization.templates;
                return new TemplateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Organization_Users Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Organization_UsersQuery
     */
    class Organization_UsersQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Organization_Users query and return a UserConnection
         *
         * @param variables - variables to pass into the Organization_UsersQuery
         * @returns parsed response from Organization_UsersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Organization_UsersDocument, variables);
                const data = response.organization.users;
                return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_Comments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_CommentsQuery
     */
    class Project_CommentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Comments query and return a CommentConnection
         *
         * @param variables - variables without 'id' to pass into the Project_CommentsQuery
         * @returns parsed response from Project_CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_CommentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.comments;
                return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_DocumentContent Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     */
    class Project_DocumentContentQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the Project_DocumentContent query and return a DocumentContent
         *
         * @returns parsed response from Project_DocumentContentQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_DocumentContentDocument, {
                    id: this._id,
                });
                const data = response.project.documentContent;
                return data ? new DocumentContent(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Project_Documents Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_DocumentsQuery
     */
    class Project_DocumentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Documents query and return a DocumentConnection
         *
         * @param variables - variables without 'id' to pass into the Project_DocumentsQuery
         * @returns parsed response from Project_DocumentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_DocumentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.documents;
                return new DocumentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_ExternalLinks Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_ExternalLinksQuery
     */
    class Project_ExternalLinksQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_ExternalLinks query and return a EntityExternalLinkConnection
         *
         * @param variables - variables without 'id' to pass into the Project_ExternalLinksQuery
         * @returns parsed response from Project_ExternalLinksQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_ExternalLinksDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.externalLinks;
                return new EntityExternalLinkConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_History Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_HistoryQuery
     */
    class Project_HistoryQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_History query and return a ProjectHistoryConnection
         *
         * @param variables - variables without 'id' to pass into the Project_HistoryQuery
         * @returns parsed response from Project_HistoryQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_HistoryDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.history;
                return new ProjectHistoryConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_Initiatives Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_InitiativesQuery
     */
    class Project_InitiativesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Initiatives query and return a InitiativeConnection
         *
         * @param variables - variables without 'id' to pass into the Project_InitiativesQuery
         * @returns parsed response from Project_InitiativesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_InitiativesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.initiatives;
                return new InitiativeConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_IssuesQuery
     */
    class Project_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the Project_IssuesQuery
         * @returns parsed response from Project_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_Links Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_LinksQuery
     */
    class Project_LinksQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Links query and return a ProjectLinkConnection
         *
         * @param variables - variables without 'id' to pass into the Project_LinksQuery
         * @returns parsed response from Project_LinksQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_LinksDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.links;
                return new ProjectLinkConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_Members Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_MembersQuery
     */
    class Project_MembersQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Members query and return a UserConnection
         *
         * @param variables - variables without 'id' to pass into the Project_MembersQuery
         * @returns parsed response from Project_MembersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_MembersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.members;
                return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_ProjectMilestones Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_ProjectMilestonesQuery
     */
    class Project_ProjectMilestonesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_ProjectMilestones query and return a ProjectMilestoneConnection
         *
         * @param variables - variables without 'id' to pass into the Project_ProjectMilestonesQuery
         * @returns parsed response from Project_ProjectMilestonesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_ProjectMilestonesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.projectMilestones;
                return new ProjectMilestoneConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_ProjectUpdates Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_ProjectUpdatesQuery
     */
    class Project_ProjectUpdatesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_ProjectUpdates query and return a ProjectUpdateConnection
         *
         * @param variables - variables without 'id' to pass into the Project_ProjectUpdatesQuery
         * @returns parsed response from Project_ProjectUpdatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_ProjectUpdatesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.projectUpdates;
                return new ProjectUpdateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_Teams Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_TeamsQuery
     */
    class Project_TeamsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Teams query and return a TeamConnection
         *
         * @param variables - variables without 'id' to pass into the Project_TeamsQuery
         * @returns parsed response from Project_TeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_TeamsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.teams;
                return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ProjectMilestone_DocumentContent Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to projectMilestone
     */
    class ProjectMilestone_DocumentContentQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the ProjectMilestone_DocumentContent query and return a DocumentContent
         *
         * @returns parsed response from ProjectMilestone_DocumentContentQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectMilestone_DocumentContentDocument, {
                    id: this._id,
                });
                const data = response.projectMilestone.documentContent;
                return data ? new DocumentContent(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable ProjectMilestone_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to projectMilestone
     * @param variables - variables without 'id' to pass into the ProjectMilestone_IssuesQuery
     */
    class ProjectMilestone_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the ProjectMilestone_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the ProjectMilestone_IssuesQuery
         * @returns parsed response from ProjectMilestone_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectMilestone_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.projectMilestone.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ProjectUpdate_Comments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to projectUpdate
     * @param variables - variables without 'id' to pass into the ProjectUpdate_CommentsQuery
     */
    class ProjectUpdate_CommentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the ProjectUpdate_Comments query and return a CommentConnection
         *
         * @param variables - variables without 'id' to pass into the ProjectUpdate_CommentsQuery
         * @returns parsed response from ProjectUpdate_CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectUpdate_CommentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.projectUpdate.comments;
                return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Roadmap_Projects Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to roadmap
     * @param variables - variables without 'id' to pass into the Roadmap_ProjectsQuery
     */
    class Roadmap_ProjectsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Roadmap_Projects query and return a ProjectConnection
         *
         * @param variables - variables without 'id' to pass into the Roadmap_ProjectsQuery
         * @returns parsed response from Roadmap_ProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Roadmap_ProjectsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.roadmap.projects;
                return new ProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable SearchDocuments_ArchivePayload Query
     *
     * @param request - function to call the graphql client
     * @param term - required term to pass to searchDocuments
     * @param variables - variables without 'term' to pass into the SearchDocuments_ArchivePayloadQuery
     */
    class SearchDocuments_ArchivePayloadQuery extends Request {
        constructor(request, term, variables) {
            super(request);
            this._term = term;
            this._variables = variables;
        }
        /**
         * Call the SearchDocuments_ArchivePayload query and return a ArchiveResponse
         *
         * @param variables - variables without 'term' to pass into the SearchDocuments_ArchivePayloadQuery
         * @returns parsed response from SearchDocuments_ArchivePayloadQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SearchDocuments_ArchivePayloadDocument, Object.assign(Object.assign({ term: this._term }, this._variables), variables));
                const data = response.searchDocuments.archivePayload;
                return new ArchiveResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable SearchIssues_ArchivePayload Query
     *
     * @param request - function to call the graphql client
     * @param term - required term to pass to searchIssues
     * @param variables - variables without 'term' to pass into the SearchIssues_ArchivePayloadQuery
     */
    class SearchIssues_ArchivePayloadQuery extends Request {
        constructor(request, term, variables) {
            super(request);
            this._term = term;
            this._variables = variables;
        }
        /**
         * Call the SearchIssues_ArchivePayload query and return a ArchiveResponse
         *
         * @param variables - variables without 'term' to pass into the SearchIssues_ArchivePayloadQuery
         * @returns parsed response from SearchIssues_ArchivePayloadQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SearchIssues_ArchivePayloadDocument, Object.assign(Object.assign({ term: this._term }, this._variables), variables));
                const data = response.searchIssues.archivePayload;
                return new ArchiveResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable SearchProjects_ArchivePayload Query
     *
     * @param request - function to call the graphql client
     * @param term - required term to pass to searchProjects
     * @param variables - variables without 'term' to pass into the SearchProjects_ArchivePayloadQuery
     */
    class SearchProjects_ArchivePayloadQuery extends Request {
        constructor(request, term, variables) {
            super(request);
            this._term = term;
            this._variables = variables;
        }
        /**
         * Call the SearchProjects_ArchivePayload query and return a ArchiveResponse
         *
         * @param variables - variables without 'term' to pass into the SearchProjects_ArchivePayloadQuery
         * @returns parsed response from SearchProjects_ArchivePayloadQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SearchProjects_ArchivePayloadDocument, Object.assign(Object.assign({ term: this._term }, this._variables), variables));
                const data = response.searchProjects.archivePayload;
                return new ArchiveResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable Team_Cycles Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_CyclesQuery
     */
    class Team_CyclesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Cycles query and return a CycleConnection
         *
         * @param variables - variables without 'id' to pass into the Team_CyclesQuery
         * @returns parsed response from Team_CyclesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_CyclesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.cycles;
                return new CycleConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_GitAutomationStates Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_GitAutomationStatesQuery
     */
    class Team_GitAutomationStatesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_GitAutomationStates query and return a GitAutomationStateConnection
         *
         * @param variables - variables without 'id' to pass into the Team_GitAutomationStatesQuery
         * @returns parsed response from Team_GitAutomationStatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_GitAutomationStatesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.gitAutomationStates;
                return new GitAutomationStateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_IssuesQuery
     */
    class Team_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the Team_IssuesQuery
         * @returns parsed response from Team_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_Labels Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_LabelsQuery
     */
    class Team_LabelsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Labels query and return a IssueLabelConnection
         *
         * @param variables - variables without 'id' to pass into the Team_LabelsQuery
         * @returns parsed response from Team_LabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_LabelsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.labels;
                return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_Members Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_MembersQuery
     */
    class Team_MembersQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Members query and return a UserConnection
         *
         * @param variables - variables without 'id' to pass into the Team_MembersQuery
         * @returns parsed response from Team_MembersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_MembersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.members;
                return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_Memberships Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_MembershipsQuery
     */
    class Team_MembershipsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Memberships query and return a TeamMembershipConnection
         *
         * @param variables - variables without 'id' to pass into the Team_MembershipsQuery
         * @returns parsed response from Team_MembershipsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_MembershipsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.memberships;
                return new TeamMembershipConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_Projects Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_ProjectsQuery
     */
    class Team_ProjectsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Projects query and return a ProjectConnection
         *
         * @param variables - variables without 'id' to pass into the Team_ProjectsQuery
         * @returns parsed response from Team_ProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_ProjectsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.projects;
                return new ProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_States Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_StatesQuery
     */
    class Team_StatesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_States query and return a WorkflowStateConnection
         *
         * @param variables - variables without 'id' to pass into the Team_StatesQuery
         * @returns parsed response from Team_StatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_StatesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.states;
                return new WorkflowStateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_Templates Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_TemplatesQuery
     */
    class Team_TemplatesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Templates query and return a TemplateConnection
         *
         * @param variables - variables without 'id' to pass into the Team_TemplatesQuery
         * @returns parsed response from Team_TemplatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_TemplatesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.templates;
                return new TemplateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_Webhooks Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_WebhooksQuery
     */
    class Team_WebhooksQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Webhooks query and return a WebhookConnection
         *
         * @param variables - variables without 'id' to pass into the Team_WebhooksQuery
         * @returns parsed response from Team_WebhooksQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_WebhooksDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.webhooks;
                return new WebhookConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable TriageResponsibility_ManualSelection Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to triageResponsibility
     */
    class TriageResponsibility_ManualSelectionQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the TriageResponsibility_ManualSelection query and return a TriageResponsibilityManualSelection
         *
         * @returns parsed response from TriageResponsibility_ManualSelectionQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TriageResponsibility_ManualSelectionDocument, {
                    id: this._id,
                });
                const data = response.triageResponsibility.manualSelection;
                return data ? new TriageResponsibilityManualSelection(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable User_AssignedIssues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to user
     * @param variables - variables without 'id' to pass into the User_AssignedIssuesQuery
     */
    class User_AssignedIssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the User_AssignedIssues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the User_AssignedIssuesQuery
         * @returns parsed response from User_AssignedIssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(User_AssignedIssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.user.assignedIssues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable User_CreatedIssues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to user
     * @param variables - variables without 'id' to pass into the User_CreatedIssuesQuery
     */
    class User_CreatedIssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the User_CreatedIssues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the User_CreatedIssuesQuery
         * @returns parsed response from User_CreatedIssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(User_CreatedIssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.user.createdIssues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable User_TeamMemberships Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to user
     * @param variables - variables without 'id' to pass into the User_TeamMembershipsQuery
     */
    class User_TeamMembershipsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the User_TeamMemberships query and return a TeamMembershipConnection
         *
         * @param variables - variables without 'id' to pass into the User_TeamMembershipsQuery
         * @returns parsed response from User_TeamMembershipsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(User_TeamMembershipsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.user.teamMemberships;
                return new TeamMembershipConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable User_Teams Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to user
     * @param variables - variables without 'id' to pass into the User_TeamsQuery
     */
    class User_TeamsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the User_Teams query and return a TeamConnection
         *
         * @param variables - variables without 'id' to pass into the User_TeamsQuery
         * @returns parsed response from User_TeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(User_TeamsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.user.teams;
                return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferencesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences query and return a NotificationDeliveryPreferences
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferencesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferencesDocument, {});
                const data = response.userSettings.notificationDeliveryPreferences;
                return new NotificationDeliveryPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_MobileQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile query and return a NotificationDeliveryPreferencesChannel
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_MobileQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_MobileDocument, {});
                const data = response.userSettings.notificationDeliveryPreferences.mobile;
                return data ? new NotificationDeliveryPreferencesChannel(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule query and return a NotificationDeliveryPreferencesSchedule
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleQuery
         */
        fetch() {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleDocument, {});
                const data = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule;
                return data ? new NotificationDeliveryPreferencesSchedule(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Friday Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Friday query and return a NotificationDeliveryPreferencesDay
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayQuery
         */
        fetch() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayDocument, {});
                const data = (_b = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.friday;
                return data ? new NotificationDeliveryPreferencesDay(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Monday Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Monday query and return a NotificationDeliveryPreferencesDay
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayQuery
         */
        fetch() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayDocument, {});
                const data = (_b = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.monday;
                return data ? new NotificationDeliveryPreferencesDay(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Saturday Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Saturday query and return a NotificationDeliveryPreferencesDay
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayQuery
         */
        fetch() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayDocument, {});
                const data = (_b = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.saturday;
                return data ? new NotificationDeliveryPreferencesDay(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Sunday Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Sunday query and return a NotificationDeliveryPreferencesDay
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayQuery
         */
        fetch() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayDocument, {});
                const data = (_b = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.sunday;
                return data ? new NotificationDeliveryPreferencesDay(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Thursday Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Thursday query and return a NotificationDeliveryPreferencesDay
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayQuery
         */
        fetch() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayDocument, {});
                const data = (_b = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.thursday;
                return data ? new NotificationDeliveryPreferencesDay(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Tuesday Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Tuesday query and return a NotificationDeliveryPreferencesDay
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayQuery
         */
        fetch() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayDocument, {});
                const data = (_b = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.tuesday;
                return data ? new NotificationDeliveryPreferencesDay(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Wednesday Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Wednesday query and return a NotificationDeliveryPreferencesDay
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayQuery
         */
        fetch() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayDocument, {});
                const data = (_b = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.wednesday;
                return data ? new NotificationDeliveryPreferencesDay(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Viewer_AssignedIssues Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Viewer_AssignedIssuesQuery
     */
    class Viewer_AssignedIssuesQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Viewer_AssignedIssues query and return a IssueConnection
         *
         * @param variables - variables to pass into the Viewer_AssignedIssuesQuery
         * @returns parsed response from Viewer_AssignedIssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Viewer_AssignedIssuesDocument, variables);
                const data = response.viewer.assignedIssues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Viewer_CreatedIssues Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Viewer_CreatedIssuesQuery
     */
    class Viewer_CreatedIssuesQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Viewer_CreatedIssues query and return a IssueConnection
         *
         * @param variables - variables to pass into the Viewer_CreatedIssuesQuery
         * @returns parsed response from Viewer_CreatedIssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Viewer_CreatedIssuesDocument, variables);
                const data = response.viewer.createdIssues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Viewer_TeamMemberships Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Viewer_TeamMembershipsQuery
     */
    class Viewer_TeamMembershipsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Viewer_TeamMemberships query and return a TeamMembershipConnection
         *
         * @param variables - variables to pass into the Viewer_TeamMembershipsQuery
         * @returns parsed response from Viewer_TeamMembershipsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Viewer_TeamMembershipsDocument, variables);
                const data = response.viewer.teamMemberships;
                return new TeamMembershipConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Viewer_Teams Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Viewer_TeamsQuery
     */
    class Viewer_TeamsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Viewer_Teams query and return a TeamConnection
         *
         * @param variables - variables to pass into the Viewer_TeamsQuery
         * @returns parsed response from Viewer_TeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Viewer_TeamsDocument, variables);
                const data = response.viewer.teams;
                return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable WorkflowState_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to workflowState
     * @param variables - variables without 'id' to pass into the WorkflowState_IssuesQuery
     */
    class WorkflowState_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the WorkflowState_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the WorkflowState_IssuesQuery
         * @returns parsed response from WorkflowState_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(WorkflowState_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.workflowState.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * The SDK class containing all root operations
     *
     * @param request - function to call the graphql client
     */
    class LinearSdk extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * All teams you the user can administrate. Administrable teams are teams whose settings the user can change, but to whose issues the user doesn't necessarily have access to.
         *
         * @param variables - variables to pass into the AdministrableTeamsQuery
         * @returns TeamConnection
         */
        administrableTeams(variables) {
            return new AdministrableTeamsQuery(this._request).fetch(variables);
        }
        /**
         * All API keys for the user.
         *
         * @param variables - variables to pass into the ApiKeysQuery
         * @returns ApiKeyConnection
         */
        apiKeys(variables) {
            return new ApiKeysQuery(this._request).fetch(variables);
        }
        /**
         * Get basic information for an application.
         *
         * @param clientId - required clientId to pass to applicationInfo
         * @returns Application
         */
        applicationInfo(clientId) {
            return new ApplicationInfoQuery(this._request).fetch(clientId);
        }
        /**
         * Get information for an application and whether a user has approved it for the given scopes.
         *
         * @param clientId - required clientId to pass to applicationWithAuthorization
         * @param scope - required scope to pass to applicationWithAuthorization
         * @param variables - variables without 'clientId', 'scope' to pass into the ApplicationWithAuthorizationQuery
         * @returns UserAuthorizedApplication
         */
        applicationWithAuthorization(clientId, scope, variables) {
            return new ApplicationWithAuthorizationQuery(this._request).fetch(clientId, scope, variables);
        }
        /**
         * One specific issue attachment.
         * [Deprecated] 'url' can no longer be used as the 'id' parameter. Use 'attachmentsForUrl' instead
         *
         * @param id - required id to pass to attachment
         * @returns Attachment
         */
        attachment(id) {
            return new AttachmentQuery(this._request).fetch(id);
        }
        /**
         * Query an issue by its associated attachment, and its id.
         *
         * @param id - required id to pass to attachmentIssue
         * @returns Issue
         */
        attachmentIssue(id) {
            return new AttachmentIssueQuery(this._request).fetch(id);
        }
        /**
         * All issue attachments.
         *
         * To get attachments for a given URL, use `attachmentsForURL` query.
         *
         * @param variables - variables to pass into the AttachmentsQuery
         * @returns AttachmentConnection
         */
        attachments(variables) {
            return new AttachmentsQuery(this._request).fetch(variables);
        }
        /**
         * Returns issue attachments for a given `url`.
         *
         * @param url - required url to pass to attachmentsForURL
         * @param variables - variables without 'url' to pass into the AttachmentsForUrlQuery
         * @returns AttachmentConnection
         */
        attachmentsForURL(url, variables) {
            return new AttachmentsForUrlQuery(this._request).fetch(url, variables);
        }
        /**
         * All audit log entries.
         *
         * @param variables - variables to pass into the AuditEntriesQuery
         * @returns AuditEntryConnection
         */
        auditEntries(variables) {
            return new AuditEntriesQuery(this._request).fetch(variables);
        }
        /**
         * List of audit entry types.
         *
         * @returns AuditEntryType[]
         */
        get auditEntryTypes() {
            return new AuditEntryTypesQuery(this._request).fetch();
        }
        /**
         * User's active sessions.
         *
         * @returns AuthenticationSessionResponse[]
         */
        get authenticationSessions() {
            return new AuthenticationSessionsQuery(this._request).fetch();
        }
        /**
         * Fetch users belonging to this user account.
         *
         * @returns AuthResolverResponse
         */
        get availableUsers() {
            return new AvailableUsersQuery(this._request).fetch();
        }
        /**
         * A specific comment.
         *
         * @param variables - variables to pass into the CommentQuery
         * @returns Comment
         */
        comment(variables) {
            return new CommentQuery(this._request).fetch(variables);
        }
        /**
         * All comments.
         *
         * @param variables - variables to pass into the CommentsQuery
         * @returns CommentConnection
         */
        comments(variables) {
            return new CommentsQuery(this._request).fetch(variables);
        }
        /**
         * One specific custom view.
         *
         * @param id - required id to pass to customView
         * @returns CustomView
         */
        customView(id) {
            return new CustomViewQuery(this._request).fetch(id);
        }
        /**
         * Whether a custom view has other subscribers than the current user in the organization.
         *
         * @param id - required id to pass to customViewHasSubscribers
         * @returns CustomViewHasSubscribersPayload
         */
        customViewHasSubscribers(id) {
            return new CustomViewHasSubscribersQuery(this._request).fetch(id);
        }
        /**
         * Custom views for the user.
         *
         * @param variables - variables to pass into the CustomViewsQuery
         * @returns CustomViewConnection
         */
        customViews(variables) {
            return new CustomViewsQuery(this._request).fetch(variables);
        }
        /**
         * One specific cycle.
         *
         * @param id - required id to pass to cycle
         * @returns Cycle
         */
        cycle(id) {
            return new CycleQuery(this._request).fetch(id);
        }
        /**
         * All cycles.
         *
         * @param variables - variables to pass into the CyclesQuery
         * @returns CycleConnection
         */
        cycles(variables) {
            return new CyclesQuery(this._request).fetch(variables);
        }
        /**
         * One specific document.
         *
         * @param id - required id to pass to document
         * @returns Document
         */
        document(id) {
            return new DocumentQuery(this._request).fetch(id);
        }
        /**
         * A collection of document content history entries.
         *
         * @param id - required id to pass to documentContentHistory
         * @returns DocumentContentHistoryPayload
         */
        documentContentHistory(id) {
            return new DocumentContentHistoryQuery(this._request).fetch(id);
        }
        /**
         * All documents in the workspace.
         *
         * @param variables - variables to pass into the DocumentsQuery
         * @returns DocumentConnection
         */
        documents(variables) {
            return new DocumentsQuery(this._request).fetch(variables);
        }
        /**
         * A specific emoji.
         *
         * @param id - required id to pass to emoji
         * @returns Emoji
         */
        emoji(id) {
            return new EmojiQuery(this._request).fetch(id);
        }
        /**
         * All custom emojis.
         *
         * @param variables - variables to pass into the EmojisQuery
         * @returns EmojiConnection
         */
        emojis(variables) {
            return new EmojisQuery(this._request).fetch(variables);
        }
        /**
         * One specific entity link.
         *
         * @param id - required id to pass to entityExternalLink
         * @returns EntityExternalLink
         */
        entityExternalLink(id) {
            return new EntityExternalLinkQuery(this._request).fetch(id);
        }
        /**
         * One specific external user.
         *
         * @param id - required id to pass to externalUser
         * @returns ExternalUser
         */
        externalUser(id) {
            return new ExternalUserQuery(this._request).fetch(id);
        }
        /**
         * All external users for the organization.
         *
         * @param variables - variables to pass into the ExternalUsersQuery
         * @returns ExternalUserConnection
         */
        externalUsers(variables) {
            return new ExternalUsersQuery(this._request).fetch(variables);
        }
        /**
         * One specific favorite.
         *
         * @param id - required id to pass to favorite
         * @returns Favorite
         */
        favorite(id) {
            return new FavoriteQuery(this._request).fetch(id);
        }
        /**
         * The user's favorites.
         *
         * @param variables - variables to pass into the FavoritesQuery
         * @returns FavoriteConnection
         */
        favorites(variables) {
            return new FavoritesQuery(this._request).fetch(variables);
        }
        /**
         * One specific initiative.
         *
         * @param id - required id to pass to initiative
         * @returns Initiative
         */
        initiative(id) {
            return new InitiativeQuery(this._request).fetch(id);
        }
        /**
         * One specific initiativeToProject.
         *
         * @param id - required id to pass to initiativeToProject
         * @returns InitiativeToProject
         */
        initiativeToProject(id) {
            return new InitiativeToProjectQuery(this._request).fetch(id);
        }
        /**
         * returns a list of initiative to project entities.
         *
         * @param variables - variables to pass into the InitiativeToProjectsQuery
         * @returns InitiativeToProjectConnection
         */
        initiativeToProjects(variables) {
            return new InitiativeToProjectsQuery(this._request).fetch(variables);
        }
        /**
         * All initiatives in the workspace.
         *
         * @param variables - variables to pass into the InitiativesQuery
         * @returns InitiativeConnection
         */
        initiatives(variables) {
            return new InitiativesQuery(this._request).fetch(variables);
        }
        /**
         * One specific integration.
         *
         * @param id - required id to pass to integration
         * @returns Integration
         */
        integration(id) {
            return new IntegrationQuery(this._request).fetch(id);
        }
        /**
         * Checks if the integration has all required scopes.
         *
         * @param integrationId - required integrationId to pass to integrationHasScopes
         * @param scopes - required scopes to pass to integrationHasScopes
         * @returns IntegrationHasScopesPayload
         */
        integrationHasScopes(integrationId, scopes) {
            return new IntegrationHasScopesQuery(this._request).fetch(integrationId, scopes);
        }
        /**
         * One specific integrationTemplate.
         *
         * @param id - required id to pass to integrationTemplate
         * @returns IntegrationTemplate
         */
        integrationTemplate(id) {
            return new IntegrationTemplateQuery(this._request).fetch(id);
        }
        /**
         * Template and integration connections.
         *
         * @param variables - variables to pass into the IntegrationTemplatesQuery
         * @returns IntegrationTemplateConnection
         */
        integrationTemplates(variables) {
            return new IntegrationTemplatesQuery(this._request).fetch(variables);
        }
        /**
         * All integrations.
         *
         * @param variables - variables to pass into the IntegrationsQuery
         * @returns IntegrationConnection
         */
        integrations(variables) {
            return new IntegrationsQuery(this._request).fetch(variables);
        }
        /**
         * One specific set of settings.
         *
         * @param id - required id to pass to integrationsSettings
         * @returns IntegrationsSettings
         */
        integrationsSettings(id) {
            return new IntegrationsSettingsQuery(this._request).fetch(id);
        }
        /**
         * One specific issue.
         *
         * @param id - required id to pass to issue
         * @returns Issue
         */
        issue(id) {
            return new IssueQuery(this._request).fetch(id);
        }
        /**
         * Find issues that are related to a given Figma file key.
         *
         * @param fileKey - required fileKey to pass to issueFigmaFileKeySearch
         * @param variables - variables without 'fileKey' to pass into the IssueFigmaFileKeySearchQuery
         * @returns IssueConnection
         */
        issueFigmaFileKeySearch(fileKey, variables) {
            return new IssueFigmaFileKeySearchQuery(this._request).fetch(fileKey, variables);
        }
        /**
         * Suggests filters for an issue view based on a text prompt.
         *
         * @param prompt - required prompt to pass to issueFilterSuggestion
         * @param variables - variables without 'prompt' to pass into the IssueFilterSuggestionQuery
         * @returns IssueFilterSuggestionPayload
         */
        issueFilterSuggestion(prompt, variables) {
            return new IssueFilterSuggestionQuery(this._request).fetch(prompt, variables);
        }
        /**
         * Checks a CSV file validity against a specific import service.
         *
         * @param csvUrl - required csvUrl to pass to issueImportCheckCSV
         * @param service - required service to pass to issueImportCheckCSV
         * @returns IssueImportCheckPayload
         */
        issueImportCheckCSV(csvUrl, service) {
            return new IssueImportCheckCsvQuery(this._request).fetch(csvUrl, service);
        }
        /**
         * Checks whether it will be possible to setup sync for this project or repository at the end of import
         *
         * @param issueImportId - required issueImportId to pass to issueImportCheckSync
         * @returns IssueImportSyncCheckPayload
         */
        issueImportCheckSync(issueImportId) {
            return new IssueImportCheckSyncQuery(this._request).fetch(issueImportId);
        }
        /**
         * Checks whether a custom JQL query is valid and can be used to filter issues of a Jira import
         *
         * @param jiraEmail - required jiraEmail to pass to issueImportJqlCheck
         * @param jiraHostname - required jiraHostname to pass to issueImportJqlCheck
         * @param jiraProject - required jiraProject to pass to issueImportJqlCheck
         * @param jiraToken - required jiraToken to pass to issueImportJqlCheck
         * @param jql - required jql to pass to issueImportJqlCheck
         * @returns IssueImportJqlCheckPayload
         */
        issueImportJqlCheck(jiraEmail, jiraHostname, jiraProject, jiraToken, jql) {
            return new IssueImportJqlCheckQuery(this._request).fetch(jiraEmail, jiraHostname, jiraProject, jiraToken, jql);
        }
        /**
         * One specific label.
         *
         * @param id - required id to pass to issueLabel
         * @returns IssueLabel
         */
        issueLabel(id) {
            return new IssueLabelQuery(this._request).fetch(id);
        }
        /**
         * All issue labels.
         *
         * @param variables - variables to pass into the IssueLabelsQuery
         * @returns IssueLabelConnection
         */
        issueLabels(variables) {
            return new IssueLabelsQuery(this._request).fetch(variables);
        }
        /**
         * Issue priority values and corresponding labels.
         *
         * @returns IssuePriorityValue[]
         */
        get issuePriorityValues() {
            return new IssuePriorityValuesQuery(this._request).fetch();
        }
        /**
         * One specific issue relation.
         *
         * @param id - required id to pass to issueRelation
         * @returns IssueRelation
         */
        issueRelation(id) {
            return new IssueRelationQuery(this._request).fetch(id);
        }
        /**
         * All issue relationships.
         *
         * @param variables - variables to pass into the IssueRelationsQuery
         * @returns IssueRelationConnection
         */
        issueRelations(variables) {
            return new IssueRelationsQuery(this._request).fetch(variables);
        }
        /**
         * [DEPRECATED] Search issues. This endpoint is deprecated and will be removed in the future – use `searchIssues` instead.
         *
         * @param variables - variables to pass into the IssueSearchQuery
         * @returns IssueConnection
         */
        issueSearch(variables) {
            return new IssueSearchQuery(this._request).fetch(variables);
        }
        /**
         * Find issue based on the VCS branch name.
         *
         * @param branchName - required branchName to pass to issueVcsBranchSearch
         * @returns Issue
         */
        issueVcsBranchSearch(branchName) {
            return new IssueVcsBranchSearchQuery(this._request).fetch(branchName);
        }
        /**
         * All issues.
         *
         * @param variables - variables to pass into the IssuesQuery
         * @returns IssueConnection
         */
        issues(variables) {
            return new IssuesQuery(this._request).fetch(variables);
        }
        /**
         * One specific notification.
         *
         * @param id - required id to pass to notification
         * @returns Notification
         */
        notification(id) {
            return new NotificationQuery(this._request).fetch(id);
        }
        /**
         * One specific notification subscription.
         *
         * @param id - required id to pass to notificationSubscription
         * @returns NotificationSubscription
         */
        notificationSubscription(id) {
            return new NotificationSubscriptionQuery(this._request).fetch(id);
        }
        /**
         * The user's notification subscriptions.
         *
         * @param variables - variables to pass into the NotificationSubscriptionsQuery
         * @returns NotificationSubscriptionConnection
         */
        notificationSubscriptions(variables) {
            return new NotificationSubscriptionsQuery(this._request).fetch(variables);
        }
        /**
         * All notifications.
         *
         * @param variables - variables to pass into the NotificationsQuery
         * @returns NotificationConnection
         */
        notifications(variables) {
            return new NotificationsQuery(this._request).fetch(variables);
        }
        /**
         * The user's organization.
         *
         * @returns Organization
         */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /**
         * Does the organization exist.
         *
         * @param urlKey - required urlKey to pass to organizationExists
         * @returns OrganizationExistsPayload
         */
        organizationExists(urlKey) {
            return new OrganizationExistsQuery(this._request).fetch(urlKey);
        }
        /**
         * One specific organization invite.
         *
         * @param id - required id to pass to organizationInvite
         * @returns OrganizationInvite
         */
        organizationInvite(id) {
            return new OrganizationInviteQuery(this._request).fetch(id);
        }
        /**
         * All invites for the organization.
         *
         * @param variables - variables to pass into the OrganizationInvitesQuery
         * @returns OrganizationInviteConnection
         */
        organizationInvites(variables) {
            return new OrganizationInvitesQuery(this._request).fetch(variables);
        }
        /**
         * One specific project.
         *
         * @param id - required id to pass to project
         * @returns Project
         */
        project(id) {
            return new ProjectQuery(this._request).fetch(id);
        }
        /**
         * Suggests filters for a project view based on a text prompt.
         *
         * @param prompt - required prompt to pass to projectFilterSuggestion
         * @returns ProjectFilterSuggestionPayload
         */
        projectFilterSuggestion(prompt) {
            return new ProjectFilterSuggestionQuery(this._request).fetch(prompt);
        }
        /**
         * One specific project link.
         *
         * @param id - required id to pass to projectLink
         * @returns ProjectLink
         */
        projectLink(id) {
            return new ProjectLinkQuery(this._request).fetch(id);
        }
        /**
         * All links for the project.
         *
         * @param variables - variables to pass into the ProjectLinksQuery
         * @returns ProjectLinkConnection
         */
        projectLinks(variables) {
            return new ProjectLinksQuery(this._request).fetch(variables);
        }
        /**
         * One specific project milestone.
         *
         * @param id - required id to pass to projectMilestone
         * @returns ProjectMilestone
         */
        projectMilestone(id) {
            return new ProjectMilestoneQuery(this._request).fetch(id);
        }
        /**
         * All milestones for the project.
         *
         * @param variables - variables to pass into the ProjectMilestonesQuery
         * @returns ProjectMilestoneConnection
         */
        projectMilestones(variables) {
            return new ProjectMilestonesQuery(this._request).fetch(variables);
        }
        /**
         * One specific project relation.
         *
         * @param id - required id to pass to projectRelation
         * @returns ProjectRelation
         */
        projectRelation(id) {
            return new ProjectRelationQuery(this._request).fetch(id);
        }
        /**
         * All project relationships.
         *
         * @param variables - variables to pass into the ProjectRelationsQuery
         * @returns ProjectRelationConnection
         */
        projectRelations(variables) {
            return new ProjectRelationsQuery(this._request).fetch(variables);
        }
        /**
         * One specific project status.
         *
         * @param id - required id to pass to projectStatus
         * @returns ProjectStatus
         */
        projectStatus(id) {
            return new ProjectStatusQuery(this._request).fetch(id);
        }
        /**
         * All project statuses.
         *
         * @param variables - variables to pass into the ProjectStatusesQuery
         * @returns ProjectStatusConnection
         */
        projectStatuses(variables) {
            return new ProjectStatusesQuery(this._request).fetch(variables);
        }
        /**
         * A specific project update.
         *
         * @param id - required id to pass to projectUpdate
         * @returns ProjectUpdate
         */
        projectUpdate(id) {
            return new ProjectUpdateQuery(this._request).fetch(id);
        }
        /**
         * A specific interaction on a project update.
         *
         * @param id - required id to pass to projectUpdateInteraction
         * @returns ProjectUpdateInteraction
         */
        projectUpdateInteraction(id) {
            return new ProjectUpdateInteractionQuery(this._request).fetch(id);
        }
        /**
         * All interactions on project updates.
         *
         * @param variables - variables to pass into the ProjectUpdateInteractionsQuery
         * @returns ProjectUpdateInteractionConnection
         */
        projectUpdateInteractions(variables) {
            return new ProjectUpdateInteractionsQuery(this._request).fetch(variables);
        }
        /**
         * All project updates.
         *
         * @param variables - variables to pass into the ProjectUpdatesQuery
         * @returns ProjectUpdateConnection
         */
        projectUpdates(variables) {
            return new ProjectUpdatesQuery(this._request).fetch(variables);
        }
        /**
         * All projects.
         *
         * @param variables - variables to pass into the ProjectsQuery
         * @returns ProjectConnection
         */
        projects(variables) {
            return new ProjectsQuery(this._request).fetch(variables);
        }
        /**
         * Sends a test push message.
         *
         * @param variables - variables to pass into the PushSubscriptionTestQuery
         * @returns PushSubscriptionTestPayload
         */
        pushSubscriptionTest(variables) {
            return new PushSubscriptionTestQuery(this._request).fetch(variables);
        }
        /**
         * The status of the rate limiter.
         *
         * @returns RateLimitPayload
         */
        get rateLimitStatus() {
            return new RateLimitStatusQuery(this._request).fetch();
        }
        /**
         * One specific roadmap.
         *
         * @param id - required id to pass to roadmap
         * @returns Roadmap
         */
        roadmap(id) {
            return new RoadmapQuery(this._request).fetch(id);
        }
        /**
         * One specific roadmapToProject.
         *
         * @param id - required id to pass to roadmapToProject
         * @returns RoadmapToProject
         */
        roadmapToProject(id) {
            return new RoadmapToProjectQuery(this._request).fetch(id);
        }
        /**
         * Custom views for the user.
         *
         * @param variables - variables to pass into the RoadmapToProjectsQuery
         * @returns RoadmapToProjectConnection
         */
        roadmapToProjects(variables) {
            return new RoadmapToProjectsQuery(this._request).fetch(variables);
        }
        /**
         * All roadmaps in the workspace.
         *
         * @param variables - variables to pass into the RoadmapsQuery
         * @returns RoadmapConnection
         */
        roadmaps(variables) {
            return new RoadmapsQuery(this._request).fetch(variables);
        }
        /**
         * Search documents.
         *
         * @param term - required term to pass to searchDocuments
         * @param variables - variables without 'term' to pass into the SearchDocumentsQuery
         * @returns DocumentSearchPayload
         */
        searchDocuments(term, variables) {
            return new SearchDocumentsQuery(this._request).fetch(term, variables);
        }
        /**
         * Search issues.
         *
         * @param term - required term to pass to searchIssues
         * @param variables - variables without 'term' to pass into the SearchIssuesQuery
         * @returns IssueSearchPayload
         */
        searchIssues(term, variables) {
            return new SearchIssuesQuery(this._request).fetch(term, variables);
        }
        /**
         * Search projects.
         *
         * @param term - required term to pass to searchProjects
         * @param variables - variables without 'term' to pass into the SearchProjectsQuery
         * @returns ProjectSearchPayload
         */
        searchProjects(term, variables) {
            return new SearchProjectsQuery(this._request).fetch(term, variables);
        }
        /**
         * Fetch SSO login URL for the email provided.
         *
         * @param email - required email to pass to ssoUrlFromEmail
         * @param variables - variables without 'email' to pass into the SsoUrlFromEmailQuery
         * @returns SsoUrlFromEmailResponse
         */
        ssoUrlFromEmail(email, variables) {
            return new SsoUrlFromEmailQuery(this._request).fetch(email, variables);
        }
        /**
         * One specific team.
         *
         * @param id - required id to pass to team
         * @returns Team
         */
        team(id) {
            return new TeamQuery(this._request).fetch(id);
        }
        /**
         * One specific team membership.
         *
         * @param id - required id to pass to teamMembership
         * @returns TeamMembership
         */
        teamMembership(id) {
            return new TeamMembershipQuery(this._request).fetch(id);
        }
        /**
         * All team memberships.
         *
         * @param variables - variables to pass into the TeamMembershipsQuery
         * @returns TeamMembershipConnection
         */
        teamMemberships(variables) {
            return new TeamMembershipsQuery(this._request).fetch(variables);
        }
        /**
         * All teams whose issues can be accessed by the user. This might be different from `administrableTeams`, which also includes teams whose settings can be changed by the user.
         *
         * @param variables - variables to pass into the TeamsQuery
         * @returns TeamConnection
         */
        teams(variables) {
            return new TeamsQuery(this._request).fetch(variables);
        }
        /**
         * A specific template.
         *
         * @param id - required id to pass to template
         * @returns Template
         */
        template(id) {
            return new TemplateQuery(this._request).fetch(id);
        }
        /**
         * All templates from all users.
         *
         * @returns Template[]
         */
        get templates() {
            return new TemplatesQuery(this._request).fetch();
        }
        /**
         * Returns all templates that are associated with the integration type.
         *
         * @param integrationType - required integrationType to pass to templatesForIntegration
         * @returns Template[]
         */
        templatesForIntegration(integrationType) {
            return new TemplatesForIntegrationQuery(this._request).fetch(integrationType);
        }
        /**
         * A specific time schedule.
         *
         * @param id - required id to pass to timeSchedule
         * @returns TimeSchedule
         */
        timeSchedule(id) {
            return new TimeScheduleQuery(this._request).fetch(id);
        }
        /**
         * All time schedules.
         *
         * @param variables - variables to pass into the TimeSchedulesQuery
         * @returns TimeScheduleConnection
         */
        timeSchedules(variables) {
            return new TimeSchedulesQuery(this._request).fetch(variables);
        }
        /**
         * All triage responsibilities.
         *
         * @param variables - variables to pass into the TriageResponsibilitiesQuery
         * @returns TriageResponsibilityConnection
         */
        triageResponsibilities(variables) {
            return new TriageResponsibilitiesQuery(this._request).fetch(variables);
        }
        /**
         * A specific triage responsibility.
         *
         * @param id - required id to pass to triageResponsibility
         * @returns TriageResponsibility
         */
        triageResponsibility(id) {
            return new TriageResponsibilityQuery(this._request).fetch(id);
        }
        /**
         * One specific user.
         *
         * @param id - required id to pass to user
         * @returns User
         */
        user(id) {
            return new UserQuery(this._request).fetch(id);
        }
        /**
         * The user's settings.
         *
         * @returns UserSettings
         */
        get userSettings() {
            return new UserSettingsQuery(this._request).fetch();
        }
        /**
         * All users for the organization.
         *
         * @param variables - variables to pass into the UsersQuery
         * @returns UserConnection
         */
        users(variables) {
            return new UsersQuery(this._request).fetch(variables);
        }
        /**
         * Verify that we received the correct response from the GitHub Enterprise Server.
         *
         * @returns GitHubEnterpriseServerInstallVerificationPayload
         */
        get verifyGitHubEnterpriseServerInstallation() {
            return new VerifyGitHubEnterpriseServerInstallationQuery(this._request).fetch();
        }
        /**
         * The currently authenticated user.
         *
         * @returns User
         */
        get viewer() {
            return new ViewerQuery(this._request).fetch();
        }
        /**
         * A specific webhook.
         *
         * @param id - required id to pass to webhook
         * @returns Webhook
         */
        webhook(id) {
            return new WebhookQuery(this._request).fetch(id);
        }
        /**
         * All webhooks.
         *
         * @param variables - variables to pass into the WebhooksQuery
         * @returns WebhookConnection
         */
        webhooks(variables) {
            return new WebhooksQuery(this._request).fetch(variables);
        }
        /**
         * One specific state.
         *
         * @param id - required id to pass to workflowState
         * @returns WorkflowState
         */
        workflowState(id) {
            return new WorkflowStateQuery(this._request).fetch(id);
        }
        /**
         * All issue workflow states.
         *
         * @param variables - variables to pass into the WorkflowStatesQuery
         * @returns WorkflowStateConnection
         */
        workflowStates(variables) {
            return new WorkflowStatesQuery(this._request).fetch(variables);
        }
        /**
         * Creates an integration api key for Airbyte to connect with Linear.
         *
         * @param input - required input to pass to airbyteIntegrationConnect
         * @returns IntegrationPayload
         */
        airbyteIntegrationConnect(input) {
            return new AirbyteIntegrationConnectMutation(this._request).fetch(input);
        }
        /**
         * [DEPRECATED] Archives an issue attachment.
         *
         * @param id - required id to pass to archiveAttachment
         * @returns AttachmentArchivePayload
         */
        archiveAttachment(id) {
            return new ArchiveAttachmentMutation(this._request).fetch(id);
        }
        /**
         * Creates a new attachment, or updates existing if the same `url` and `issueId` is used.
         *
         * @param input - required input to pass to createAttachment
         * @returns AttachmentPayload
         */
        createAttachment(input) {
            return new CreateAttachmentMutation(this._request).fetch(input);
        }
        /**
         * Deletes an issue attachment.
         *
         * @param id - required id to pass to deleteAttachment
         * @returns DeletePayload
         */
        deleteAttachment(id) {
            return new DeleteAttachmentMutation(this._request).fetch(id);
        }
        /**
         * Link an existing Discord message to an issue.
         *
         * @param channelId - required channelId to pass to attachmentLinkDiscord
         * @param issueId - required issueId to pass to attachmentLinkDiscord
         * @param messageId - required messageId to pass to attachmentLinkDiscord
         * @param url - required url to pass to attachmentLinkDiscord
         * @param variables - variables without 'channelId', 'issueId', 'messageId', 'url' to pass into the AttachmentLinkDiscordMutation
         * @returns AttachmentPayload
         */
        attachmentLinkDiscord(channelId, issueId, messageId, url, variables) {
            return new AttachmentLinkDiscordMutation(this._request).fetch(channelId, issueId, messageId, url, variables);
        }
        /**
         * Link an existing Front conversation to an issue.
         *
         * @param conversationId - required conversationId to pass to attachmentLinkFront
         * @param issueId - required issueId to pass to attachmentLinkFront
         * @param variables - variables without 'conversationId', 'issueId' to pass into the AttachmentLinkFrontMutation
         * @returns FrontAttachmentPayload
         */
        attachmentLinkFront(conversationId, issueId, variables) {
            return new AttachmentLinkFrontMutation(this._request).fetch(conversationId, issueId, variables);
        }
        /**
         * Link a GitHub issue to a Linear issue.
         *
         * @param issueId - required issueId to pass to attachmentLinkGitHubIssue
         * @param url - required url to pass to attachmentLinkGitHubIssue
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkGitHubIssueMutation
         * @returns AttachmentPayload
         */
        attachmentLinkGitHubIssue(issueId, url, variables) {
            return new AttachmentLinkGitHubIssueMutation(this._request).fetch(issueId, url, variables);
        }
        /**
         * Link a GitHub pull request to an issue.
         *
         * @param issueId - required issueId to pass to attachmentLinkGitHubPR
         * @param url - required url to pass to attachmentLinkGitHubPR
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkGitHubPrMutation
         * @returns AttachmentPayload
         */
        attachmentLinkGitHubPR(issueId, url, variables) {
            return new AttachmentLinkGitHubPrMutation(this._request).fetch(issueId, url, variables);
        }
        /**
         * Link an existing GitLab MR to an issue.
         *
         * @param issueId - required issueId to pass to attachmentLinkGitLabMR
         * @param number - required number to pass to attachmentLinkGitLabMR
         * @param projectPathWithNamespace - required projectPathWithNamespace to pass to attachmentLinkGitLabMR
         * @param url - required url to pass to attachmentLinkGitLabMR
         * @param variables - variables without 'issueId', 'number', 'projectPathWithNamespace', 'url' to pass into the AttachmentLinkGitLabMrMutation
         * @returns AttachmentPayload
         */
        attachmentLinkGitLabMR(issueId, number, projectPathWithNamespace, url, variables) {
            return new AttachmentLinkGitLabMrMutation(this._request).fetch(issueId, number, projectPathWithNamespace, url, variables);
        }
        /**
         * Link an existing Intercom conversation to an issue.
         *
         * @param conversationId - required conversationId to pass to attachmentLinkIntercom
         * @param issueId - required issueId to pass to attachmentLinkIntercom
         * @param variables - variables without 'conversationId', 'issueId' to pass into the AttachmentLinkIntercomMutation
         * @returns AttachmentPayload
         */
        attachmentLinkIntercom(conversationId, issueId, variables) {
            return new AttachmentLinkIntercomMutation(this._request).fetch(conversationId, issueId, variables);
        }
        /**
         * Link an existing Jira issue to an issue.
         *
         * @param issueId - required issueId to pass to attachmentLinkJiraIssue
         * @param jiraIssueId - required jiraIssueId to pass to attachmentLinkJiraIssue
         * @param variables - variables without 'issueId', 'jiraIssueId' to pass into the AttachmentLinkJiraIssueMutation
         * @returns AttachmentPayload
         */
        attachmentLinkJiraIssue(issueId, jiraIssueId, variables) {
            return new AttachmentLinkJiraIssueMutation(this._request).fetch(issueId, jiraIssueId, variables);
        }
        /**
         * Link an existing Slack message to an issue.
         *
         * @param issueId - required issueId to pass to attachmentLinkSlack
         * @param url - required url to pass to attachmentLinkSlack
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkSlackMutation
         * @returns AttachmentPayload
         */
        attachmentLinkSlack(issueId, url, variables) {
            return new AttachmentLinkSlackMutation(this._request).fetch(issueId, url, variables);
        }
        /**
         * Link any url to an issue.
         *
         * @param issueId - required issueId to pass to attachmentLinkURL
         * @param url - required url to pass to attachmentLinkURL
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkUrlMutation
         * @returns AttachmentPayload
         */
        attachmentLinkURL(issueId, url, variables) {
            return new AttachmentLinkUrlMutation(this._request).fetch(issueId, url, variables);
        }
        /**
         * Link an existing Zendesk ticket to an issue.
         *
         * @param issueId - required issueId to pass to attachmentLinkZendesk
         * @param ticketId - required ticketId to pass to attachmentLinkZendesk
         * @param variables - variables without 'issueId', 'ticketId' to pass into the AttachmentLinkZendeskMutation
         * @returns AttachmentPayload
         */
        attachmentLinkZendesk(issueId, ticketId, variables) {
            return new AttachmentLinkZendeskMutation(this._request).fetch(issueId, ticketId, variables);
        }
        /**
         * Begin syncing the thread for an existing Slack message attachment with a comment thread on its issue.
         *
         * @param id - required id to pass to attachmentSyncToSlack
         * @returns AttachmentPayload
         */
        attachmentSyncToSlack(id) {
            return new AttachmentSyncToSlackMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing issue attachment.
         *
         * @param id - required id to pass to updateAttachment
         * @param input - required input to pass to updateAttachment
         * @returns AttachmentPayload
         */
        updateAttachment(id, input) {
            return new UpdateAttachmentMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new comment.
         *
         * @param input - required input to pass to createComment
         * @returns CommentPayload
         */
        createComment(input) {
            return new CreateCommentMutation(this._request).fetch(input);
        }
        /**
         * Deletes a comment.
         *
         * @param id - required id to pass to deleteComment
         * @returns DeletePayload
         */
        deleteComment(id) {
            return new DeleteCommentMutation(this._request).fetch(id);
        }
        /**
         * Resolves a comment.
         *
         * @param id - required id to pass to commentResolve
         * @param variables - variables without 'id' to pass into the CommentResolveMutation
         * @returns CommentPayload
         */
        commentResolve(id, variables) {
            return new CommentResolveMutation(this._request).fetch(id, variables);
        }
        /**
         * Unresolves a comment.
         *
         * @param id - required id to pass to commentUnresolve
         * @returns CommentPayload
         */
        commentUnresolve(id) {
            return new CommentUnresolveMutation(this._request).fetch(id);
        }
        /**
         * Updates a comment.
         *
         * @param id - required id to pass to updateComment
         * @param input - required input to pass to updateComment
         * @returns CommentPayload
         */
        updateComment(id, input) {
            return new UpdateCommentMutation(this._request).fetch(id, input);
        }
        /**
         * Saves user message.
         *
         * @param input - required input to pass to createContact
         * @returns ContactPayload
         */
        createContact(input) {
            return new CreateContactMutation(this._request).fetch(input);
        }
        /**
         * Create CSV export report for the organization.
         *
         * @param variables - variables to pass into the CreateCsvExportReportMutation
         * @returns CreateCsvExportReportPayload
         */
        createCsvExportReport(variables) {
            return new CreateCsvExportReportMutation(this._request).fetch(variables);
        }
        /**
         * Creates an organization from onboarding.
         *
         * @param input - required input to pass to createOrganizationFromOnboarding
         * @param variables - variables without 'input' to pass into the CreateOrganizationFromOnboardingMutation
         * @returns CreateOrJoinOrganizationResponse
         */
        createOrganizationFromOnboarding(input, variables) {
            return new CreateOrganizationFromOnboardingMutation(this._request).fetch(input, variables);
        }
        /**
         * Create a notification to remind a user about a project update.
         *
         * @param projectId - required projectId to pass to createProjectUpdateReminder
         * @param variables - variables without 'projectId' to pass into the CreateProjectUpdateReminderMutation
         * @returns ProjectUpdateReminderPayload
         */
        createProjectUpdateReminder(projectId, variables) {
            return new CreateProjectUpdateReminderMutation(this._request).fetch(projectId, variables);
        }
        /**
         * Creates a new custom view.
         *
         * @param input - required input to pass to createCustomView
         * @returns CustomViewPayload
         */
        createCustomView(input) {
            return new CreateCustomViewMutation(this._request).fetch(input);
        }
        /**
         * Deletes a custom view.
         *
         * @param id - required id to pass to deleteCustomView
         * @returns DeletePayload
         */
        deleteCustomView(id) {
            return new DeleteCustomViewMutation(this._request).fetch(id);
        }
        /**
         * Updates a custom view.
         *
         * @param id - required id to pass to updateCustomView
         * @param input - required input to pass to updateCustomView
         * @returns CustomViewPayload
         */
        updateCustomView(id, input) {
            return new UpdateCustomViewMutation(this._request).fetch(id, input);
        }
        /**
         * Archives a cycle.
         *
         * @param id - required id to pass to archiveCycle
         * @returns CycleArchivePayload
         */
        archiveCycle(id) {
            return new ArchiveCycleMutation(this._request).fetch(id);
        }
        /**
         * Creates a new cycle.
         *
         * @param input - required input to pass to createCycle
         * @returns CyclePayload
         */
        createCycle(input) {
            return new CreateCycleMutation(this._request).fetch(input);
        }
        /**
         * Shifts all cycles starts and ends by a certain number of days, starting from the provided cycle onwards.
         *
         * @param input - required input to pass to cycleShiftAll
         * @returns CyclePayload
         */
        cycleShiftAll(input) {
            return new CycleShiftAllMutation(this._request).fetch(input);
        }
        /**
         * Shifts all cycles starts and ends by a certain number of days, starting from the provided cycle onwards.
         *
         * @param id - required id to pass to cycleStartUpcomingCycleToday
         * @returns CyclePayload
         */
        cycleStartUpcomingCycleToday(id) {
            return new CycleStartUpcomingCycleTodayMutation(this._request).fetch(id);
        }
        /**
         * Updates a cycle.
         *
         * @param id - required id to pass to updateCycle
         * @param input - required input to pass to updateCycle
         * @returns CyclePayload
         */
        updateCycle(id, input) {
            return new UpdateCycleMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new document.
         *
         * @param input - required input to pass to createDocument
         * @returns DocumentPayload
         */
        createDocument(input) {
            return new CreateDocumentMutation(this._request).fetch(input);
        }
        /**
         * Deletes (trashes) a document.
         *
         * @param id - required id to pass to deleteDocument
         * @returns DocumentArchivePayload
         */
        deleteDocument(id) {
            return new DeleteDocumentMutation(this._request).fetch(id);
        }
        /**
         * Restores a document.
         *
         * @param id - required id to pass to unarchiveDocument
         * @returns DocumentArchivePayload
         */
        unarchiveDocument(id) {
            return new UnarchiveDocumentMutation(this._request).fetch(id);
        }
        /**
         * Updates a document.
         *
         * @param id - required id to pass to updateDocument
         * @param input - required input to pass to updateDocument
         * @returns DocumentPayload
         */
        updateDocument(id, input) {
            return new UpdateDocumentMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new email intake address.
         *
         * @param input - required input to pass to createEmailIntakeAddress
         * @returns EmailIntakeAddressPayload
         */
        createEmailIntakeAddress(input) {
            return new CreateEmailIntakeAddressMutation(this._request).fetch(input);
        }
        /**
         * Deletes an email intake address object.
         *
         * @param id - required id to pass to deleteEmailIntakeAddress
         * @returns DeletePayload
         */
        deleteEmailIntakeAddress(id) {
            return new DeleteEmailIntakeAddressMutation(this._request).fetch(id);
        }
        /**
         * Rotates an existing email intake address.
         *
         * @param id - required id to pass to emailIntakeAddressRotate
         * @returns EmailIntakeAddressPayload
         */
        emailIntakeAddressRotate(id) {
            return new EmailIntakeAddressRotateMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing email intake address.
         *
         * @param id - required id to pass to updateEmailIntakeAddress
         * @param input - required input to pass to updateEmailIntakeAddress
         * @returns EmailIntakeAddressPayload
         */
        updateEmailIntakeAddress(id, input) {
            return new UpdateEmailIntakeAddressMutation(this._request).fetch(id, input);
        }
        /**
         * Authenticates a user account via email and authentication token.
         *
         * @param input - required input to pass to emailTokenUserAccountAuth
         * @returns AuthResolverResponse
         */
        emailTokenUserAccountAuth(input) {
            return new EmailTokenUserAccountAuthMutation(this._request).fetch(input);
        }
        /**
         * Unsubscribes the user from one type of email.
         *
         * @param input - required input to pass to emailUnsubscribe
         * @returns EmailUnsubscribePayload
         */
        emailUnsubscribe(input) {
            return new EmailUnsubscribeMutation(this._request).fetch(input);
        }
        /**
         * Finds or creates a new user account by email and sends an email with token.
         *
         * @param input - required input to pass to emailUserAccountAuthChallenge
         * @returns EmailUserAccountAuthChallengeResponse
         */
        emailUserAccountAuthChallenge(input) {
            return new EmailUserAccountAuthChallengeMutation(this._request).fetch(input);
        }
        /**
         * Creates a custom emoji.
         *
         * @param input - required input to pass to createEmoji
         * @returns EmojiPayload
         */
        createEmoji(input) {
            return new CreateEmojiMutation(this._request).fetch(input);
        }
        /**
         * Deletes an emoji.
         *
         * @param id - required id to pass to deleteEmoji
         * @returns DeletePayload
         */
        deleteEmoji(id) {
            return new DeleteEmojiMutation(this._request).fetch(id);
        }
        /**
         * Creates a new entity link.
         *
         * @param input - required input to pass to createEntityExternalLink
         * @returns EntityExternalLinkPayload
         */
        createEntityExternalLink(input) {
            return new CreateEntityExternalLinkMutation(this._request).fetch(input);
        }
        /**
         * Deletes an entity link.
         *
         * @param id - required id to pass to deleteEntityExternalLink
         * @returns DeletePayload
         */
        deleteEntityExternalLink(id) {
            return new DeleteEntityExternalLinkMutation(this._request).fetch(id);
        }
        /**
         * Updates an entity link.
         *
         * @param id - required id to pass to updateEntityExternalLink
         * @param input - required input to pass to updateEntityExternalLink
         * @returns EntityExternalLinkPayload
         */
        updateEntityExternalLink(id, input) {
            return new UpdateEntityExternalLinkMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new favorite (project, cycle etc).
         *
         * @param input - required input to pass to createFavorite
         * @returns FavoritePayload
         */
        createFavorite(input) {
            return new CreateFavoriteMutation(this._request).fetch(input);
        }
        /**
         * Deletes a favorite reference.
         *
         * @param id - required id to pass to deleteFavorite
         * @returns DeletePayload
         */
        deleteFavorite(id) {
            return new DeleteFavoriteMutation(this._request).fetch(id);
        }
        /**
         * Updates a favorite.
         *
         * @param id - required id to pass to updateFavorite
         * @param input - required input to pass to updateFavorite
         * @returns FavoritePayload
         */
        updateFavorite(id, input) {
            return new UpdateFavoriteMutation(this._request).fetch(id, input);
        }
        /**
         * XHR request payload to upload an images, video and other attachments directly to Linear's cloud storage.
         *
         * @param contentType - required contentType to pass to fileUpload
         * @param filename - required filename to pass to fileUpload
         * @param size - required size to pass to fileUpload
         * @param variables - variables without 'contentType', 'filename', 'size' to pass into the FileUploadMutation
         * @returns UploadPayload
         */
        fileUpload(contentType, filename, size, variables) {
            return new FileUploadMutation(this._request).fetch(contentType, filename, size, variables);
        }
        /**
         * Creates a new automation state.
         *
         * @param input - required input to pass to createGitAutomationState
         * @returns GitAutomationStatePayload
         */
        createGitAutomationState(input) {
            return new CreateGitAutomationStateMutation(this._request).fetch(input);
        }
        /**
         * Archives an automation state.
         *
         * @param id - required id to pass to deleteGitAutomationState
         * @returns DeletePayload
         */
        deleteGitAutomationState(id) {
            return new DeleteGitAutomationStateMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing state.
         *
         * @param id - required id to pass to updateGitAutomationState
         * @param input - required input to pass to updateGitAutomationState
         * @returns GitAutomationStatePayload
         */
        updateGitAutomationState(id, input) {
            return new UpdateGitAutomationStateMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a Git target branch automation.
         *
         * @param input - required input to pass to createGitAutomationTargetBranch
         * @returns GitAutomationTargetBranchPayload
         */
        createGitAutomationTargetBranch(input) {
            return new CreateGitAutomationTargetBranchMutation(this._request).fetch(input);
        }
        /**
         * Archives a Git target branch automation.
         *
         * @param id - required id to pass to deleteGitAutomationTargetBranch
         * @returns DeletePayload
         */
        deleteGitAutomationTargetBranch(id) {
            return new DeleteGitAutomationTargetBranchMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing Git target branch automation.
         *
         * @param id - required id to pass to updateGitAutomationTargetBranch
         * @param input - required input to pass to updateGitAutomationTargetBranch
         * @returns GitAutomationTargetBranchPayload
         */
        updateGitAutomationTargetBranch(id, input) {
            return new UpdateGitAutomationTargetBranchMutation(this._request).fetch(id, input);
        }
        /**
         * Authenticate user account through Google OAuth. This is the 2nd step of OAuth flow.
         *
         * @param input - required input to pass to googleUserAccountAuth
         * @returns AuthResolverResponse
         */
        googleUserAccountAuth(input) {
            return new GoogleUserAccountAuthMutation(this._request).fetch(input);
        }
        /**
         * Upload an image from an URL to Linear.
         *
         * @param url - required url to pass to imageUploadFromUrl
         * @returns ImageUploadFromUrlPayload
         */
        imageUploadFromUrl(url) {
            return new ImageUploadFromUrlMutation(this._request).fetch(url);
        }
        /**
         * XHR request payload to upload a file for import, directly to Linear's cloud storage.
         *
         * @param contentType - required contentType to pass to importFileUpload
         * @param filename - required filename to pass to importFileUpload
         * @param size - required size to pass to importFileUpload
         * @param variables - variables without 'contentType', 'filename', 'size' to pass into the ImportFileUploadMutation
         * @returns UploadPayload
         */
        importFileUpload(contentType, filename, size, variables) {
            return new ImportFileUploadMutation(this._request).fetch(contentType, filename, size, variables);
        }
        /**
         * Archives a initiative.
         *
         * @param id - required id to pass to archiveInitiative
         * @returns InitiativeArchivePayload
         */
        archiveInitiative(id) {
            return new ArchiveInitiativeMutation(this._request).fetch(id);
        }
        /**
         * Creates a new initiative.
         *
         * @param input - required input to pass to createInitiative
         * @returns InitiativePayload
         */
        createInitiative(input) {
            return new CreateInitiativeMutation(this._request).fetch(input);
        }
        /**
         * Deletes (trashes) an initiative.
         *
         * @param id - required id to pass to deleteInitiative
         * @returns DeletePayload
         */
        deleteInitiative(id) {
            return new DeleteInitiativeMutation(this._request).fetch(id);
        }
        /**
         * Creates a new initiativeToProject join.
         *
         * @param input - required input to pass to createInitiativeToProject
         * @returns InitiativeToProjectPayload
         */
        createInitiativeToProject(input) {
            return new CreateInitiativeToProjectMutation(this._request).fetch(input);
        }
        /**
         * Deletes a initiativeToProject.
         *
         * @param id - required id to pass to deleteInitiativeToProject
         * @returns DeletePayload
         */
        deleteInitiativeToProject(id) {
            return new DeleteInitiativeToProjectMutation(this._request).fetch(id);
        }
        /**
         * Updates a initiativeToProject.
         *
         * @param id - required id to pass to updateInitiativeToProject
         * @param input - required input to pass to updateInitiativeToProject
         * @returns InitiativeToProjectPayload
         */
        updateInitiativeToProject(id, input) {
            return new UpdateInitiativeToProjectMutation(this._request).fetch(id, input);
        }
        /**
         * Unarchives a initiative.
         *
         * @param id - required id to pass to unarchiveInitiative
         * @returns InitiativeArchivePayload
         */
        unarchiveInitiative(id) {
            return new UnarchiveInitiativeMutation(this._request).fetch(id);
        }
        /**
         * Updates a initiative.
         *
         * @param id - required id to pass to updateInitiative
         * @param input - required input to pass to updateInitiative
         * @returns InitiativePayload
         */
        updateInitiative(id, input) {
            return new UpdateInitiativeMutation(this._request).fetch(id, input);
        }
        /**
         * Archives an integration.
         *
         * @param id - required id to pass to archiveIntegration
         * @returns DeletePayload
         */
        archiveIntegration(id) {
            return new ArchiveIntegrationMutation(this._request).fetch(id);
        }
        /**
         * Connect a Slack channel to Asks.
         *
         * @param code - required code to pass to integrationAsksConnectChannel
         * @param redirectUri - required redirectUri to pass to integrationAsksConnectChannel
         * @returns AsksChannelConnectPayload
         */
        integrationAsksConnectChannel(code, redirectUri) {
            return new IntegrationAsksConnectChannelMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Deletes an integration.
         *
         * @param id - required id to pass to deleteIntegration
         * @returns DeletePayload
         */
        deleteIntegration(id) {
            return new DeleteIntegrationMutation(this._request).fetch(id);
        }
        /**
         * Integrates the organization with Discord.
         *
         * @param code - required code to pass to integrationDiscord
         * @param redirectUri - required redirectUri to pass to integrationDiscord
         * @returns IntegrationPayload
         */
        integrationDiscord(code, redirectUri) {
            return new IntegrationDiscordMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Integrates the organization with Figma.
         *
         * @param code - required code to pass to integrationFigma
         * @param redirectUri - required redirectUri to pass to integrationFigma
         * @returns IntegrationPayload
         */
        integrationFigma(code, redirectUri) {
            return new IntegrationFigmaMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Integrates the organization with Front.
         *
         * @param code - required code to pass to integrationFront
         * @param redirectUri - required redirectUri to pass to integrationFront
         * @returns IntegrationPayload
         */
        integrationFront(code, redirectUri) {
            return new IntegrationFrontMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Connects the organization with a GitHub Enterprise Server.
         *
         * @param githubUrl - required githubUrl to pass to integrationGitHubEnterpriseServerConnect
         * @param variables - variables without 'githubUrl' to pass into the IntegrationGitHubEnterpriseServerConnectMutation
         * @returns GitHubEnterpriseServerPayload
         */
        integrationGitHubEnterpriseServerConnect(githubUrl, variables) {
            return new IntegrationGitHubEnterpriseServerConnectMutation(this._request).fetch(githubUrl, variables);
        }
        /**
         * Connect your GitHub account to Linear.
         *
         * @param code - required code to pass to integrationGitHubPersonal
         * @returns IntegrationPayload
         */
        integrationGitHubPersonal(code) {
            return new IntegrationGitHubPersonalMutation(this._request).fetch(code);
        }
        /**
         * Generates a webhook for the GitHub commit integration.
         *
         * @returns GitHubCommitIntegrationPayload
         */
        get createIntegrationGithubCommit() {
            return new CreateIntegrationGithubCommitMutation(this._request).fetch();
        }
        /**
         * Connects the organization with the GitHub App.
         *
         * @param installationId - required installationId to pass to integrationGithubConnect
         * @returns IntegrationPayload
         */
        integrationGithubConnect(installationId) {
            return new IntegrationGithubConnectMutation(this._request).fetch(installationId);
        }
        /**
         * Connects the organization with the GitHub Import App.
         *
         * @param installationId - required installationId to pass to integrationGithubImportConnect
         * @returns IntegrationPayload
         */
        integrationGithubImportConnect(installationId) {
            return new IntegrationGithubImportConnectMutation(this._request).fetch(installationId);
        }
        /**
         * Connects the organization with a GitLab Access Token.
         *
         * @param accessToken - required accessToken to pass to integrationGitlabConnect
         * @param gitlabUrl - required gitlabUrl to pass to integrationGitlabConnect
         * @returns GitLabIntegrationCreatePayload
         */
        integrationGitlabConnect(accessToken, gitlabUrl) {
            return new IntegrationGitlabConnectMutation(this._request).fetch(accessToken, gitlabUrl);
        }
        /**
         * Integrates the organization with Google Sheets.
         *
         * @param code - required code to pass to integrationGoogleSheets
         * @returns IntegrationPayload
         */
        integrationGoogleSheets(code) {
            return new IntegrationGoogleSheetsMutation(this._request).fetch(code);
        }
        /**
         * Integrates the organization with Intercom.
         *
         * @param code - required code to pass to integrationIntercom
         * @param redirectUri - required redirectUri to pass to integrationIntercom
         * @param variables - variables without 'code', 'redirectUri' to pass into the IntegrationIntercomMutation
         * @returns IntegrationPayload
         */
        integrationIntercom(code, redirectUri, variables) {
            return new IntegrationIntercomMutation(this._request).fetch(code, redirectUri, variables);
        }
        /**
         * Disconnects the organization from Intercom.
         *
         * @returns IntegrationPayload
         */
        get deleteIntegrationIntercom() {
            return new DeleteIntegrationIntercomMutation(this._request).fetch();
        }
        /**
         * [DEPRECATED] Updates settings on the Intercom integration.
         *
         * @param input - required input to pass to updateIntegrationIntercomSettings
         * @returns IntegrationPayload
         */
        updateIntegrationIntercomSettings(input) {
            return new UpdateIntegrationIntercomSettingsMutation(this._request).fetch(input);
        }
        /**
         * Connect your Jira account to Linear.
         *
         * @param variables - variables to pass into the IntegrationJiraPersonalMutation
         * @returns IntegrationPayload
         */
        integrationJiraPersonal(variables) {
            return new IntegrationJiraPersonalMutation(this._request).fetch(variables);
        }
        /**
         * Enables Loom integration for the organization.
         *
         * @returns IntegrationPayload
         */
        get integrationLoom() {
            return new IntegrationLoomMutation(this._request).fetch();
        }
        /**
         * Requests a currently unavailable integration.
         *
         * @param input - required input to pass to integrationRequest
         * @returns IntegrationRequestPayload
         */
        integrationRequest(input) {
            return new IntegrationRequestMutation(this._request).fetch(input);
        }
        /**
         * Integrates the organization with Sentry.
         *
         * @param code - required code to pass to integrationSentryConnect
         * @param installationId - required installationId to pass to integrationSentryConnect
         * @param organizationSlug - required organizationSlug to pass to integrationSentryConnect
         * @returns IntegrationPayload
         */
        integrationSentryConnect(code, installationId, organizationSlug) {
            return new IntegrationSentryConnectMutation(this._request).fetch(code, installationId, organizationSlug);
        }
        /**
         * Integrates the organization with Slack.
         *
         * @param code - required code to pass to integrationSlack
         * @param redirectUri - required redirectUri to pass to integrationSlack
         * @param variables - variables without 'code', 'redirectUri' to pass into the IntegrationSlackMutation
         * @returns IntegrationPayload
         */
        integrationSlack(code, redirectUri, variables) {
            return new IntegrationSlackMutation(this._request).fetch(code, redirectUri, variables);
        }
        /**
         * Integrates the organization with the Slack Asks app.
         *
         * @param code - required code to pass to integrationSlackAsks
         * @param redirectUri - required redirectUri to pass to integrationSlackAsks
         * @returns IntegrationPayload
         */
        integrationSlackAsks(code, redirectUri) {
            return new IntegrationSlackAsksMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Slack integration for custom view notifications.
         *
         * @param code - required code to pass to integrationSlackCustomViewNotifications
         * @param customViewId - required customViewId to pass to integrationSlackCustomViewNotifications
         * @param redirectUri - required redirectUri to pass to integrationSlackCustomViewNotifications
         * @returns SlackChannelConnectPayload
         */
        integrationSlackCustomViewNotifications(code, customViewId, redirectUri) {
            return new IntegrationSlackCustomViewNotificationsMutation(this._request).fetch(code, customViewId, redirectUri);
        }
        /**
         * Imports custom emojis from your Slack workspace.
         *
         * @param code - required code to pass to integrationSlackImportEmojis
         * @param redirectUri - required redirectUri to pass to integrationSlackImportEmojis
         * @returns IntegrationPayload
         */
        integrationSlackImportEmojis(code, redirectUri) {
            return new IntegrationSlackImportEmojisMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Slack integration for organization level project update notifications.
         *
         * @param code - required code to pass to integrationSlackOrgProjectUpdatesPost
         * @param redirectUri - required redirectUri to pass to integrationSlackOrgProjectUpdatesPost
         * @returns SlackChannelConnectPayload
         */
        integrationSlackOrgProjectUpdatesPost(code, redirectUri) {
            return new IntegrationSlackOrgProjectUpdatesPostMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Integrates your personal notifications with Slack.
         *
         * @param code - required code to pass to integrationSlackPersonal
         * @param redirectUri - required redirectUri to pass to integrationSlackPersonal
         * @returns IntegrationPayload
         */
        integrationSlackPersonal(code, redirectUri) {
            return new IntegrationSlackPersonalMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Slack integration for team notifications.
         *
         * @param code - required code to pass to integrationSlackPost
         * @param redirectUri - required redirectUri to pass to integrationSlackPost
         * @param teamId - required teamId to pass to integrationSlackPost
         * @param variables - variables without 'code', 'redirectUri', 'teamId' to pass into the IntegrationSlackPostMutation
         * @returns SlackChannelConnectPayload
         */
        integrationSlackPost(code, redirectUri, teamId, variables) {
            return new IntegrationSlackPostMutation(this._request).fetch(code, redirectUri, teamId, variables);
        }
        /**
         * Slack integration for project notifications.
         *
         * @param code - required code to pass to integrationSlackProjectPost
         * @param projectId - required projectId to pass to integrationSlackProjectPost
         * @param redirectUri - required redirectUri to pass to integrationSlackProjectPost
         * @param service - required service to pass to integrationSlackProjectPost
         * @returns SlackChannelConnectPayload
         */
        integrationSlackProjectPost(code, projectId, redirectUri, service) {
            return new IntegrationSlackProjectPostMutation(this._request).fetch(code, projectId, redirectUri, service);
        }
        /**
         * Creates a new integrationTemplate join.
         *
         * @param input - required input to pass to createIntegrationTemplate
         * @returns IntegrationTemplatePayload
         */
        createIntegrationTemplate(input) {
            return new CreateIntegrationTemplateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a integrationTemplate.
         *
         * @param id - required id to pass to deleteIntegrationTemplate
         * @returns DeletePayload
         */
        deleteIntegrationTemplate(id) {
            return new DeleteIntegrationTemplateMutation(this._request).fetch(id);
        }
        /**
         * Integrates the organization with Zendesk.
         *
         * @param code - required code to pass to integrationZendesk
         * @param redirectUri - required redirectUri to pass to integrationZendesk
         * @param scope - required scope to pass to integrationZendesk
         * @param subdomain - required subdomain to pass to integrationZendesk
         * @returns IntegrationPayload
         */
        integrationZendesk(code, redirectUri, scope, subdomain) {
            return new IntegrationZendeskMutation(this._request).fetch(code, redirectUri, scope, subdomain);
        }
        /**
         * Creates new settings for one or more integrations.
         *
         * @param input - required input to pass to createIntegrationsSettings
         * @returns IntegrationsSettingsPayload
         */
        createIntegrationsSettings(input) {
            return new CreateIntegrationsSettingsMutation(this._request).fetch(input);
        }
        /**
         * Updates settings related to integrations for a project or a team.
         *
         * @param id - required id to pass to updateIntegrationsSettings
         * @param input - required input to pass to updateIntegrationsSettings
         * @returns IntegrationsSettingsPayload
         */
        updateIntegrationsSettings(id, input) {
            return new UpdateIntegrationsSettingsMutation(this._request).fetch(id, input);
        }
        /**
         * Adds a label to an issue.
         *
         * @param id - required id to pass to issueAddLabel
         * @param labelId - required labelId to pass to issueAddLabel
         * @returns IssuePayload
         */
        issueAddLabel(id, labelId) {
            return new IssueAddLabelMutation(this._request).fetch(id, labelId);
        }
        /**
         * Archives an issue.
         *
         * @param id - required id to pass to archiveIssue
         * @param variables - variables without 'id' to pass into the ArchiveIssueMutation
         * @returns IssueArchivePayload
         */
        archiveIssue(id, variables) {
            return new ArchiveIssueMutation(this._request).fetch(id, variables);
        }
        /**
         * Updates multiple issues at once.
         *
         * @param ids - required ids to pass to updateIssueBatch
         * @param input - required input to pass to updateIssueBatch
         * @returns IssueBatchPayload
         */
        updateIssueBatch(ids, input) {
            return new UpdateIssueBatchMutation(this._request).fetch(ids, input);
        }
        /**
         * Creates a new issue.
         *
         * @param input - required input to pass to createIssue
         * @returns IssuePayload
         */
        createIssue(input) {
            return new CreateIssueMutation(this._request).fetch(input);
        }
        /**
         * Deletes (trashes) an issue.
         *
         * @param id - required id to pass to deleteIssue
         * @param variables - variables without 'id' to pass into the DeleteIssueMutation
         * @returns IssueArchivePayload
         */
        deleteIssue(id, variables) {
            return new DeleteIssueMutation(this._request).fetch(id, variables);
        }
        /**
         * Archives a draft.
         *
         * @param id - required id to pass to archiveIssueDraft
         * @returns IssueDraftArchivePayload
         */
        archiveIssueDraft(id) {
            return new ArchiveIssueDraftMutation(this._request).fetch(id);
        }
        /**
         * Creates a new draft.
         *
         * @param input - required input to pass to createIssueDraft
         * @returns IssueDraftPayload
         */
        createIssueDraft(input) {
            return new CreateIssueDraftMutation(this._request).fetch(input);
        }
        /**
         * Deletes a draft.
         *
         * @param id - required id to pass to deleteIssueDraft
         * @returns DeletePayload
         */
        deleteIssueDraft(id) {
            return new DeleteIssueDraftMutation(this._request).fetch(id);
        }
        /**
         * Updates a draft.
         *
         * @param id - required id to pass to updateIssueDraft
         * @param input - required input to pass to updateIssueDraft
         * @returns IssueDraftPayload
         */
        updateIssueDraft(id, input) {
            return new UpdateIssueDraftMutation(this._request).fetch(id, input);
        }
        /**
         * Kicks off an Asana import job.
         *
         * @param asanaTeamName - required asanaTeamName to pass to issueImportCreateAsana
         * @param asanaToken - required asanaToken to pass to issueImportCreateAsana
         * @param variables - variables without 'asanaTeamName', 'asanaToken' to pass into the IssueImportCreateAsanaMutation
         * @returns IssueImportPayload
         */
        issueImportCreateAsana(asanaTeamName, asanaToken, variables) {
            return new IssueImportCreateAsanaMutation(this._request).fetch(asanaTeamName, asanaToken, variables);
        }
        /**
         * Kicks off a Jira import job from a CSV.
         *
         * @param csvUrl - required csvUrl to pass to issueImportCreateCSVJira
         * @param variables - variables without 'csvUrl' to pass into the IssueImportCreateCsvJiraMutation
         * @returns IssueImportPayload
         */
        issueImportCreateCSVJira(csvUrl, variables) {
            return new IssueImportCreateCsvJiraMutation(this._request).fetch(csvUrl, variables);
        }
        /**
         * Kicks off a Shortcut (formerly Clubhouse) import job.
         *
         * @param clubhouseGroupName - required clubhouseGroupName to pass to issueImportCreateClubhouse
         * @param clubhouseToken - required clubhouseToken to pass to issueImportCreateClubhouse
         * @param variables - variables without 'clubhouseGroupName', 'clubhouseToken' to pass into the IssueImportCreateClubhouseMutation
         * @returns IssueImportPayload
         */
        issueImportCreateClubhouse(clubhouseGroupName, clubhouseToken, variables) {
            return new IssueImportCreateClubhouseMutation(this._request).fetch(clubhouseGroupName, clubhouseToken, variables);
        }
        /**
         * Kicks off a GitHub import job.
         *
         * @param variables - variables to pass into the IssueImportCreateGithubMutation
         * @returns IssueImportPayload
         */
        issueImportCreateGithub(variables) {
            return new IssueImportCreateGithubMutation(this._request).fetch(variables);
        }
        /**
         * Kicks off a Jira import job.
         *
         * @param jiraEmail - required jiraEmail to pass to issueImportCreateJira
         * @param jiraHostname - required jiraHostname to pass to issueImportCreateJira
         * @param jiraProject - required jiraProject to pass to issueImportCreateJira
         * @param jiraToken - required jiraToken to pass to issueImportCreateJira
         * @param variables - variables without 'jiraEmail', 'jiraHostname', 'jiraProject', 'jiraToken' to pass into the IssueImportCreateJiraMutation
         * @returns IssueImportPayload
         */
        issueImportCreateJira(jiraEmail, jiraHostname, jiraProject, jiraToken, variables) {
            return new IssueImportCreateJiraMutation(this._request).fetch(jiraEmail, jiraHostname, jiraProject, jiraToken, variables);
        }
        /**
         * Deletes an import job.
         *
         * @param issueImportId - required issueImportId to pass to deleteIssueImport
         * @returns IssueImportDeletePayload
         */
        deleteIssueImport(issueImportId) {
            return new DeleteIssueImportMutation(this._request).fetch(issueImportId);
        }
        /**
         * Kicks off import processing.
         *
         * @param issueImportId - required issueImportId to pass to issueImportProcess
         * @param mapping - required mapping to pass to issueImportProcess
         * @returns IssueImportPayload
         */
        issueImportProcess(issueImportId, mapping) {
            return new IssueImportProcessMutation(this._request).fetch(issueImportId, mapping);
        }
        /**
         * Updates the mapping for the issue import.
         *
         * @param id - required id to pass to updateIssueImport
         * @param input - required input to pass to updateIssueImport
         * @returns IssueImportPayload
         */
        updateIssueImport(id, input) {
            return new UpdateIssueImportMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new label.
         *
         * @param input - required input to pass to createIssueLabel
         * @param variables - variables without 'input' to pass into the CreateIssueLabelMutation
         * @returns IssueLabelPayload
         */
        createIssueLabel(input, variables) {
            return new CreateIssueLabelMutation(this._request).fetch(input, variables);
        }
        /**
         * Deletes an issue label.
         *
         * @param id - required id to pass to deleteIssueLabel
         * @returns DeletePayload
         */
        deleteIssueLabel(id) {
            return new DeleteIssueLabelMutation(this._request).fetch(id);
        }
        /**
         * Updates an label.
         *
         * @param id - required id to pass to updateIssueLabel
         * @param input - required input to pass to updateIssueLabel
         * @param variables - variables without 'id', 'input' to pass into the UpdateIssueLabelMutation
         * @returns IssueLabelPayload
         */
        updateIssueLabel(id, input, variables) {
            return new UpdateIssueLabelMutation(this._request).fetch(id, input, variables);
        }
        /**
         * Creates a new issue relation.
         *
         * @param input - required input to pass to createIssueRelation
         * @param variables - variables without 'input' to pass into the CreateIssueRelationMutation
         * @returns IssueRelationPayload
         */
        createIssueRelation(input, variables) {
            return new CreateIssueRelationMutation(this._request).fetch(input, variables);
        }
        /**
         * Deletes an issue relation.
         *
         * @param id - required id to pass to deleteIssueRelation
         * @returns DeletePayload
         */
        deleteIssueRelation(id) {
            return new DeleteIssueRelationMutation(this._request).fetch(id);
        }
        /**
         * Updates an issue relation.
         *
         * @param id - required id to pass to updateIssueRelation
         * @param input - required input to pass to updateIssueRelation
         * @returns IssueRelationPayload
         */
        updateIssueRelation(id, input) {
            return new UpdateIssueRelationMutation(this._request).fetch(id, input);
        }
        /**
         * Adds an issue reminder. Will cause a notification to be sent when the issue reminder time is reached.
         *
         * @param id - required id to pass to issueReminder
         * @param reminderAt - required reminderAt to pass to issueReminder
         * @returns IssuePayload
         */
        issueReminder(id, reminderAt) {
            return new IssueReminderMutation(this._request).fetch(id, reminderAt);
        }
        /**
         * Removes a label from an issue.
         *
         * @param id - required id to pass to issueRemoveLabel
         * @param labelId - required labelId to pass to issueRemoveLabel
         * @returns IssuePayload
         */
        issueRemoveLabel(id, labelId) {
            return new IssueRemoveLabelMutation(this._request).fetch(id, labelId);
        }
        /**
         * Subscribes a user to an issue.
         *
         * @param id - required id to pass to issueSubscribe
         * @param variables - variables without 'id' to pass into the IssueSubscribeMutation
         * @returns IssuePayload
         */
        issueSubscribe(id, variables) {
            return new IssueSubscribeMutation(this._request).fetch(id, variables);
        }
        /**
         * Unarchives an issue.
         *
         * @param id - required id to pass to unarchiveIssue
         * @returns IssueArchivePayload
         */
        unarchiveIssue(id) {
            return new UnarchiveIssueMutation(this._request).fetch(id);
        }
        /**
         * Unsubscribes a user from an issue.
         *
         * @param id - required id to pass to issueUnsubscribe
         * @param variables - variables without 'id' to pass into the IssueUnsubscribeMutation
         * @returns IssuePayload
         */
        issueUnsubscribe(id, variables) {
            return new IssueUnsubscribeMutation(this._request).fetch(id, variables);
        }
        /**
         * Updates an issue.
         *
         * @param id - required id to pass to updateIssue
         * @param input - required input to pass to updateIssue
         * @returns IssuePayload
         */
        updateIssue(id, input) {
            return new UpdateIssueMutation(this._request).fetch(id, input);
        }
        /**
         * Join an organization from onboarding.
         *
         * @param input - required input to pass to joinOrganizationFromOnboarding
         * @returns CreateOrJoinOrganizationResponse
         */
        joinOrganizationFromOnboarding(input) {
            return new JoinOrganizationFromOnboardingMutation(this._request).fetch(input);
        }
        /**
         * Leave an organization.
         *
         * @param organizationId - required organizationId to pass to leaveOrganization
         * @returns CreateOrJoinOrganizationResponse
         */
        leaveOrganization(organizationId) {
            return new LeaveOrganizationMutation(this._request).fetch(organizationId);
        }
        /**
         * Logout the client.
         *
         * @returns LogoutResponse
         */
        get logout() {
            return new LogoutMutation(this._request).fetch();
        }
        /**
         * Logout all of user's sessions including the active one.
         *
         * @returns LogoutResponse
         */
        get logoutAllSessions() {
            return new LogoutAllSessionsMutation(this._request).fetch();
        }
        /**
         * Logout all of user's sessions excluding the current one.
         *
         * @returns LogoutResponse
         */
        get logoutOtherSessions() {
            return new LogoutOtherSessionsMutation(this._request).fetch();
        }
        /**
         * Logout an individual session with its ID.
         *
         * @param sessionId - required sessionId to pass to logoutSession
         * @returns LogoutResponse
         */
        logoutSession(sessionId) {
            return new LogoutSessionMutation(this._request).fetch(sessionId);
        }
        /**
         * Archives a notification.
         *
         * @param id - required id to pass to archiveNotification
         * @returns NotificationArchivePayload
         */
        archiveNotification(id) {
            return new ArchiveNotificationMutation(this._request).fetch(id);
        }
        /**
         * Archives a notification and all related notifications.
         *
         * @param input - required input to pass to notificationArchiveAll
         * @returns NotificationBatchActionPayload
         */
        notificationArchiveAll(input) {
            return new NotificationArchiveAllMutation(this._request).fetch(input);
        }
        /**
         * Marks notification and all related notifications as read.
         *
         * @param input - required input to pass to notificationMarkReadAll
         * @param readAt - required readAt to pass to notificationMarkReadAll
         * @returns NotificationBatchActionPayload
         */
        notificationMarkReadAll(input, readAt) {
            return new NotificationMarkReadAllMutation(this._request).fetch(input, readAt);
        }
        /**
         * Marks notification and all related notifications as unread.
         *
         * @param input - required input to pass to notificationMarkUnreadAll
         * @returns NotificationBatchActionPayload
         */
        notificationMarkUnreadAll(input) {
            return new NotificationMarkUnreadAllMutation(this._request).fetch(input);
        }
        /**
         * Snoozes a notification and all related notifications.
         *
         * @param input - required input to pass to notificationSnoozeAll
         * @param snoozedUntilAt - required snoozedUntilAt to pass to notificationSnoozeAll
         * @returns NotificationBatchActionPayload
         */
        notificationSnoozeAll(input, snoozedUntilAt) {
            return new NotificationSnoozeAllMutation(this._request).fetch(input, snoozedUntilAt);
        }
        /**
         * Creates a new notification subscription for a cycle, custom view, label, project or team.
         *
         * @param input - required input to pass to createNotificationSubscription
         * @returns NotificationSubscriptionPayload
         */
        createNotificationSubscription(input) {
            return new CreateNotificationSubscriptionMutation(this._request).fetch(input);
        }
        /**
         * Deletes a notification subscription reference.
         *
         * @param id - required id to pass to deleteNotificationSubscription
         * @returns DeletePayload
         */
        deleteNotificationSubscription(id) {
            return new DeleteNotificationSubscriptionMutation(this._request).fetch(id);
        }
        /**
         * Updates a notification subscription.
         *
         * @param id - required id to pass to updateNotificationSubscription
         * @param input - required input to pass to updateNotificationSubscription
         * @returns NotificationSubscriptionPayload
         */
        updateNotificationSubscription(id, input) {
            return new UpdateNotificationSubscriptionMutation(this._request).fetch(id, input);
        }
        /**
         * Unarchives a notification.
         *
         * @param id - required id to pass to unarchiveNotification
         * @returns NotificationArchivePayload
         */
        unarchiveNotification(id) {
            return new UnarchiveNotificationMutation(this._request).fetch(id);
        }
        /**
         * Unsnoozes a notification and all related notifications.
         *
         * @param input - required input to pass to notificationUnsnoozeAll
         * @param unsnoozedAt - required unsnoozedAt to pass to notificationUnsnoozeAll
         * @returns NotificationBatchActionPayload
         */
        notificationUnsnoozeAll(input, unsnoozedAt) {
            return new NotificationUnsnoozeAllMutation(this._request).fetch(input, unsnoozedAt);
        }
        /**
         * Updates a notification.
         *
         * @param id - required id to pass to updateNotification
         * @param input - required input to pass to updateNotification
         * @returns NotificationPayload
         */
        updateNotification(id, input) {
            return new UpdateNotificationMutation(this._request).fetch(id, input);
        }
        /**
         * Cancels the deletion of an organization. Administrator privileges required.
         *
         * @returns OrganizationCancelDeletePayload
         */
        get deleteOrganizationCancel() {
            return new DeleteOrganizationCancelMutation(this._request).fetch();
        }
        /**
         * Delete's an organization. Administrator privileges required.
         *
         * @param input - required input to pass to deleteOrganization
         * @returns OrganizationDeletePayload
         */
        deleteOrganization(input) {
            return new DeleteOrganizationMutation(this._request).fetch(input);
        }
        /**
         * Get an organization's delete confirmation token. Administrator privileges required.
         *
         * @returns OrganizationDeletePayload
         */
        get organizationDeleteChallenge() {
            return new OrganizationDeleteChallengeMutation(this._request).fetch();
        }
        /**
         * Deletes a domain.
         *
         * @param id - required id to pass to deleteOrganizationDomain
         * @returns DeletePayload
         */
        deleteOrganizationDomain(id) {
            return new DeleteOrganizationDomainMutation(this._request).fetch(id);
        }
        /**
         * Creates a new organization invite.
         *
         * @param input - required input to pass to createOrganizationInvite
         * @returns OrganizationInvitePayload
         */
        createOrganizationInvite(input) {
            return new CreateOrganizationInviteMutation(this._request).fetch(input);
        }
        /**
         * Deletes an organization invite.
         *
         * @param id - required id to pass to deleteOrganizationInvite
         * @returns DeletePayload
         */
        deleteOrganizationInvite(id) {
            return new DeleteOrganizationInviteMutation(this._request).fetch(id);
        }
        /**
         * Updates an organization invite.
         *
         * @param id - required id to pass to updateOrganizationInvite
         * @param input - required input to pass to updateOrganizationInvite
         * @returns OrganizationInvitePayload
         */
        updateOrganizationInvite(id, input) {
            return new UpdateOrganizationInviteMutation(this._request).fetch(id, input);
        }
        /**
         * Starts a trial for the organization. Administrator privileges required.
         *
         * @returns OrganizationStartTrialPayload
         */
        get organizationStartTrial() {
            return new OrganizationStartTrialMutation(this._request).fetch();
        }
        /**
         * Updates the user's organization.
         *
         * @param input - required input to pass to updateOrganization
         * @returns OrganizationPayload
         */
        updateOrganization(input) {
            return new UpdateOrganizationMutation(this._request).fetch(input);
        }
        /**
         * Archives a project.
         *
         * @param id - required id to pass to archiveProject
         * @param variables - variables without 'id' to pass into the ArchiveProjectMutation
         * @returns ProjectArchivePayload
         */
        archiveProject(id, variables) {
            return new ArchiveProjectMutation(this._request).fetch(id, variables);
        }
        /**
         * Creates a new project.
         *
         * @param input - required input to pass to createProject
         * @param variables - variables without 'input' to pass into the CreateProjectMutation
         * @returns ProjectPayload
         */
        createProject(input, variables) {
            return new CreateProjectMutation(this._request).fetch(input, variables);
        }
        /**
         * Deletes (trashes) a project.
         *
         * @param id - required id to pass to deleteProject
         * @returns ProjectArchivePayload
         */
        deleteProject(id) {
            return new DeleteProjectMutation(this._request).fetch(id);
        }
        /**
         * Creates a new project link.
         *
         * @param input - required input to pass to createProjectLink
         * @returns ProjectLinkPayload
         */
        createProjectLink(input) {
            return new CreateProjectLinkMutation(this._request).fetch(input);
        }
        /**
         * Deletes a project link.
         *
         * @param id - required id to pass to deleteProjectLink
         * @returns DeletePayload
         */
        deleteProjectLink(id) {
            return new DeleteProjectLinkMutation(this._request).fetch(id);
        }
        /**
         * Updates a project link.
         *
         * @param id - required id to pass to updateProjectLink
         * @param input - required input to pass to updateProjectLink
         * @returns ProjectLinkPayload
         */
        updateProjectLink(id, input) {
            return new UpdateProjectLinkMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new project milestone.
         *
         * @param input - required input to pass to createProjectMilestone
         * @returns ProjectMilestonePayload
         */
        createProjectMilestone(input) {
            return new CreateProjectMilestoneMutation(this._request).fetch(input);
        }
        /**
         * Deletes a project milestone.
         *
         * @param id - required id to pass to deleteProjectMilestone
         * @returns DeletePayload
         */
        deleteProjectMilestone(id) {
            return new DeleteProjectMilestoneMutation(this._request).fetch(id);
        }
        /**
         * Updates a project milestone.
         *
         * @param id - required id to pass to updateProjectMilestone
         * @param input - required input to pass to updateProjectMilestone
         * @returns ProjectMilestonePayload
         */
        updateProjectMilestone(id, input) {
            return new UpdateProjectMilestoneMutation(this._request).fetch(id, input);
        }
        /**
         * Archives a project status.
         *
         * @param id - required id to pass to archiveProjectStatus
         * @returns ProjectStatusArchivePayload
         */
        archiveProjectStatus(id) {
            return new ArchiveProjectStatusMutation(this._request).fetch(id);
        }
        /**
         * Creates a new project status.
         *
         * @param input - required input to pass to createProjectStatus
         * @returns ProjectStatusPayload
         */
        createProjectStatus(input) {
            return new CreateProjectStatusMutation(this._request).fetch(input);
        }
        /**
         * Unarchives a project status.
         *
         * @param id - required id to pass to unarchiveProjectStatus
         * @returns ProjectStatusArchivePayload
         */
        unarchiveProjectStatus(id) {
            return new UnarchiveProjectStatusMutation(this._request).fetch(id);
        }
        /**
         * Updates a project status.
         *
         * @param id - required id to pass to updateProjectStatus
         * @param input - required input to pass to updateProjectStatus
         * @returns ProjectStatusPayload
         */
        updateProjectStatus(id, input) {
            return new UpdateProjectStatusMutation(this._request).fetch(id, input);
        }
        /**
         * Unarchives a project.
         *
         * @param id - required id to pass to unarchiveProject
         * @returns ProjectArchivePayload
         */
        unarchiveProject(id) {
            return new UnarchiveProjectMutation(this._request).fetch(id);
        }
        /**
         * Updates a project.
         *
         * @param id - required id to pass to updateProject
         * @param input - required input to pass to updateProject
         * @returns ProjectPayload
         */
        updateProject(id, input) {
            return new UpdateProjectMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new project update.
         *
         * @param input - required input to pass to createProjectUpdate
         * @returns ProjectUpdatePayload
         */
        createProjectUpdate(input) {
            return new CreateProjectUpdateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a project update.
         *
         * @param id - required id to pass to deleteProjectUpdate
         * @returns DeletePayload
         */
        deleteProjectUpdate(id) {
            return new DeleteProjectUpdateMutation(this._request).fetch(id);
        }
        /**
         * Creates a new interaction on a project update.
         *
         * @param input - required input to pass to createProjectUpdateInteraction
         * @returns ProjectUpdateInteractionPayload
         */
        createProjectUpdateInteraction(input) {
            return new CreateProjectUpdateInteractionMutation(this._request).fetch(input);
        }
        /**
         * Mark a project update as read.
         *
         * @param id - required id to pass to projectUpdateMarkAsRead
         * @returns ProjectUpdateWithInteractionPayload
         */
        projectUpdateMarkAsRead(id) {
            return new ProjectUpdateMarkAsReadMutation(this._request).fetch(id);
        }
        /**
         * Updates a project update.
         *
         * @param id - required id to pass to updateProjectUpdate
         * @param input - required input to pass to updateProjectUpdate
         * @returns ProjectUpdatePayload
         */
        updateProjectUpdate(id, input) {
            return new UpdateProjectUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a push subscription.
         *
         * @param input - required input to pass to createPushSubscription
         * @returns PushSubscriptionPayload
         */
        createPushSubscription(input) {
            return new CreatePushSubscriptionMutation(this._request).fetch(input);
        }
        /**
         * Deletes a push subscription.
         *
         * @param id - required id to pass to deletePushSubscription
         * @returns PushSubscriptionPayload
         */
        deletePushSubscription(id) {
            return new DeletePushSubscriptionMutation(this._request).fetch(id);
        }
        /**
         * Creates a new reaction.
         *
         * @param input - required input to pass to createReaction
         * @returns ReactionPayload
         */
        createReaction(input) {
            return new CreateReactionMutation(this._request).fetch(input);
        }
        /**
         * Deletes a reaction.
         *
         * @param id - required id to pass to deleteReaction
         * @returns DeletePayload
         */
        deleteReaction(id) {
            return new DeleteReactionMutation(this._request).fetch(id);
        }
        /**
         * Manually update Google Sheets data.
         *
         * @param id - required id to pass to refreshGoogleSheetsData
         * @returns IntegrationPayload
         */
        refreshGoogleSheetsData(id) {
            return new RefreshGoogleSheetsDataMutation(this._request).fetch(id);
        }
        /**
         * Re-send an organization invite.
         *
         * @param id - required id to pass to resendOrganizationInvite
         * @returns DeletePayload
         */
        resendOrganizationInvite(id) {
            return new ResendOrganizationInviteMutation(this._request).fetch(id);
        }
        /**
         * Archives a roadmap.
         *
         * @param id - required id to pass to archiveRoadmap
         * @returns RoadmapArchivePayload
         */
        archiveRoadmap(id) {
            return new ArchiveRoadmapMutation(this._request).fetch(id);
        }
        /**
         * Creates a new roadmap.
         *
         * @param input - required input to pass to createRoadmap
         * @returns RoadmapPayload
         */
        createRoadmap(input) {
            return new CreateRoadmapMutation(this._request).fetch(input);
        }
        /**
         * Deletes a roadmap.
         *
         * @param id - required id to pass to deleteRoadmap
         * @returns DeletePayload
         */
        deleteRoadmap(id) {
            return new DeleteRoadmapMutation(this._request).fetch(id);
        }
        /**
         * Creates a new roadmapToProject join.
         *
         * @param input - required input to pass to createRoadmapToProject
         * @returns RoadmapToProjectPayload
         */
        createRoadmapToProject(input) {
            return new CreateRoadmapToProjectMutation(this._request).fetch(input);
        }
        /**
         * Deletes a roadmapToProject.
         *
         * @param id - required id to pass to deleteRoadmapToProject
         * @returns DeletePayload
         */
        deleteRoadmapToProject(id) {
            return new DeleteRoadmapToProjectMutation(this._request).fetch(id);
        }
        /**
         * Updates a roadmapToProject.
         *
         * @param id - required id to pass to updateRoadmapToProject
         * @param input - required input to pass to updateRoadmapToProject
         * @returns RoadmapToProjectPayload
         */
        updateRoadmapToProject(id, input) {
            return new UpdateRoadmapToProjectMutation(this._request).fetch(id, input);
        }
        /**
         * Unarchives a roadmap.
         *
         * @param id - required id to pass to unarchiveRoadmap
         * @returns RoadmapArchivePayload
         */
        unarchiveRoadmap(id) {
            return new UnarchiveRoadmapMutation(this._request).fetch(id);
        }
        /**
         * Updates a roadmap.
         *
         * @param id - required id to pass to updateRoadmap
         * @param input - required input to pass to updateRoadmap
         * @returns RoadmapPayload
         */
        updateRoadmap(id, input) {
            return new UpdateRoadmapMutation(this._request).fetch(id, input);
        }
        /**
         * Authenticates a user account via email and authentication token for SAML.
         *
         * @param input - required input to pass to samlTokenUserAccountAuth
         * @returns AuthResolverResponse
         */
        samlTokenUserAccountAuth(input) {
            return new SamlTokenUserAccountAuthMutation(this._request).fetch(input);
        }
        /**
         * Creates a new team. The user who creates the team will automatically be added as a member to the newly created team.
         *
         * @param input - required input to pass to createTeam
         * @param variables - variables without 'input' to pass into the CreateTeamMutation
         * @returns TeamPayload
         */
        createTeam(input, variables) {
            return new CreateTeamMutation(this._request).fetch(input, variables);
        }
        /**
         * Deletes team's cycles data
         *
         * @param id - required id to pass to deleteTeamCycles
         * @returns TeamPayload
         */
        deleteTeamCycles(id) {
            return new DeleteTeamCyclesMutation(this._request).fetch(id);
        }
        /**
         * Deletes a team.
         *
         * @param id - required id to pass to deleteTeam
         * @returns DeletePayload
         */
        deleteTeam(id) {
            return new DeleteTeamMutation(this._request).fetch(id);
        }
        /**
         * Deletes a previously used team key.
         *
         * @param id - required id to pass to deleteTeamKey
         * @returns DeletePayload
         */
        deleteTeamKey(id) {
            return new DeleteTeamKeyMutation(this._request).fetch(id);
        }
        /**
         * Creates a new team membership.
         *
         * @param input - required input to pass to createTeamMembership
         * @returns TeamMembershipPayload
         */
        createTeamMembership(input) {
            return new CreateTeamMembershipMutation(this._request).fetch(input);
        }
        /**
         * Deletes a team membership.
         *
         * @param id - required id to pass to deleteTeamMembership
         * @returns DeletePayload
         */
        deleteTeamMembership(id) {
            return new DeleteTeamMembershipMutation(this._request).fetch(id);
        }
        /**
         * Updates a team membership.
         *
         * @param id - required id to pass to updateTeamMembership
         * @param input - required input to pass to updateTeamMembership
         * @returns TeamMembershipPayload
         */
        updateTeamMembership(id, input) {
            return new UpdateTeamMembershipMutation(this._request).fetch(id, input);
        }
        /**
         * Unarchives a team and cancels deletion.
         *
         * @param id - required id to pass to unarchiveTeam
         * @returns TeamArchivePayload
         */
        unarchiveTeam(id) {
            return new UnarchiveTeamMutation(this._request).fetch(id);
        }
        /**
         * Updates a team.
         *
         * @param id - required id to pass to updateTeam
         * @param input - required input to pass to updateTeam
         * @returns TeamPayload
         */
        updateTeam(id, input) {
            return new UpdateTeamMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new template.
         *
         * @param input - required input to pass to createTemplate
         * @returns TemplatePayload
         */
        createTemplate(input) {
            return new CreateTemplateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a template.
         *
         * @param id - required id to pass to deleteTemplate
         * @returns DeletePayload
         */
        deleteTemplate(id) {
            return new DeleteTemplateMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing template.
         *
         * @param id - required id to pass to updateTemplate
         * @param input - required input to pass to updateTemplate
         * @returns TemplatePayload
         */
        updateTemplate(id, input) {
            return new UpdateTemplateMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new time schedule.
         *
         * @param input - required input to pass to createTimeSchedule
         * @returns TimeSchedulePayload
         */
        createTimeSchedule(input) {
            return new CreateTimeScheduleMutation(this._request).fetch(input);
        }
        /**
         * Deletes a time schedule.
         *
         * @param id - required id to pass to deleteTimeSchedule
         * @returns DeletePayload
         */
        deleteTimeSchedule(id) {
            return new DeleteTimeScheduleMutation(this._request).fetch(id);
        }
        /**
         * Refresh the integration schedule information.
         *
         * @param id - required id to pass to timeScheduleRefreshIntegrationSchedule
         * @returns TimeSchedulePayload
         */
        timeScheduleRefreshIntegrationSchedule(id) {
            return new TimeScheduleRefreshIntegrationScheduleMutation(this._request).fetch(id);
        }
        /**
         * Updates a time schedule.
         *
         * @param id - required id to pass to updateTimeSchedule
         * @param input - required input to pass to updateTimeSchedule
         * @returns TimeSchedulePayload
         */
        updateTimeSchedule(id, input) {
            return new UpdateTimeScheduleMutation(this._request).fetch(id, input);
        }
        /**
         * Upsert an external time schedule.
         *
         * @param externalId - required externalId to pass to timeScheduleUpsertExternal
         * @param input - required input to pass to timeScheduleUpsertExternal
         * @returns TimeSchedulePayload
         */
        timeScheduleUpsertExternal(externalId, input) {
            return new TimeScheduleUpsertExternalMutation(this._request).fetch(externalId, input);
        }
        /**
         * Creates a new triage responsibility.
         *
         * @param input - required input to pass to createTriageResponsibility
         * @returns TriageResponsibilityPayload
         */
        createTriageResponsibility(input) {
            return new CreateTriageResponsibilityMutation(this._request).fetch(input);
        }
        /**
         * Deletes a triage responsibility.
         *
         * @param id - required id to pass to deleteTriageResponsibility
         * @returns DeletePayload
         */
        deleteTriageResponsibility(id) {
            return new DeleteTriageResponsibilityMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing triage responsibility.
         *
         * @param id - required id to pass to updateTriageResponsibility
         * @param input - required input to pass to updateTriageResponsibility
         * @returns TriageResponsibilityPayload
         */
        updateTriageResponsibility(id, input) {
            return new UpdateTriageResponsibilityMutation(this._request).fetch(id, input);
        }
        /**
         * Makes user a regular user. Can only be called by an admin.
         *
         * @param id - required id to pass to userDemoteAdmin
         * @returns UserAdminPayload
         */
        userDemoteAdmin(id) {
            return new UserDemoteAdminMutation(this._request).fetch(id);
        }
        /**
         * Makes user a guest. Can only be called by an admin.
         *
         * @param id - required id to pass to userDemoteMember
         * @returns UserAdminPayload
         */
        userDemoteMember(id) {
            return new UserDemoteMemberMutation(this._request).fetch(id);
        }
        /**
         * Connects the Discord user to this Linear account via OAuth2.
         *
         * @param code - required code to pass to userDiscordConnect
         * @param redirectUri - required redirectUri to pass to userDiscordConnect
         * @returns UserPayload
         */
        userDiscordConnect(code, redirectUri) {
            return new UserDiscordConnectMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Disconnects the external user from this Linear account.
         *
         * @param service - required service to pass to userExternalUserDisconnect
         * @returns UserPayload
         */
        userExternalUserDisconnect(service) {
            return new UserExternalUserDisconnectMutation(this._request).fetch(service);
        }
        /**
         * Updates a user's settings flag.
         *
         * @param flag - required flag to pass to updateUserFlag
         * @param operation - required operation to pass to updateUserFlag
         * @returns UserSettingsFlagPayload
         */
        updateUserFlag(flag, operation) {
            return new UpdateUserFlagMutation(this._request).fetch(flag, operation);
        }
        /**
         * Makes user an admin. Can only be called by an admin.
         *
         * @param id - required id to pass to userPromoteAdmin
         * @returns UserAdminPayload
         */
        userPromoteAdmin(id) {
            return new UserPromoteAdminMutation(this._request).fetch(id);
        }
        /**
         * Makes user a regular user. Can only be called by an admin.
         *
         * @param id - required id to pass to userPromoteMember
         * @returns UserAdminPayload
         */
        userPromoteMember(id) {
            return new UserPromoteMemberMutation(this._request).fetch(id);
        }
        /**
         * Resets user's setting flags.
         *
         * @param variables - variables to pass into the UserSettingsFlagsResetMutation
         * @returns UserSettingsFlagsResetPayload
         */
        userSettingsFlagsReset(variables) {
            return new UserSettingsFlagsResetMutation(this._request).fetch(variables);
        }
        /**
         * Updates the user's settings.
         *
         * @param id - required id to pass to updateUserSettings
         * @param input - required input to pass to updateUserSettings
         * @returns UserSettingsPayload
         */
        updateUserSettings(id, input) {
            return new UpdateUserSettingsMutation(this._request).fetch(id, input);
        }
        /**
         * Suspends a user. Can only be called by an admin.
         *
         * @param id - required id to pass to suspendUser
         * @returns UserAdminPayload
         */
        suspendUser(id) {
            return new SuspendUserMutation(this._request).fetch(id);
        }
        /**
         * Un-suspends a user. Can only be called by an admin.
         *
         * @param id - required id to pass to unsuspendUser
         * @returns UserAdminPayload
         */
        unsuspendUser(id) {
            return new UnsuspendUserMutation(this._request).fetch(id);
        }
        /**
         * Updates a user. Only available to organization admins and the user themselves.
         *
         * @param id - required id to pass to updateUser
         * @param input - required input to pass to updateUser
         * @returns UserPayload
         */
        updateUser(id, input) {
            return new UpdateUserMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new ViewPreferences object.
         *
         * @param input - required input to pass to createViewPreferences
         * @returns ViewPreferencesPayload
         */
        createViewPreferences(input) {
            return new CreateViewPreferencesMutation(this._request).fetch(input);
        }
        /**
         * Deletes a ViewPreferences.
         *
         * @param id - required id to pass to deleteViewPreferences
         * @returns DeletePayload
         */
        deleteViewPreferences(id) {
            return new DeleteViewPreferencesMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing ViewPreferences object.
         *
         * @param id - required id to pass to updateViewPreferences
         * @param input - required input to pass to updateViewPreferences
         * @returns ViewPreferencesPayload
         */
        updateViewPreferences(id, input) {
            return new UpdateViewPreferencesMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new webhook.
         *
         * @param input - required input to pass to createWebhook
         * @returns WebhookPayload
         */
        createWebhook(input) {
            return new CreateWebhookMutation(this._request).fetch(input);
        }
        /**
         * Deletes a Webhook.
         *
         * @param id - required id to pass to deleteWebhook
         * @returns DeletePayload
         */
        deleteWebhook(id) {
            return new DeleteWebhookMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing Webhook.
         *
         * @param id - required id to pass to updateWebhook
         * @param input - required input to pass to updateWebhook
         * @returns WebhookPayload
         */
        updateWebhook(id, input) {
            return new UpdateWebhookMutation(this._request).fetch(id, input);
        }
        /**
         * Archives a state. Only states with issues that have all been archived can be archived.
         *
         * @param id - required id to pass to archiveWorkflowState
         * @returns WorkflowStateArchivePayload
         */
        archiveWorkflowState(id) {
            return new ArchiveWorkflowStateMutation(this._request).fetch(id);
        }
        /**
         * Creates a new state, adding it to the workflow of a team.
         *
         * @param input - required input to pass to createWorkflowState
         * @returns WorkflowStatePayload
         */
        createWorkflowState(input) {
            return new CreateWorkflowStateMutation(this._request).fetch(input);
        }
        /**
         * Updates a state.
         *
         * @param id - required id to pass to updateWorkflowState
         * @param input - required input to pass to updateWorkflowState
         * @returns WorkflowStatePayload
         */
        updateWorkflowState(id, input) {
            return new UpdateWorkflowStateMutation(this._request).fetch(id, input);
        }
    }

    /**
     * Validate and return default LinearGraphQLClient options
     *
     * @param options initial request options to pass to the graphql client
     * @returns parsed graphql client options
     */
    function parseClientOptions(_a) {
        var _b, _c;
        var { apiKey, accessToken, apiUrl, headers } = _a, opts = __rest(_a, ["apiKey", "accessToken", "apiUrl", "headers"]);
        if (!accessToken && !apiKey) {
            throw new Error("No accessToken or apiKey provided to the LinearClient - create one here: https://linear.app/settings/api");
        }
        return Object.assign({ headers: Object.assign(Object.assign({ 
                /** Use bearer if oauth token exists, otherwise use the provided apiKey */
                Authorization: accessToken
                    ? accessToken.startsWith("Bearer ")
                        ? accessToken
                        : `Bearer ${accessToken}`
                    : (apiKey !== null && apiKey !== void 0 ? apiKey : "") }, headers), { 
                /** Override any user agent with the sdk name and version */
                "User-Agent": serializeUserAgent({
                    [(_b = process.env.npm_package_name) !== null && _b !== void 0 ? _b : "@linear/sdk"]: (_c = process.env.npm_package_version) !== null && _c !== void 0 ? _c : "unknown",
                }) }), 
            /** Default to production linear api */
            apiUrl: apiUrl !== null && apiUrl !== void 0 ? apiUrl : "https://api.linear.app/graphql" }, opts);
    }
    /**
     * Create a Linear API client
     *
     * @param options request options to pass to the LinearGraphQLClient
     */
    class LinearClient extends LinearSdk {
        constructor(options) {
            const parsedOptions = parseClientOptions(options);
            const graphQLClient = new LinearGraphQLClient(parsedOptions.apiUrl, parsedOptions);
            super((doc, vars) => 
            /** Call the LinearGraphQLClient */
            this.client.request(doc, vars).catch(error => {
                /** Catch and wrap errors from the LinearGraphQLClient */
                throw parseLinearError(error);
            }));
            this.options = parsedOptions;
            this.client = graphQLClient;
        }
    }

    const LINEAR_WEBHOOK_SIGNATURE_HEADER = "linear-signature";
    const LINEAR_WEBHOOK_TS_FIELD = "webhookTimestamp";
    /**
     * Provides helper functions to work with Linear webhooks
     */
    class LinearWebhooks {
        constructor(secret) {
            this.secret = secret;
        }
        /**
         * Verify the webhook signature
         * @param rawBody The webhook request raw body.
         * @param signature The signature to verify.
         * @param timestamp The `webhookTimestamp` field from the request parsed body.
         */
        verify(rawBody, signature, timestamp) {
            const verificationBuffer = Buffer.from(crypto__default["default"].createHmac("sha256", this.secret).update(rawBody).digest("hex"));
            const signatureBuffer = Buffer.from(signature);
            if (verificationBuffer.length !== signatureBuffer.length) {
                throw new Error("Invalid webhook signature");
            }
            if (!crypto__default["default"].timingSafeEqual(verificationBuffer, signatureBuffer)) {
                throw new Error("Invalid webhook signature");
            }
            if (timestamp) {
                const timeDiff = Math.abs(new Date().getTime() - timestamp);
                // Throw error if more than one minute delta between provided ts and current time
                if (timeDiff > 1000 * 60) {
                    throw new Error("Invalid webhook timestamp");
                }
            }
            return true;
        }
    }

    exports.ActorBot = ActorBot;
    exports.AdministrableTeamsQuery = AdministrableTeamsQuery;
    exports.AirbyteIntegrationConnectMutation = AirbyteIntegrationConnectMutation;
    exports.ApiKey = ApiKey;
    exports.ApiKeyConnection = ApiKeyConnection;
    exports.ApiKeyPayload = ApiKeyPayload;
    exports.ApiKeysQuery = ApiKeysQuery;
    exports.Application = Application;
    exports.ApplicationInfoQuery = ApplicationInfoQuery;
    exports.ApplicationWithAuthorizationQuery = ApplicationWithAuthorizationQuery;
    exports.ArchiveAttachmentMutation = ArchiveAttachmentMutation;
    exports.ArchiveCycleMutation = ArchiveCycleMutation;
    exports.ArchiveInitiativeMutation = ArchiveInitiativeMutation;
    exports.ArchiveIntegrationMutation = ArchiveIntegrationMutation;
    exports.ArchiveIssueDraftMutation = ArchiveIssueDraftMutation;
    exports.ArchiveIssueMutation = ArchiveIssueMutation;
    exports.ArchiveNotificationMutation = ArchiveNotificationMutation;
    exports.ArchivePayload = ArchivePayload;
    exports.ArchiveProjectMutation = ArchiveProjectMutation;
    exports.ArchiveProjectStatusMutation = ArchiveProjectStatusMutation;
    exports.ArchiveResponse = ArchiveResponse;
    exports.ArchiveRoadmapMutation = ArchiveRoadmapMutation;
    exports.ArchiveWorkflowStateMutation = ArchiveWorkflowStateMutation;
    exports.AsksChannelConnectPayload = AsksChannelConnectPayload;
    exports.Attachment = Attachment;
    exports.AttachmentArchivePayload = AttachmentArchivePayload;
    exports.AttachmentConnection = AttachmentConnection;
    exports.AttachmentIssueQuery = AttachmentIssueQuery;
    exports.AttachmentIssue_AttachmentsQuery = AttachmentIssue_AttachmentsQuery;
    exports.AttachmentIssue_BotActorQuery = AttachmentIssue_BotActorQuery;
    exports.AttachmentIssue_ChildrenQuery = AttachmentIssue_ChildrenQuery;
    exports.AttachmentIssue_CommentsQuery = AttachmentIssue_CommentsQuery;
    exports.AttachmentIssue_HistoryQuery = AttachmentIssue_HistoryQuery;
    exports.AttachmentIssue_InverseRelationsQuery = AttachmentIssue_InverseRelationsQuery;
    exports.AttachmentIssue_LabelsQuery = AttachmentIssue_LabelsQuery;
    exports.AttachmentIssue_RelationsQuery = AttachmentIssue_RelationsQuery;
    exports.AttachmentIssue_SubscribersQuery = AttachmentIssue_SubscribersQuery;
    exports.AttachmentLinkDiscordMutation = AttachmentLinkDiscordMutation;
    exports.AttachmentLinkFrontMutation = AttachmentLinkFrontMutation;
    exports.AttachmentLinkGitHubIssueMutation = AttachmentLinkGitHubIssueMutation;
    exports.AttachmentLinkGitHubPrMutation = AttachmentLinkGitHubPrMutation;
    exports.AttachmentLinkGitLabMrMutation = AttachmentLinkGitLabMrMutation;
    exports.AttachmentLinkIntercomMutation = AttachmentLinkIntercomMutation;
    exports.AttachmentLinkJiraIssueMutation = AttachmentLinkJiraIssueMutation;
    exports.AttachmentLinkSlackMutation = AttachmentLinkSlackMutation;
    exports.AttachmentLinkUrlMutation = AttachmentLinkUrlMutation;
    exports.AttachmentLinkZendeskMutation = AttachmentLinkZendeskMutation;
    exports.AttachmentPayload = AttachmentPayload;
    exports.AttachmentQuery = AttachmentQuery;
    exports.AttachmentSourcesPayload = AttachmentSourcesPayload;
    exports.AttachmentSyncToSlackMutation = AttachmentSyncToSlackMutation;
    exports.AttachmentsForUrlQuery = AttachmentsForUrlQuery;
    exports.AttachmentsQuery = AttachmentsQuery;
    exports.AuditEntriesQuery = AuditEntriesQuery;
    exports.AuditEntry = AuditEntry;
    exports.AuditEntryConnection = AuditEntryConnection;
    exports.AuditEntryType = AuditEntryType;
    exports.AuditEntryTypesQuery = AuditEntryTypesQuery;
    exports.AuthApiKey = AuthApiKey;
    exports.AuthApiKeyPayload = AuthApiKeyPayload;
    exports.AuthEmailIntakeAddress = AuthEmailIntakeAddress;
    exports.AuthIntegration = AuthIntegration;
    exports.AuthOauthClient = AuthOauthClient;
    exports.AuthOauthClientWithMemberships = AuthOauthClientWithMemberships;
    exports.AuthOauthClientWithScope = AuthOauthClientWithScope;
    exports.AuthOauthClientWithTokens = AuthOauthClientWithTokens;
    exports.AuthOrganization = AuthOrganization;
    exports.AuthOrganizationBucketNamePayload = AuthOrganizationBucketNamePayload;
    exports.AuthOrganizationDomain = AuthOrganizationDomain;
    exports.AuthOrganizationExistsPayload = AuthOrganizationExistsPayload;
    exports.AuthOrganizationInvite = AuthOrganizationInvite;
    exports.AuthOrganizationPayload = AuthOrganizationPayload;
    exports.AuthResolverResponse = AuthResolverResponse;
    exports.AuthSuccessPayload = AuthSuccessPayload;
    exports.AuthUser = AuthUser;
    exports.AuthenticationLinearError = AuthenticationLinearError;
    exports.AuthenticationSession = AuthenticationSession;
    exports.AuthenticationSessionResponse = AuthenticationSessionResponse;
    exports.AuthenticationSessionsQuery = AuthenticationSessionsQuery;
    exports.AuthorizedApplicationBase = AuthorizedApplicationBase;
    exports.AvailableUsersQuery = AvailableUsersQuery;
    exports.BootstrapLinearError = BootstrapLinearError;
    exports.Comment = Comment;
    exports.CommentConnection = CommentConnection;
    exports.CommentNotification = CommentNotification;
    exports.CommentPayload = CommentPayload;
    exports.CommentQuery = CommentQuery;
    exports.CommentResolveMutation = CommentResolveMutation;
    exports.CommentUnresolveMutation = CommentUnresolveMutation;
    exports.Comment_BotActorQuery = Comment_BotActorQuery;
    exports.Comment_ChildrenQuery = Comment_ChildrenQuery;
    exports.Comment_DocumentContentQuery = Comment_DocumentContentQuery;
    exports.CommentsQuery = CommentsQuery;
    exports.Connection = Connection;
    exports.ContactPayload = ContactPayload;
    exports.CreateAttachmentMutation = CreateAttachmentMutation;
    exports.CreateCommentMutation = CreateCommentMutation;
    exports.CreateContactMutation = CreateContactMutation;
    exports.CreateCsvExportReportMutation = CreateCsvExportReportMutation;
    exports.CreateCsvExportReportPayload = CreateCsvExportReportPayload;
    exports.CreateCustomViewMutation = CreateCustomViewMutation;
    exports.CreateCycleMutation = CreateCycleMutation;
    exports.CreateDocumentMutation = CreateDocumentMutation;
    exports.CreateEmailIntakeAddressMutation = CreateEmailIntakeAddressMutation;
    exports.CreateEmojiMutation = CreateEmojiMutation;
    exports.CreateEntityExternalLinkMutation = CreateEntityExternalLinkMutation;
    exports.CreateFavoriteMutation = CreateFavoriteMutation;
    exports.CreateGitAutomationStateMutation = CreateGitAutomationStateMutation;
    exports.CreateGitAutomationTargetBranchMutation = CreateGitAutomationTargetBranchMutation;
    exports.CreateInitiativeMutation = CreateInitiativeMutation;
    exports.CreateInitiativeToProjectMutation = CreateInitiativeToProjectMutation;
    exports.CreateIntegrationGithubCommitMutation = CreateIntegrationGithubCommitMutation;
    exports.CreateIntegrationTemplateMutation = CreateIntegrationTemplateMutation;
    exports.CreateIntegrationsSettingsMutation = CreateIntegrationsSettingsMutation;
    exports.CreateIssueDraftMutation = CreateIssueDraftMutation;
    exports.CreateIssueLabelMutation = CreateIssueLabelMutation;
    exports.CreateIssueMutation = CreateIssueMutation;
    exports.CreateIssueRelationMutation = CreateIssueRelationMutation;
    exports.CreateNotificationSubscriptionMutation = CreateNotificationSubscriptionMutation;
    exports.CreateOrJoinOrganizationResponse = CreateOrJoinOrganizationResponse;
    exports.CreateOrganizationFromOnboardingMutation = CreateOrganizationFromOnboardingMutation;
    exports.CreateOrganizationInviteMutation = CreateOrganizationInviteMutation;
    exports.CreateProjectLinkMutation = CreateProjectLinkMutation;
    exports.CreateProjectMilestoneMutation = CreateProjectMilestoneMutation;
    exports.CreateProjectMutation = CreateProjectMutation;
    exports.CreateProjectStatusMutation = CreateProjectStatusMutation;
    exports.CreateProjectUpdateInteractionMutation = CreateProjectUpdateInteractionMutation;
    exports.CreateProjectUpdateMutation = CreateProjectUpdateMutation;
    exports.CreateProjectUpdateReminderMutation = CreateProjectUpdateReminderMutation;
    exports.CreatePushSubscriptionMutation = CreatePushSubscriptionMutation;
    exports.CreateReactionMutation = CreateReactionMutation;
    exports.CreateRoadmapMutation = CreateRoadmapMutation;
    exports.CreateRoadmapToProjectMutation = CreateRoadmapToProjectMutation;
    exports.CreateTeamMembershipMutation = CreateTeamMembershipMutation;
    exports.CreateTeamMutation = CreateTeamMutation;
    exports.CreateTemplateMutation = CreateTemplateMutation;
    exports.CreateTimeScheduleMutation = CreateTimeScheduleMutation;
    exports.CreateTriageResponsibilityMutation = CreateTriageResponsibilityMutation;
    exports.CreateViewPreferencesMutation = CreateViewPreferencesMutation;
    exports.CreateWebhookMutation = CreateWebhookMutation;
    exports.CreateWorkflowStateMutation = CreateWorkflowStateMutation;
    exports.CustomView = CustomView;
    exports.CustomViewConnection = CustomViewConnection;
    exports.CustomViewHasSubscribersPayload = CustomViewHasSubscribersPayload;
    exports.CustomViewHasSubscribersQuery = CustomViewHasSubscribersQuery;
    exports.CustomViewNotificationSubscription = CustomViewNotificationSubscription;
    exports.CustomViewPayload = CustomViewPayload;
    exports.CustomViewQuery = CustomViewQuery;
    exports.CustomViewSuggestionPayload = CustomViewSuggestionPayload;
    exports.CustomView_IssuesQuery = CustomView_IssuesQuery;
    exports.CustomView_OrganizationViewPreferencesQuery = CustomView_OrganizationViewPreferencesQuery;
    exports.CustomView_OrganizationViewPreferences_PreferencesQuery = CustomView_OrganizationViewPreferences_PreferencesQuery;
    exports.CustomView_ProjectsQuery = CustomView_ProjectsQuery;
    exports.CustomView_UserViewPreferencesQuery = CustomView_UserViewPreferencesQuery;
    exports.CustomView_UserViewPreferences_PreferencesQuery = CustomView_UserViewPreferences_PreferencesQuery;
    exports.CustomView_ViewPreferencesValuesQuery = CustomView_ViewPreferencesValuesQuery;
    exports.CustomViewsQuery = CustomViewsQuery;
    exports.CustomerNeedPayload = CustomerNeedPayload;
    exports.CustomerPayload = CustomerPayload;
    exports.CustomerStatusPayload = CustomerStatusPayload;
    exports.CustomerTierPayload = CustomerTierPayload;
    exports.Cycle = Cycle;
    exports.CycleArchivePayload = CycleArchivePayload;
    exports.CycleConnection = CycleConnection;
    exports.CycleNotificationSubscription = CycleNotificationSubscription;
    exports.CyclePayload = CyclePayload;
    exports.CycleQuery = CycleQuery;
    exports.CycleShiftAllMutation = CycleShiftAllMutation;
    exports.CycleStartUpcomingCycleTodayMutation = CycleStartUpcomingCycleTodayMutation;
    exports.Cycle_IssuesQuery = Cycle_IssuesQuery;
    exports.Cycle_UncompletedIssuesUponCloseQuery = Cycle_UncompletedIssuesUponCloseQuery;
    exports.CyclesQuery = CyclesQuery;
    exports.DeleteAttachmentMutation = DeleteAttachmentMutation;
    exports.DeleteCommentMutation = DeleteCommentMutation;
    exports.DeleteCustomViewMutation = DeleteCustomViewMutation;
    exports.DeleteDocumentMutation = DeleteDocumentMutation;
    exports.DeleteEmailIntakeAddressMutation = DeleteEmailIntakeAddressMutation;
    exports.DeleteEmojiMutation = DeleteEmojiMutation;
    exports.DeleteEntityExternalLinkMutation = DeleteEntityExternalLinkMutation;
    exports.DeleteFavoriteMutation = DeleteFavoriteMutation;
    exports.DeleteGitAutomationStateMutation = DeleteGitAutomationStateMutation;
    exports.DeleteGitAutomationTargetBranchMutation = DeleteGitAutomationTargetBranchMutation;
    exports.DeleteInitiativeMutation = DeleteInitiativeMutation;
    exports.DeleteInitiativeToProjectMutation = DeleteInitiativeToProjectMutation;
    exports.DeleteIntegrationIntercomMutation = DeleteIntegrationIntercomMutation;
    exports.DeleteIntegrationMutation = DeleteIntegrationMutation;
    exports.DeleteIntegrationTemplateMutation = DeleteIntegrationTemplateMutation;
    exports.DeleteIssueDraftMutation = DeleteIssueDraftMutation;
    exports.DeleteIssueImportMutation = DeleteIssueImportMutation;
    exports.DeleteIssueLabelMutation = DeleteIssueLabelMutation;
    exports.DeleteIssueMutation = DeleteIssueMutation;
    exports.DeleteIssueRelationMutation = DeleteIssueRelationMutation;
    exports.DeleteNotificationSubscriptionMutation = DeleteNotificationSubscriptionMutation;
    exports.DeleteOrganizationCancelMutation = DeleteOrganizationCancelMutation;
    exports.DeleteOrganizationDomainMutation = DeleteOrganizationDomainMutation;
    exports.DeleteOrganizationInviteMutation = DeleteOrganizationInviteMutation;
    exports.DeleteOrganizationMutation = DeleteOrganizationMutation;
    exports.DeletePayload = DeletePayload;
    exports.DeleteProjectLinkMutation = DeleteProjectLinkMutation;
    exports.DeleteProjectMilestoneMutation = DeleteProjectMilestoneMutation;
    exports.DeleteProjectMutation = DeleteProjectMutation;
    exports.DeleteProjectUpdateMutation = DeleteProjectUpdateMutation;
    exports.DeletePushSubscriptionMutation = DeletePushSubscriptionMutation;
    exports.DeleteReactionMutation = DeleteReactionMutation;
    exports.DeleteRoadmapMutation = DeleteRoadmapMutation;
    exports.DeleteRoadmapToProjectMutation = DeleteRoadmapToProjectMutation;
    exports.DeleteTeamCyclesMutation = DeleteTeamCyclesMutation;
    exports.DeleteTeamKeyMutation = DeleteTeamKeyMutation;
    exports.DeleteTeamMembershipMutation = DeleteTeamMembershipMutation;
    exports.DeleteTeamMutation = DeleteTeamMutation;
    exports.DeleteTemplateMutation = DeleteTemplateMutation;
    exports.DeleteTimeScheduleMutation = DeleteTimeScheduleMutation;
    exports.DeleteTriageResponsibilityMutation = DeleteTriageResponsibilityMutation;
    exports.DeleteViewPreferencesMutation = DeleteViewPreferencesMutation;
    exports.DeleteWebhookMutation = DeleteWebhookMutation;
    exports.DiaryEntry = DiaryEntry;
    exports.DiaryEntryConnection = DiaryEntryConnection;
    exports.Document = Document;
    exports.DocumentArchivePayload = DocumentArchivePayload;
    exports.DocumentConnection = DocumentConnection;
    exports.DocumentContent = DocumentContent;
    exports.DocumentContentHistory = DocumentContentHistory;
    exports.DocumentContentHistoryPayload = DocumentContentHistoryPayload;
    exports.DocumentContentHistoryQuery = DocumentContentHistoryQuery;
    exports.DocumentContentHistoryType = DocumentContentHistoryType;
    exports.DocumentNotification = DocumentNotification;
    exports.DocumentPayload = DocumentPayload;
    exports.DocumentQuery = DocumentQuery;
    exports.DocumentSearchPayload = DocumentSearchPayload;
    exports.DocumentSearchResult = DocumentSearchResult;
    exports.DocumentSearchResultConnection = DocumentSearchResultConnection;
    exports.Document_CommentsQuery = Document_CommentsQuery;
    exports.DocumentsQuery = DocumentsQuery;
    exports.Draft = Draft;
    exports.EmailIntakeAddress = EmailIntakeAddress;
    exports.EmailIntakeAddressPayload = EmailIntakeAddressPayload;
    exports.EmailIntakeAddressRotateMutation = EmailIntakeAddressRotateMutation;
    exports.EmailTokenUserAccountAuthMutation = EmailTokenUserAccountAuthMutation;
    exports.EmailUnsubscribeMutation = EmailUnsubscribeMutation;
    exports.EmailUnsubscribePayload = EmailUnsubscribePayload;
    exports.EmailUserAccountAuthChallengeMutation = EmailUserAccountAuthChallengeMutation;
    exports.EmailUserAccountAuthChallengeResponse = EmailUserAccountAuthChallengeResponse;
    exports.Emoji = Emoji;
    exports.EmojiConnection = EmojiConnection;
    exports.EmojiPayload = EmojiPayload;
    exports.EmojiQuery = EmojiQuery;
    exports.EmojisQuery = EmojisQuery;
    exports.Entity = Entity;
    exports.EntityExternalLink = EntityExternalLink;
    exports.EntityExternalLinkConnection = EntityExternalLinkConnection;
    exports.EntityExternalLinkPayload = EntityExternalLinkPayload;
    exports.EntityExternalLinkQuery = EntityExternalLinkQuery;
    exports.ExternalUser = ExternalUser;
    exports.ExternalUserConnection = ExternalUserConnection;
    exports.ExternalUserQuery = ExternalUserQuery;
    exports.ExternalUsersQuery = ExternalUsersQuery;
    exports.Facet = Facet;
    exports.FacetConnection = FacetConnection;
    exports.Favorite = Favorite;
    exports.FavoriteConnection = FavoriteConnection;
    exports.FavoritePayload = FavoritePayload;
    exports.FavoriteQuery = FavoriteQuery;
    exports.Favorite_ChildrenQuery = Favorite_ChildrenQuery;
    exports.FavoritesQuery = FavoritesQuery;
    exports.FeatureFlag = FeatureFlag;
    exports.FeatureFlagConnection = FeatureFlagConnection;
    exports.FeatureFlagRolloutStage = FeatureFlagRolloutStage;
    exports.FeatureFlagRolloutStageConnection = FeatureFlagRolloutStageConnection;
    exports.FeatureNotAccessibleLinearError = FeatureNotAccessibleLinearError;
    exports.FileUploadMutation = FileUploadMutation;
    exports.ForbiddenLinearError = ForbiddenLinearError;
    exports.FrontAttachmentPayload = FrontAttachmentPayload;
    exports.FrontSettings = FrontSettings;
    exports.GitAutomationState = GitAutomationState;
    exports.GitAutomationStateConnection = GitAutomationStateConnection;
    exports.GitAutomationStatePayload = GitAutomationStatePayload;
    exports.GitAutomationTargetBranch = GitAutomationTargetBranch;
    exports.GitAutomationTargetBranchPayload = GitAutomationTargetBranchPayload;
    exports.GitHubCommitIntegrationPayload = GitHubCommitIntegrationPayload;
    exports.GitHubEnterpriseServerInstallVerificationPayload = GitHubEnterpriseServerInstallVerificationPayload;
    exports.GitHubEnterpriseServerPayload = GitHubEnterpriseServerPayload;
    exports.GitHubImportSettings = GitHubImportSettings;
    exports.GitHubPersonalSettings = GitHubPersonalSettings;
    exports.GitHubRepo = GitHubRepo;
    exports.GitHubRepoMapping = GitHubRepoMapping;
    exports.GitHubSettings = GitHubSettings;
    exports.GitLabIntegrationCreatePayload = GitLabIntegrationCreatePayload;
    exports.GitLabSettings = GitLabSettings;
    exports.GoogleSheetsSettings = GoogleSheetsSettings;
    exports.GoogleUserAccountAuthMutation = GoogleUserAccountAuthMutation;
    exports.GraphQLClientError = GraphQLClientError;
    exports.GraphqlLinearError = GraphqlLinearError;
    exports.ImageUploadFromUrlMutation = ImageUploadFromUrlMutation;
    exports.ImageUploadFromUrlPayload = ImageUploadFromUrlPayload;
    exports.ImportFileUploadMutation = ImportFileUploadMutation;
    exports.Initiative = Initiative;
    exports.InitiativeArchivePayload = InitiativeArchivePayload;
    exports.InitiativeConnection = InitiativeConnection;
    exports.InitiativeNotification = InitiativeNotification;
    exports.InitiativeNotificationSubscription = InitiativeNotificationSubscription;
    exports.InitiativePayload = InitiativePayload;
    exports.InitiativeQuery = InitiativeQuery;
    exports.InitiativeToProject = InitiativeToProject;
    exports.InitiativeToProjectConnection = InitiativeToProjectConnection;
    exports.InitiativeToProjectPayload = InitiativeToProjectPayload;
    exports.InitiativeToProjectQuery = InitiativeToProjectQuery;
    exports.InitiativeToProjectsQuery = InitiativeToProjectsQuery;
    exports.Initiative_LinksQuery = Initiative_LinksQuery;
    exports.Initiative_ProjectsQuery = Initiative_ProjectsQuery;
    exports.InitiativesQuery = InitiativesQuery;
    exports.Integration = Integration;
    exports.IntegrationAsksConnectChannelMutation = IntegrationAsksConnectChannelMutation;
    exports.IntegrationConnection = IntegrationConnection;
    exports.IntegrationDiscordMutation = IntegrationDiscordMutation;
    exports.IntegrationFigmaMutation = IntegrationFigmaMutation;
    exports.IntegrationFrontMutation = IntegrationFrontMutation;
    exports.IntegrationGitHubEnterpriseServerConnectMutation = IntegrationGitHubEnterpriseServerConnectMutation;
    exports.IntegrationGitHubPersonalMutation = IntegrationGitHubPersonalMutation;
    exports.IntegrationGithubConnectMutation = IntegrationGithubConnectMutation;
    exports.IntegrationGithubImportConnectMutation = IntegrationGithubImportConnectMutation;
    exports.IntegrationGitlabConnectMutation = IntegrationGitlabConnectMutation;
    exports.IntegrationGoogleSheetsMutation = IntegrationGoogleSheetsMutation;
    exports.IntegrationHasScopesPayload = IntegrationHasScopesPayload;
    exports.IntegrationHasScopesQuery = IntegrationHasScopesQuery;
    exports.IntegrationIntercomMutation = IntegrationIntercomMutation;
    exports.IntegrationJiraPersonalMutation = IntegrationJiraPersonalMutation;
    exports.IntegrationLoomMutation = IntegrationLoomMutation;
    exports.IntegrationPayload = IntegrationPayload;
    exports.IntegrationQuery = IntegrationQuery;
    exports.IntegrationRequestMutation = IntegrationRequestMutation;
    exports.IntegrationRequestPayload = IntegrationRequestPayload;
    exports.IntegrationSentryConnectMutation = IntegrationSentryConnectMutation;
    exports.IntegrationSettings = IntegrationSettings;
    exports.IntegrationSlackAsksMutation = IntegrationSlackAsksMutation;
    exports.IntegrationSlackCustomViewNotificationsMutation = IntegrationSlackCustomViewNotificationsMutation;
    exports.IntegrationSlackImportEmojisMutation = IntegrationSlackImportEmojisMutation;
    exports.IntegrationSlackMutation = IntegrationSlackMutation;
    exports.IntegrationSlackOrgProjectUpdatesPostMutation = IntegrationSlackOrgProjectUpdatesPostMutation;
    exports.IntegrationSlackPersonalMutation = IntegrationSlackPersonalMutation;
    exports.IntegrationSlackPostMutation = IntegrationSlackPostMutation;
    exports.IntegrationSlackProjectPostMutation = IntegrationSlackProjectPostMutation;
    exports.IntegrationTemplate = IntegrationTemplate;
    exports.IntegrationTemplateConnection = IntegrationTemplateConnection;
    exports.IntegrationTemplatePayload = IntegrationTemplatePayload;
    exports.IntegrationTemplateQuery = IntegrationTemplateQuery;
    exports.IntegrationTemplatesQuery = IntegrationTemplatesQuery;
    exports.IntegrationZendeskMutation = IntegrationZendeskMutation;
    exports.IntegrationsQuery = IntegrationsQuery;
    exports.IntegrationsSettings = IntegrationsSettings;
    exports.IntegrationsSettingsConnection = IntegrationsSettingsConnection;
    exports.IntegrationsSettingsPayload = IntegrationsSettingsPayload;
    exports.IntegrationsSettingsQuery = IntegrationsSettingsQuery;
    exports.IntercomSettings = IntercomSettings;
    exports.InternalLinearError = InternalLinearError;
    exports.InvalidInputLinearError = InvalidInputLinearError;
    exports.Issue = Issue;
    exports.IssueAddLabelMutation = IssueAddLabelMutation;
    exports.IssueArchivePayload = IssueArchivePayload;
    exports.IssueBatchPayload = IssueBatchPayload;
    exports.IssueConnection = IssueConnection;
    exports.IssueDraftArchivePayload = IssueDraftArchivePayload;
    exports.IssueDraftPayload = IssueDraftPayload;
    exports.IssueFigmaFileKeySearchQuery = IssueFigmaFileKeySearchQuery;
    exports.IssueFilterSuggestionPayload = IssueFilterSuggestionPayload;
    exports.IssueFilterSuggestionQuery = IssueFilterSuggestionQuery;
    exports.IssueHistory = IssueHistory;
    exports.IssueHistoryConnection = IssueHistoryConnection;
    exports.IssueImport = IssueImport;
    exports.IssueImportCheckCsvQuery = IssueImportCheckCsvQuery;
    exports.IssueImportCheckPayload = IssueImportCheckPayload;
    exports.IssueImportCheckSyncQuery = IssueImportCheckSyncQuery;
    exports.IssueImportCreateAsanaMutation = IssueImportCreateAsanaMutation;
    exports.IssueImportCreateClubhouseMutation = IssueImportCreateClubhouseMutation;
    exports.IssueImportCreateCsvJiraMutation = IssueImportCreateCsvJiraMutation;
    exports.IssueImportCreateGithubMutation = IssueImportCreateGithubMutation;
    exports.IssueImportCreateJiraMutation = IssueImportCreateJiraMutation;
    exports.IssueImportDeletePayload = IssueImportDeletePayload;
    exports.IssueImportJqlCheckPayload = IssueImportJqlCheckPayload;
    exports.IssueImportJqlCheckQuery = IssueImportJqlCheckQuery;
    exports.IssueImportPayload = IssueImportPayload;
    exports.IssueImportProcessMutation = IssueImportProcessMutation;
    exports.IssueImportSyncCheckPayload = IssueImportSyncCheckPayload;
    exports.IssueLabel = IssueLabel;
    exports.IssueLabelConnection = IssueLabelConnection;
    exports.IssueLabelPayload = IssueLabelPayload;
    exports.IssueLabelQuery = IssueLabelQuery;
    exports.IssueLabel_ChildrenQuery = IssueLabel_ChildrenQuery;
    exports.IssueLabel_IssuesQuery = IssueLabel_IssuesQuery;
    exports.IssueLabelsQuery = IssueLabelsQuery;
    exports.IssueNotification = IssueNotification;
    exports.IssuePayload = IssuePayload;
    exports.IssuePriorityValue = IssuePriorityValue;
    exports.IssuePriorityValuesQuery = IssuePriorityValuesQuery;
    exports.IssueQuery = IssueQuery;
    exports.IssueRelation = IssueRelation;
    exports.IssueRelationConnection = IssueRelationConnection;
    exports.IssueRelationHistoryPayload = IssueRelationHistoryPayload;
    exports.IssueRelationPayload = IssueRelationPayload;
    exports.IssueRelationQuery = IssueRelationQuery;
    exports.IssueRelationsQuery = IssueRelationsQuery;
    exports.IssueReminderMutation = IssueReminderMutation;
    exports.IssueRemoveLabelMutation = IssueRemoveLabelMutation;
    exports.IssueSearchPayload = IssueSearchPayload;
    exports.IssueSearchQuery = IssueSearchQuery;
    exports.IssueSearchResult = IssueSearchResult;
    exports.IssueSearchResultConnection = IssueSearchResultConnection;
    exports.IssueSubscribeMutation = IssueSubscribeMutation;
    exports.IssueUnsubscribeMutation = IssueUnsubscribeMutation;
    exports.IssueVcsBranchSearchQuery = IssueVcsBranchSearchQuery;
    exports.IssueVcsBranchSearch_AttachmentsQuery = IssueVcsBranchSearch_AttachmentsQuery;
    exports.IssueVcsBranchSearch_BotActorQuery = IssueVcsBranchSearch_BotActorQuery;
    exports.IssueVcsBranchSearch_ChildrenQuery = IssueVcsBranchSearch_ChildrenQuery;
    exports.IssueVcsBranchSearch_CommentsQuery = IssueVcsBranchSearch_CommentsQuery;
    exports.IssueVcsBranchSearch_HistoryQuery = IssueVcsBranchSearch_HistoryQuery;
    exports.IssueVcsBranchSearch_InverseRelationsQuery = IssueVcsBranchSearch_InverseRelationsQuery;
    exports.IssueVcsBranchSearch_LabelsQuery = IssueVcsBranchSearch_LabelsQuery;
    exports.IssueVcsBranchSearch_RelationsQuery = IssueVcsBranchSearch_RelationsQuery;
    exports.IssueVcsBranchSearch_SubscribersQuery = IssueVcsBranchSearch_SubscribersQuery;
    exports.Issue_AttachmentsQuery = Issue_AttachmentsQuery;
    exports.Issue_BotActorQuery = Issue_BotActorQuery;
    exports.Issue_ChildrenQuery = Issue_ChildrenQuery;
    exports.Issue_CommentsQuery = Issue_CommentsQuery;
    exports.Issue_HistoryQuery = Issue_HistoryQuery;
    exports.Issue_InverseRelationsQuery = Issue_InverseRelationsQuery;
    exports.Issue_LabelsQuery = Issue_LabelsQuery;
    exports.Issue_RelationsQuery = Issue_RelationsQuery;
    exports.Issue_SubscribersQuery = Issue_SubscribersQuery;
    exports.IssuesQuery = IssuesQuery;
    exports.JiraLinearMapping = JiraLinearMapping;
    exports.JiraPersonalSettings = JiraPersonalSettings;
    exports.JiraProjectData = JiraProjectData;
    exports.JiraSettings = JiraSettings;
    exports.JoinOrganizationFromOnboardingMutation = JoinOrganizationFromOnboardingMutation;
    exports.LINEAR_WEBHOOK_SIGNATURE_HEADER = LINEAR_WEBHOOK_SIGNATURE_HEADER;
    exports.LINEAR_WEBHOOK_TS_FIELD = LINEAR_WEBHOOK_TS_FIELD;
    exports.LabelNotificationSubscription = LabelNotificationSubscription;
    exports.LaunchDarklySettings = LaunchDarklySettings;
    exports.LeaveOrganizationMutation = LeaveOrganizationMutation;
    exports.LinearClient = LinearClient;
    exports.LinearConnection = LinearConnection;
    exports.LinearDocument = _generated_documents;
    exports.LinearError = LinearError;
    exports.LinearGraphQLClient = LinearGraphQLClient;
    exports.LinearGraphQLError = LinearGraphQLError;
    exports.LinearSdk = LinearSdk;
    exports.LinearWebhooks = LinearWebhooks;
    exports.LockTimeoutLinearError = LockTimeoutLinearError;
    exports.LogoutAllSessionsMutation = LogoutAllSessionsMutation;
    exports.LogoutMutation = LogoutMutation;
    exports.LogoutOtherSessionsMutation = LogoutOtherSessionsMutation;
    exports.LogoutResponse = LogoutResponse;
    exports.LogoutSessionMutation = LogoutSessionMutation;
    exports.NetworkLinearError = NetworkLinearError;
    exports.Node = Node;
    exports.Notification = Notification;
    exports.NotificationArchiveAllMutation = NotificationArchiveAllMutation;
    exports.NotificationArchivePayload = NotificationArchivePayload;
    exports.NotificationBatchActionPayload = NotificationBatchActionPayload;
    exports.NotificationConnection = NotificationConnection;
    exports.NotificationDeliveryPreferences = NotificationDeliveryPreferences;
    exports.NotificationDeliveryPreferencesChannel = NotificationDeliveryPreferencesChannel;
    exports.NotificationDeliveryPreferencesDay = NotificationDeliveryPreferencesDay;
    exports.NotificationDeliveryPreferencesSchedule = NotificationDeliveryPreferencesSchedule;
    exports.NotificationMarkReadAllMutation = NotificationMarkReadAllMutation;
    exports.NotificationMarkUnreadAllMutation = NotificationMarkUnreadAllMutation;
    exports.NotificationPayload = NotificationPayload;
    exports.NotificationQuery = NotificationQuery;
    exports.NotificationSnoozeAllMutation = NotificationSnoozeAllMutation;
    exports.NotificationSubscription = NotificationSubscription;
    exports.NotificationSubscriptionConnection = NotificationSubscriptionConnection;
    exports.NotificationSubscriptionPayload = NotificationSubscriptionPayload;
    exports.NotificationSubscriptionQuery = NotificationSubscriptionQuery;
    exports.NotificationSubscriptionsQuery = NotificationSubscriptionsQuery;
    exports.NotificationUnsnoozeAllMutation = NotificationUnsnoozeAllMutation;
    exports.NotificationsQuery = NotificationsQuery;
    exports.NotionSettings = NotionSettings;
    exports.OauthClient = OauthClient;
    exports.OauthClientApproval = OauthClientApproval;
    exports.OauthClientApprovalNotification = OauthClientApprovalNotification;
    exports.OauthClientConnection = OauthClientConnection;
    exports.OauthToken = OauthToken;
    exports.OpsgenieSettings = OpsgenieSettings;
    exports.Organization = Organization;
    exports.OrganizationAcceptedOrExpiredInviteDetailsPayload = OrganizationAcceptedOrExpiredInviteDetailsPayload;
    exports.OrganizationCancelDeletePayload = OrganizationCancelDeletePayload;
    exports.OrganizationDeleteChallengeMutation = OrganizationDeleteChallengeMutation;
    exports.OrganizationDeletePayload = OrganizationDeletePayload;
    exports.OrganizationDomain = OrganizationDomain;
    exports.OrganizationExistsPayload = OrganizationExistsPayload;
    exports.OrganizationExistsQuery = OrganizationExistsQuery;
    exports.OrganizationInvite = OrganizationInvite;
    exports.OrganizationInviteConnection = OrganizationInviteConnection;
    exports.OrganizationInviteFullDetailsPayload = OrganizationInviteFullDetailsPayload;
    exports.OrganizationInviteLinkDetailsPayload = OrganizationInviteLinkDetailsPayload;
    exports.OrganizationInvitePayload = OrganizationInvitePayload;
    exports.OrganizationInviteQuery = OrganizationInviteQuery;
    exports.OrganizationInvitesQuery = OrganizationInvitesQuery;
    exports.OrganizationIpRestriction = OrganizationIpRestriction;
    exports.OrganizationMeta = OrganizationMeta;
    exports.OrganizationPayload = OrganizationPayload;
    exports.OrganizationQuery = OrganizationQuery;
    exports.OrganizationRegionResponse = OrganizationRegionResponse;
    exports.OrganizationStartTrialMutation = OrganizationStartTrialMutation;
    exports.OrganizationStartTrialPayload = OrganizationStartTrialPayload;
    exports.Organization_IntegrationsQuery = Organization_IntegrationsQuery;
    exports.Organization_LabelsQuery = Organization_LabelsQuery;
    exports.Organization_SubscriptionQuery = Organization_SubscriptionQuery;
    exports.Organization_TeamsQuery = Organization_TeamsQuery;
    exports.Organization_TemplatesQuery = Organization_TemplatesQuery;
    exports.Organization_UsersQuery = Organization_UsersQuery;
    exports.OtherLinearError = OtherLinearError;
    exports.PageInfo = PageInfo;
    exports.PagerDutySettings = PagerDutySettings;
    exports.PaidSubscription = PaidSubscription;
    exports.Passkey = Passkey;
    exports.PasskeyLoginStartResponse = PasskeyLoginStartResponse;
    exports.Project = Project;
    exports.ProjectArchivePayload = ProjectArchivePayload;
    exports.ProjectConnection = ProjectConnection;
    exports.ProjectFilterSuggestionPayload = ProjectFilterSuggestionPayload;
    exports.ProjectFilterSuggestionQuery = ProjectFilterSuggestionQuery;
    exports.ProjectHistory = ProjectHistory;
    exports.ProjectHistoryConnection = ProjectHistoryConnection;
    exports.ProjectLink = ProjectLink;
    exports.ProjectLinkConnection = ProjectLinkConnection;
    exports.ProjectLinkPayload = ProjectLinkPayload;
    exports.ProjectLinkQuery = ProjectLinkQuery;
    exports.ProjectLinksQuery = ProjectLinksQuery;
    exports.ProjectMilestone = ProjectMilestone;
    exports.ProjectMilestoneConnection = ProjectMilestoneConnection;
    exports.ProjectMilestoneMoveIssueToTeam = ProjectMilestoneMoveIssueToTeam;
    exports.ProjectMilestoneMovePayload = ProjectMilestoneMovePayload;
    exports.ProjectMilestoneMoveProjectTeams = ProjectMilestoneMoveProjectTeams;
    exports.ProjectMilestonePayload = ProjectMilestonePayload;
    exports.ProjectMilestoneQuery = ProjectMilestoneQuery;
    exports.ProjectMilestone_DocumentContentQuery = ProjectMilestone_DocumentContentQuery;
    exports.ProjectMilestone_IssuesQuery = ProjectMilestone_IssuesQuery;
    exports.ProjectMilestonesQuery = ProjectMilestonesQuery;
    exports.ProjectNotification = ProjectNotification;
    exports.ProjectNotificationSubscription = ProjectNotificationSubscription;
    exports.ProjectPayload = ProjectPayload;
    exports.ProjectQuery = ProjectQuery;
    exports.ProjectRelation = ProjectRelation;
    exports.ProjectRelationConnection = ProjectRelationConnection;
    exports.ProjectRelationPayload = ProjectRelationPayload;
    exports.ProjectRelationQuery = ProjectRelationQuery;
    exports.ProjectRelationsQuery = ProjectRelationsQuery;
    exports.ProjectSearchPayload = ProjectSearchPayload;
    exports.ProjectSearchResult = ProjectSearchResult;
    exports.ProjectSearchResultConnection = ProjectSearchResultConnection;
    exports.ProjectStatus = ProjectStatus;
    exports.ProjectStatusArchivePayload = ProjectStatusArchivePayload;
    exports.ProjectStatusConnection = ProjectStatusConnection;
    exports.ProjectStatusCountPayload = ProjectStatusCountPayload;
    exports.ProjectStatusPayload = ProjectStatusPayload;
    exports.ProjectStatusQuery = ProjectStatusQuery;
    exports.ProjectStatusesQuery = ProjectStatusesQuery;
    exports.ProjectUpdate = ProjectUpdate;
    exports.ProjectUpdateConnection = ProjectUpdateConnection;
    exports.ProjectUpdateInteraction = ProjectUpdateInteraction;
    exports.ProjectUpdateInteractionConnection = ProjectUpdateInteractionConnection;
    exports.ProjectUpdateInteractionPayload = ProjectUpdateInteractionPayload;
    exports.ProjectUpdateInteractionQuery = ProjectUpdateInteractionQuery;
    exports.ProjectUpdateInteractionsQuery = ProjectUpdateInteractionsQuery;
    exports.ProjectUpdateMarkAsReadMutation = ProjectUpdateMarkAsReadMutation;
    exports.ProjectUpdatePayload = ProjectUpdatePayload;
    exports.ProjectUpdateQuery = ProjectUpdateQuery;
    exports.ProjectUpdateReminderPayload = ProjectUpdateReminderPayload;
    exports.ProjectUpdateWithInteractionPayload = ProjectUpdateWithInteractionPayload;
    exports.ProjectUpdate_CommentsQuery = ProjectUpdate_CommentsQuery;
    exports.ProjectUpdatesQuery = ProjectUpdatesQuery;
    exports.Project_CommentsQuery = Project_CommentsQuery;
    exports.Project_DocumentContentQuery = Project_DocumentContentQuery;
    exports.Project_DocumentsQuery = Project_DocumentsQuery;
    exports.Project_ExternalLinksQuery = Project_ExternalLinksQuery;
    exports.Project_HistoryQuery = Project_HistoryQuery;
    exports.Project_InitiativesQuery = Project_InitiativesQuery;
    exports.Project_IssuesQuery = Project_IssuesQuery;
    exports.Project_LinksQuery = Project_LinksQuery;
    exports.Project_MembersQuery = Project_MembersQuery;
    exports.Project_ProjectMilestonesQuery = Project_ProjectMilestonesQuery;
    exports.Project_ProjectUpdatesQuery = Project_ProjectUpdatesQuery;
    exports.Project_TeamsQuery = Project_TeamsQuery;
    exports.ProjectsQuery = ProjectsQuery;
    exports.PushSubscription = PushSubscription;
    exports.PushSubscriptionConnection = PushSubscriptionConnection;
    exports.PushSubscriptionPayload = PushSubscriptionPayload;
    exports.PushSubscriptionTestPayload = PushSubscriptionTestPayload;
    exports.PushSubscriptionTestQuery = PushSubscriptionTestQuery;
    exports.RateLimitPayload = RateLimitPayload;
    exports.RateLimitResultPayload = RateLimitResultPayload;
    exports.RateLimitStatusQuery = RateLimitStatusQuery;
    exports.RatelimitedLinearError = RatelimitedLinearError;
    exports.Reaction = Reaction;
    exports.ReactionConnection = ReactionConnection;
    exports.ReactionPayload = ReactionPayload;
    exports.RefreshGoogleSheetsDataMutation = RefreshGoogleSheetsDataMutation;
    exports.Reminder = Reminder;
    exports.Request = Request;
    exports.ResendOrganizationInviteMutation = ResendOrganizationInviteMutation;
    exports.Roadmap = Roadmap;
    exports.RoadmapArchivePayload = RoadmapArchivePayload;
    exports.RoadmapConnection = RoadmapConnection;
    exports.RoadmapPayload = RoadmapPayload;
    exports.RoadmapQuery = RoadmapQuery;
    exports.RoadmapToProject = RoadmapToProject;
    exports.RoadmapToProjectConnection = RoadmapToProjectConnection;
    exports.RoadmapToProjectPayload = RoadmapToProjectPayload;
    exports.RoadmapToProjectQuery = RoadmapToProjectQuery;
    exports.RoadmapToProjectsQuery = RoadmapToProjectsQuery;
    exports.Roadmap_ProjectsQuery = Roadmap_ProjectsQuery;
    exports.RoadmapsQuery = RoadmapsQuery;
    exports.SamlTokenUserAccountAuthMutation = SamlTokenUserAccountAuthMutation;
    exports.SearchDocumentsQuery = SearchDocumentsQuery;
    exports.SearchDocuments_ArchivePayloadQuery = SearchDocuments_ArchivePayloadQuery;
    exports.SearchIssuesQuery = SearchIssuesQuery;
    exports.SearchIssues_ArchivePayloadQuery = SearchIssues_ArchivePayloadQuery;
    exports.SearchProjectsQuery = SearchProjectsQuery;
    exports.SearchProjects_ArchivePayloadQuery = SearchProjects_ArchivePayloadQuery;
    exports.SentrySettings = SentrySettings;
    exports.SharedSlackSettings = SharedSlackSettings;
    exports.SlackAsksSettings = SlackAsksSettings;
    exports.SlackAsksTeamSettings = SlackAsksTeamSettings;
    exports.SlackChannelConnectPayload = SlackChannelConnectPayload;
    exports.SlackChannelNameMapping = SlackChannelNameMapping;
    exports.SlackPostSettings = SlackPostSettings;
    exports.SlackSettings = SlackSettings;
    exports.SsoUrlFromEmailQuery = SsoUrlFromEmailQuery;
    exports.SsoUrlFromEmailResponse = SsoUrlFromEmailResponse;
    exports.SuccessPayload = SuccessPayload;
    exports.SummaryPayload = SummaryPayload;
    exports.SuspendUserMutation = SuspendUserMutation;
    exports.SynchronizedPayload = SynchronizedPayload;
    exports.Team = Team;
    exports.TeamArchivePayload = TeamArchivePayload;
    exports.TeamConnection = TeamConnection;
    exports.TeamMembership = TeamMembership;
    exports.TeamMembershipConnection = TeamMembershipConnection;
    exports.TeamMembershipPayload = TeamMembershipPayload;
    exports.TeamMembershipQuery = TeamMembershipQuery;
    exports.TeamMembershipsQuery = TeamMembershipsQuery;
    exports.TeamNotificationSubscription = TeamNotificationSubscription;
    exports.TeamPayload = TeamPayload;
    exports.TeamQuery = TeamQuery;
    exports.Team_CyclesQuery = Team_CyclesQuery;
    exports.Team_GitAutomationStatesQuery = Team_GitAutomationStatesQuery;
    exports.Team_IssuesQuery = Team_IssuesQuery;
    exports.Team_LabelsQuery = Team_LabelsQuery;
    exports.Team_MembersQuery = Team_MembersQuery;
    exports.Team_MembershipsQuery = Team_MembershipsQuery;
    exports.Team_ProjectsQuery = Team_ProjectsQuery;
    exports.Team_StatesQuery = Team_StatesQuery;
    exports.Team_TemplatesQuery = Team_TemplatesQuery;
    exports.Team_WebhooksQuery = Team_WebhooksQuery;
    exports.TeamsQuery = TeamsQuery;
    exports.Template = Template;
    exports.TemplateConnection = TemplateConnection;
    exports.TemplatePayload = TemplatePayload;
    exports.TemplateQuery = TemplateQuery;
    exports.TemplatesForIntegrationQuery = TemplatesForIntegrationQuery;
    exports.TemplatesQuery = TemplatesQuery;
    exports.TimeSchedule = TimeSchedule;
    exports.TimeScheduleConnection = TimeScheduleConnection;
    exports.TimeScheduleEntry = TimeScheduleEntry;
    exports.TimeSchedulePayload = TimeSchedulePayload;
    exports.TimeScheduleQuery = TimeScheduleQuery;
    exports.TimeScheduleRefreshIntegrationScheduleMutation = TimeScheduleRefreshIntegrationScheduleMutation;
    exports.TimeScheduleUpsertExternalMutation = TimeScheduleUpsertExternalMutation;
    exports.TimeSchedulesQuery = TimeSchedulesQuery;
    exports.TriageResponsibilitiesQuery = TriageResponsibilitiesQuery;
    exports.TriageResponsibility = TriageResponsibility;
    exports.TriageResponsibilityConnection = TriageResponsibilityConnection;
    exports.TriageResponsibilityManualSelection = TriageResponsibilityManualSelection;
    exports.TriageResponsibilityPayload = TriageResponsibilityPayload;
    exports.TriageResponsibilityQuery = TriageResponsibilityQuery;
    exports.TriageResponsibility_ManualSelectionQuery = TriageResponsibility_ManualSelectionQuery;
    exports.UnarchiveDocumentMutation = UnarchiveDocumentMutation;
    exports.UnarchiveInitiativeMutation = UnarchiveInitiativeMutation;
    exports.UnarchiveIssueMutation = UnarchiveIssueMutation;
    exports.UnarchiveNotificationMutation = UnarchiveNotificationMutation;
    exports.UnarchiveProjectMutation = UnarchiveProjectMutation;
    exports.UnarchiveProjectStatusMutation = UnarchiveProjectStatusMutation;
    exports.UnarchiveRoadmapMutation = UnarchiveRoadmapMutation;
    exports.UnarchiveTeamMutation = UnarchiveTeamMutation;
    exports.UnknownLinearError = UnknownLinearError;
    exports.UnsuspendUserMutation = UnsuspendUserMutation;
    exports.UpdateAttachmentMutation = UpdateAttachmentMutation;
    exports.UpdateCommentMutation = UpdateCommentMutation;
    exports.UpdateCustomViewMutation = UpdateCustomViewMutation;
    exports.UpdateCycleMutation = UpdateCycleMutation;
    exports.UpdateDocumentMutation = UpdateDocumentMutation;
    exports.UpdateEmailIntakeAddressMutation = UpdateEmailIntakeAddressMutation;
    exports.UpdateEntityExternalLinkMutation = UpdateEntityExternalLinkMutation;
    exports.UpdateFavoriteMutation = UpdateFavoriteMutation;
    exports.UpdateGitAutomationStateMutation = UpdateGitAutomationStateMutation;
    exports.UpdateGitAutomationTargetBranchMutation = UpdateGitAutomationTargetBranchMutation;
    exports.UpdateInitiativeMutation = UpdateInitiativeMutation;
    exports.UpdateInitiativeToProjectMutation = UpdateInitiativeToProjectMutation;
    exports.UpdateIntegrationIntercomSettingsMutation = UpdateIntegrationIntercomSettingsMutation;
    exports.UpdateIntegrationsSettingsMutation = UpdateIntegrationsSettingsMutation;
    exports.UpdateIssueBatchMutation = UpdateIssueBatchMutation;
    exports.UpdateIssueDraftMutation = UpdateIssueDraftMutation;
    exports.UpdateIssueImportMutation = UpdateIssueImportMutation;
    exports.UpdateIssueLabelMutation = UpdateIssueLabelMutation;
    exports.UpdateIssueMutation = UpdateIssueMutation;
    exports.UpdateIssueRelationMutation = UpdateIssueRelationMutation;
    exports.UpdateNotificationMutation = UpdateNotificationMutation;
    exports.UpdateNotificationSubscriptionMutation = UpdateNotificationSubscriptionMutation;
    exports.UpdateOrganizationInviteMutation = UpdateOrganizationInviteMutation;
    exports.UpdateOrganizationMutation = UpdateOrganizationMutation;
    exports.UpdateProjectLinkMutation = UpdateProjectLinkMutation;
    exports.UpdateProjectMilestoneMutation = UpdateProjectMilestoneMutation;
    exports.UpdateProjectMutation = UpdateProjectMutation;
    exports.UpdateProjectStatusMutation = UpdateProjectStatusMutation;
    exports.UpdateProjectUpdateMutation = UpdateProjectUpdateMutation;
    exports.UpdateRoadmapMutation = UpdateRoadmapMutation;
    exports.UpdateRoadmapToProjectMutation = UpdateRoadmapToProjectMutation;
    exports.UpdateTeamMembershipMutation = UpdateTeamMembershipMutation;
    exports.UpdateTeamMutation = UpdateTeamMutation;
    exports.UpdateTemplateMutation = UpdateTemplateMutation;
    exports.UpdateTimeScheduleMutation = UpdateTimeScheduleMutation;
    exports.UpdateTriageResponsibilityMutation = UpdateTriageResponsibilityMutation;
    exports.UpdateUserFlagMutation = UpdateUserFlagMutation;
    exports.UpdateUserMutation = UpdateUserMutation;
    exports.UpdateUserSettingsMutation = UpdateUserSettingsMutation;
    exports.UpdateViewPreferencesMutation = UpdateViewPreferencesMutation;
    exports.UpdateWebhookMutation = UpdateWebhookMutation;
    exports.UpdateWorkflowStateMutation = UpdateWorkflowStateMutation;
    exports.UploadFile = UploadFile;
    exports.UploadFileHeader = UploadFileHeader;
    exports.UploadPayload = UploadPayload;
    exports.User = User;
    exports.UserAccount = UserAccount;
    exports.UserAdminPayload = UserAdminPayload;
    exports.UserAuthorizedApplication = UserAuthorizedApplication;
    exports.UserConnection = UserConnection;
    exports.UserDemoteAdminMutation = UserDemoteAdminMutation;
    exports.UserDemoteMemberMutation = UserDemoteMemberMutation;
    exports.UserDiscordConnectMutation = UserDiscordConnectMutation;
    exports.UserExternalUserDisconnectMutation = UserExternalUserDisconnectMutation;
    exports.UserLinearError = UserLinearError;
    exports.UserNotificationSubscription = UserNotificationSubscription;
    exports.UserPayload = UserPayload;
    exports.UserPromoteAdminMutation = UserPromoteAdminMutation;
    exports.UserPromoteMemberMutation = UserPromoteMemberMutation;
    exports.UserQuery = UserQuery;
    exports.UserSettings = UserSettings;
    exports.UserSettingsFlagPayload = UserSettingsFlagPayload;
    exports.UserSettingsFlagsResetMutation = UserSettingsFlagsResetMutation;
    exports.UserSettingsFlagsResetPayload = UserSettingsFlagsResetPayload;
    exports.UserSettingsPayload = UserSettingsPayload;
    exports.UserSettingsQuery = UserSettingsQuery;
    exports.UserSettings_NotificationDeliveryPreferencesQuery = UserSettings_NotificationDeliveryPreferencesQuery;
    exports.UserSettings_NotificationDeliveryPreferences_MobileQuery = UserSettings_NotificationDeliveryPreferences_MobileQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleQuery = UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayQuery = UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayQuery = UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayQuery = UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayQuery = UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayQuery = UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayQuery = UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayQuery = UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayQuery;
    exports.User_AssignedIssuesQuery = User_AssignedIssuesQuery;
    exports.User_CreatedIssuesQuery = User_CreatedIssuesQuery;
    exports.User_TeamMembershipsQuery = User_TeamMembershipsQuery;
    exports.User_TeamsQuery = User_TeamsQuery;
    exports.UsersQuery = UsersQuery;
    exports.VerifyGitHubEnterpriseServerInstallationQuery = VerifyGitHubEnterpriseServerInstallationQuery;
    exports.ViewPreferences = ViewPreferences;
    exports.ViewPreferencesPayload = ViewPreferencesPayload;
    exports.ViewPreferencesValues = ViewPreferencesValues;
    exports.ViewerQuery = ViewerQuery;
    exports.Viewer_AssignedIssuesQuery = Viewer_AssignedIssuesQuery;
    exports.Viewer_CreatedIssuesQuery = Viewer_CreatedIssuesQuery;
    exports.Viewer_TeamMembershipsQuery = Viewer_TeamMembershipsQuery;
    exports.Viewer_TeamsQuery = Viewer_TeamsQuery;
    exports.Webhook = Webhook;
    exports.WebhookConnection = WebhookConnection;
    exports.WebhookFailureEvent = WebhookFailureEvent;
    exports.WebhookPayload = WebhookPayload;
    exports.WebhookQuery = WebhookQuery;
    exports.WebhooksQuery = WebhooksQuery;
    exports.WorkflowCronJobDefinition = WorkflowCronJobDefinition;
    exports.WorkflowCronJobDefinitionConnection = WorkflowCronJobDefinitionConnection;
    exports.WorkflowDefinition = WorkflowDefinition;
    exports.WorkflowDefinitionConnection = WorkflowDefinitionConnection;
    exports.WorkflowState = WorkflowState;
    exports.WorkflowStateArchivePayload = WorkflowStateArchivePayload;
    exports.WorkflowStateConnection = WorkflowStateConnection;
    exports.WorkflowStatePayload = WorkflowStatePayload;
    exports.WorkflowStateQuery = WorkflowStateQuery;
    exports.WorkflowState_IssuesQuery = WorkflowState_IssuesQuery;
    exports.WorkflowStatesQuery = WorkflowStatesQuery;
    exports.ZendeskSettings = ZendeskSettings;
    exports.parseLinearError = parseLinearError;

}));
//# sourceMappingURL=index-umd.js.map
