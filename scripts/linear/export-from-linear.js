#!/usr/bin/env node
/**
 * Linear „Åã„Çâ Markdown „Å∏„ÅÆÈÄ±Ê¨°„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Çπ„ÇØ„É™„Éó„Éà
 * 
 * ‰ΩøÁî®ÊñπÊ≥ï:
 * 1. Linear API „Ç≠„Éº„ÇíÁí∞Â¢ÉÂ§âÊï∞„Å´Ë®≠ÂÆö
 *    export LINEAR_API_KEY="your_api_key_here"
 * 
 * 2. „Çπ„ÇØ„É™„Éó„ÉàÂÆüË°åÔºà„Éá„Éï„Ç©„É´„Éà: ÈÄ±Ê¨°„É¨„Éù„Éº„ÉàÔºâ
 *    node scripts/linear/export-from-linear.js
 * 
 * 3. ÂÖ®‰Ωì„Ç®„ÇØ„Çπ„Éù„Éº„Éà
 *    node scripts/linear/export-from-linear.js --full
 */

const fs = require('fs');
const path = require('path');
const { LinearClient } = require('@linear/sdk');

// Ë®≠ÂÆö
const CONFIG = {
  LINEAR_API_KEY: process.env.LINEAR_API_KEY,
  OUTPUT_DIR: path.join(__dirname, '../../docs/03_ssot/_linear_exports'),
  FULL_EXPORT: process.argv.includes('--full'),
};

/**
 * Linear „Åã„ÇâÂÖ®IssuesÂèñÂæó
 */
async function fetchAllIssues(client) {
  console.log('üì• Fetching issues from Linear...');
  
  const issues = await client.issues({
    includeArchived: false,
    orderBy: 'createdAt',
  });
  
  console.log(`   Found ${issues.nodes.length} issues\n`);
  return issues.nodes;
}

/**
 * ÁèæÂú®„ÅÆ„Çµ„Ç§„ÇØ„É´„ÅÆIssuesÂèñÂæó
 */
async function fetchCurrentCycleIssues(client) {
  console.log('üì• Fetching current cycle issues from Linear...');
  
  // ÂÖ®„ÉÅ„Éº„É†„ÅÆÁèæÂú®„ÅÆ„Çµ„Ç§„ÇØ„É´„ÇíÂèñÂæó
  const teams = await client.teams();
  const allIssues = [];
  
  for (const team of teams.nodes) {
    const cycles = await client.cycles({
      filter: {
        team: { id: { eq: team.id } },
        isActive: { eq: true },
      },
    });
    
    if (cycles.nodes.length > 0) {
      const currentCycle = cycles.nodes[0];
      const issues = await currentCycle.issues();
      allIssues.push(...issues.nodes);
    }
  }
  
  console.log(`   Found ${allIssues.length} issues in current cycle\n`);
  return allIssues;
}

/**
 * Issues „Çí Phase/Week „Åß„Ç∞„É´„Éº„ÉóÂåñ
 */
function groupIssues(issues) {
  const grouped = {};
  
  issues.forEach(issue => {
    // „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêçÔºàPhaseÔºâ„ÇíÂèñÂæó
    const projectName = issue.project?.name || 'No Project';
    
    if (!grouped[projectName]) {
      grouped[projectName] = {};
    }
    
    // „Çµ„Ç§„ÇØ„É´ÂêçÔºàWeekÔºâ„ÇíÂèñÂæó
    const cycleName = issue.cycle?.name || 'No Cycle';
    
    if (!grouped[projectName][cycleName]) {
      grouped[projectName][cycleName] = [];
    }
    
    grouped[projectName][cycleName].push(issue);
  });
  
  return grouped;
}

/**
 * „Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÁµµÊñáÂ≠ó„Å´Â§âÊèõ
 */
function statusToEmoji(state) {
  if (!state) return '‚è≥';
  
  const name = state.name.toLowerCase();
  if (name.includes('done') || name.includes('completed')) return '‚úÖ';
  if (name.includes('progress')) return 'üü°';
  if (name.includes('blocked')) return 'üî¥';
  if (name.includes('todo')) return '‚è≥';
  return '‚≠ï';
}

/**
 * ÂÑ™ÂÖàÂ∫¶„ÇíÁµµÊñáÂ≠ó„Å´Â§âÊèõ
 */
function priorityToEmoji(priority) {
  if (priority === 1) return 'üî¥';
  if (priority === 2) return 'üü°';
  if (priority === 3) return 'üü¢';
  return '‚ö™';
}

/**
 * Markdown „ÉÜ„Éº„Éñ„É´Ë°å„ÇíÁîüÊàê
 */
function generateTableRow(issue, index) {
  const status = statusToEmoji(issue.state);
  const priority = priorityToEmoji(issue.priority);
  const assignee = issue.assignee?.name || 'Unassigned';
  const estimate = issue.estimate ? `${issue.estimate / 2}Êó•` : '-';
  const labels = issue.labels.nodes.map(l => l.name).join(', ') || '-';
  
  return `| ${index} | ${issue.title} | ${assignee} | ${estimate} | ${status} | ${priority} | ${labels} |`;
}

/**
 * ÈÄ±Ê¨°„É¨„Éù„Éº„ÉàÁîüÊàê
 */
function generateWeeklyReport(issues) {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  
  let markdown = `# üìä Linear ÈÄ±Ê¨°ÈÄ≤Êçó„É¨„Éù„Éº„Éà\n\n`;
  markdown += `**ÁîüÊàêÊó•**: ${year}-${month}-${day}\n`;
  markdown += `**„Éá„Éº„Çø„ÇΩ„Éº„Çπ**: Linear API\n\n`;
  markdown += `---\n\n`;
  
  // Phase/WeekÂà•„Å´„Ç∞„É´„Éº„ÉóÂåñ
  const grouped = groupIssues(issues);
  
  Object.entries(grouped).forEach(([phase, weeks]) => {
    markdown += `## ${phase}\n\n`;
    
    Object.entries(weeks).forEach(([week, issueList]) => {
      markdown += `### ${week}\n\n`;
      
      // Áµ±Ë®àÊÉÖÂ†±
      const total = issueList.length;
      const completed = issueList.filter(i => statusToEmoji(i.state) === '‚úÖ').length;
      const inProgress = issueList.filter(i => statusToEmoji(i.state) === 'üü°').length;
      const todo = issueList.filter(i => statusToEmoji(i.state) === '‚è≥' || statusToEmoji(i.state) === '‚≠ï').length;
      const blocked = issueList.filter(i => statusToEmoji(i.state) === 'üî¥').length;
      
      markdown += `**ÈÄ≤Êçó**: ${completed}/${total} (${Math.round(completed / total * 100)}%)\n\n`;
      markdown += `| Áä∂ÊÖã | ‰ª∂Êï∞ |\n`;
      markdown += `|:-----|:----:|\n`;
      markdown += `| ‚úÖ ÂÆå‰∫Ü | ${completed} |\n`;
      markdown += `| üü° ÈÄ≤Ë°å‰∏≠ | ${inProgress} |\n`;
      markdown += `| ‚è≥ Todo | ${todo} |\n`;
      if (blocked > 0) {
        markdown += `| üî¥ „Éñ„É≠„ÉÉ„ÇØ | ${blocked} |\n`;
      }
      markdown += `\n`;
      
      // „Çø„Çπ„ÇØ‰∏ÄË¶ß
      markdown += `| # | „Çø„Çπ„ÇØ | ÊãÖÂΩì | Â∑•Êï∞ | Áä∂ÊÖã | ÂÑ™ÂÖàÂ∫¶ | „É©„Éô„É´ |\n`;
      markdown += `|:-:|:-------|:-----|:----:|:----:|:------:|:-------|\n`;
      
      issueList.forEach((issue, idx) => {
        markdown += generateTableRow(issue, idx + 1) + '\n';
      });
      
      markdown += `\n`;
    });
  });
  
  // „Çµ„Éû„É™„Éº
  const totalIssues = issues.length;
  const completedIssues = issues.filter(i => statusToEmoji(i.state) === '‚úÖ').length;
  
  markdown += `## üìà „Çµ„Éû„É™„Éº\n\n`;
  markdown += `- **Á∑è„Çø„Çπ„ÇØÊï∞**: ${totalIssues}\n`;
  markdown += `- **ÂÆå‰∫Ü**: ${completedIssues}\n`;
  markdown += `- **ÂÆå‰∫ÜÁéá**: ${Math.round(completedIssues / totalIssues * 100)}%\n`;
  
  return markdown;
}

/**
 * ÂÖ®‰Ωì„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÁîüÊàêÔºàSSOT_PROGRESS_MASTER.md ÂΩ¢ÂºèÔºâ
 */
function generateFullExport(issues) {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  
  let markdown = `# üìä SSOT‰ΩúÊàêÈÄ≤ÊçóÁÆ°ÁêÜ„Éû„Çπ„Çø„ÉºÔºàLinear ExportÔºâ\n\n`;
  markdown += `**„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÊó•**: ${year}-${month}-${day}\n`;
  markdown += `**„Éá„Éº„Çø„ÇΩ„Éº„Çπ**: Linear API\n`;
  markdown += `**Ëá™ÂãïÁîüÊàê**: „Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅØËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åô„ÄÇÁ∑®ÈõÜ„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ\n\n`;
  markdown += `> ‚ö†Ô∏è **ÈáçË¶Å**: Linear„ÅåÂîØ‰∏Ä„ÅÆÈÄ≤ÊçóÁÆ°ÁêÜ„ÉÑ„Éº„É´„Åß„Åô„ÄÇ„Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅØÂèÇÁÖßÁî®„Åß„Åô„ÄÇ\n\n`;
  markdown += `---\n\n`;
  
  // Phase/WeekÂà•„Å´„Ç∞„É´„Éº„ÉóÂåñ
  const grouped = groupIssues(issues);
  
  Object.entries(grouped).sort().forEach(([phase, weeks]) => {
    markdown += `## ${phase}\n\n`;
    
    const phaseIssues = Object.values(weeks).flat();
    const phaseTotal = phaseIssues.length;
    const phaseCompleted = phaseIssues.filter(i => statusToEmoji(i.state) === '‚úÖ').length;
    
    markdown += `**ÊúüÈñì**: [LinearÂèÇÁÖß]\n`;
    markdown += `**ÈÄ≤Êçó**: ${phaseCompleted}/${phaseTotal} (**${Math.round(phaseCompleted / phaseTotal * 100)}%**)\n\n`;
    
    Object.entries(weeks).sort().forEach(([week, issueList]) => {
      markdown += `### ${week}\n\n`;
      
      markdown += `| # | „Çø„Çπ„ÇØ | Á®ÆÂà• | ÊãÖÂΩì | Â∑•Êï∞ | Áä∂ÊÖã | „Éê„Éº„Ç∏„Éß„É≥ | Linear |\n`;
      markdown += `|:-:|:-------|:-----|:-----|:----:|:----:|:----------:|:-------|\n`;
      
      issueList.forEach((issue, idx) => {
        const status = statusToEmoji(issue.state);
        const assignee = issue.assignee?.name || 'TBD';
        const estimate = issue.estimate ? `${issue.estimate / 2}Êó•` : '-';
        const type = issue.labels.nodes.find(l => l.name.includes('ssot') || l.name.includes('implementation'))?.name || '-';
        const version = issue.title.match(/v[\d.]+/)?.[0] || '-';
        const url = issue.url;
        
        markdown += `| ${idx + 1} | ${issue.title} | ${type} | ${assignee} | ${estimate} | ${status} | ${version} | [Link](${url}) |\n`;
      });
      
      markdown += `\n`;
    });
    
    markdown += `---\n\n`;
  });
  
  return markdown;
}

/**
 * „Éï„Ç°„Ç§„É´‰øùÂ≠ò
 */
function saveMarkdown(markdown, filename) {
  // Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
  if (!fs.existsSync(CONFIG.OUTPUT_DIR)) {
    fs.mkdirSync(CONFIG.OUTPUT_DIR, { recursive: true });
  }
  
  const filepath = path.join(CONFIG.OUTPUT_DIR, filename);
  fs.writeFileSync(filepath, markdown, 'utf-8');
  
  console.log(`‚úÖ Saved: ${filepath}`);
}

/**
 * „É°„Ç§„É≥Âá¶ÁêÜ
 */
async function main() {
  console.log('üöÄ Linear Export Script\n');
  
  if (!CONFIG.LINEAR_API_KEY) {
    console.error('‚ùå LINEAR_API_KEY environment variable is not set');
    process.exit(1);
  }
  
  // Linear „ÇØ„É©„Ç§„Ç¢„É≥„ÉàÂàùÊúüÂåñ
  const client = new LinearClient({ apiKey: CONFIG.LINEAR_API_KEY });
  
  // IssuesÂèñÂæó
  const issues = CONFIG.FULL_EXPORT
    ? await fetchAllIssues(client)
    : await fetchCurrentCycleIssues(client);
  
  if (issues.length === 0) {
    console.log('‚ö†Ô∏è  No issues found');
    return;
  }
  
  // MarkdownÁîüÊàê
  console.log('üìù Generating Markdown...');
  
  const markdown = CONFIG.FULL_EXPORT
    ? generateFullExport(issues)
    : generateWeeklyReport(issues);
  
  // „Éï„Ç°„Ç§„É´‰øùÂ≠ò
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  
  const filename = CONFIG.FULL_EXPORT
    ? `PROGRESS_FULL_${year}${month}${day}.md`
    : `PROGRESS_WEEKLY_${year}${month}${day}.md`;
  
  saveMarkdown(markdown, filename);
  
  console.log('\n‚úÖ Export completed successfully');
}

// „Çπ„ÇØ„É™„Éó„ÉàÂÆüË°å
main().catch(error => {
  console.error('\n‚ùå Export failed:', error);
  process.exit(1);
});

